block {
  statements {
    pop {
      expr {
        nop {
          op: NUMBER
        }
      }
    }
  }
  statements {
  }
  statements {
    decl {
      expr {
        binop {
          op: KECCAK
          left {
            nop {
              op: NUMBER
            }
          }
          right {
            nop {
              op: NUMBER
            }
          }
        }
      }
    }
  }
  statements {
  }
  statements {
  }
  statements {
  }
  statements {
  }
  statements {
  }
  statements {
    copy_func {
      ct: CODE
      target {
        nop {
          op: NUMBER
        }
      }
      source {
      }
      size {
      }
    }
  }
  statements {
  }
  statements {
    decl {
      expr {
      }
    }
  }
  statements {
    pop {
      expr {
        nop {
          op: NUMBER
        }
      }
    }
  }
  statements {
    breakstmt {
    }
  }
  statements {
  }
  statements {
  }
  statements {
    copy_func {
      ct: CODE
      target {
        nop {
          op: NUMBER
        }
      }
      source {
      }
      size {
      }
    }
  }
  statements {
  }
  statements {
  }
  statements {
  }
  statements {
  }
  statements {
    decl {
      expr {
        binop {
          op: KECCAK
          left {
            nop {
              op: NUMBER
            }
          }
          right {
            nop {
              op: NUMBER
            }
          }
        }
      }
    }
  }
  statements {
  }
  statements {
  }
  statements {
  }
  statements {
    pop {
      expr {
        nop {
          op: NUMBER
        }
      }
    }
  }
  statements {
  }
  statements {
    pop {
      expr {
        nop {
          op: NUMBER
        }
      }
    }
  }
  statements {
    pop {
      expr {
        nop {
          op: NUMBER
        }
      }
    }
  }
  statements {
  }
  statements {
  }
  statements {
  }
  statements {
    copy_func {
      ct: CODE
      target {
        nop {
          op: NUMBER
        }
      }
      source {
      }
      size {
      }
    }
  }
  statements {
    pop {
      expr {
        nop {
          op: NUMBER
        }
      }
    }
  }
  statements {
  }
  statements {
    pop {
      expr {
        nop {
          op: NUMBER
        }
      }
    }
  }
  statements {
  }
  statements {
    pop {
      expr {
        nop {
          op: NUMBER
        }
      }
    }
  }
  statements {
    funcdef {
      num_input_params: 0
      num_output_params: 64
      block {
      }
    }
  }
  statements {
  }
  statements {
    pop {
      expr {
        nop {
          op: NUMBER
        }
      }
    }
  }
  statements {
  }
  statements {
  }
}
