statements {
  statements {
    ifstmt {
      cond {
        varref {
          varnum: 0
        }
      }
      if_body {
        statements {
          assignment {
            ref_id {
              varnum: 0
            }
            expr {
            }
          }
        }
      }
    }
  }
  statements {
    ifstmt {
      cond {
        varref {
          varnum: 0
        }
      }
      if_body {
      }
    }
  }
  statements {
    storage_func {
      loc {
        binop {
          op: ADD
          left {
            cons {
              strval: "4\001mutabl"
            }
          }
          right {
            unop {
              op: NOT
              operand {
              }
            }
          }
        }
      }
      val {
      }
      st: SSTORE
    }
  }
  statements {
    decl {
      expr {
        binop {
          op: KECCAK
          left {
            binop {
              op: ADD
              left {
              }
              right {
                cons {
                  strval: "\000\000\000\000\000\000A\001"
                }
              }
            }
          }
          right {
          }
        }
      }
    }
  }
  statements {
    decl {
      expr {
        binop {
          op: KECCAK
          left {
            binop {
              op: ADD
              left {
              }
              right {
                binop {
                  op: KECCAK
                  left {
                  }
                  right {
                  }
                }
              }
            }
          }
          right {
          }
        }
      }
    }
  }
  statements {
  }
  statements {
    decl {
      expr {
        binop {
          op: KECCAK
          left {
            binop {
              op: ADD
              left {
              }
              right {
                binop {
                  op: KECCAK
                  left {
                  }
                  right {
                  }
                }
              }
            }
          }
          right {
          }
        }
      }
    }
  }
}
