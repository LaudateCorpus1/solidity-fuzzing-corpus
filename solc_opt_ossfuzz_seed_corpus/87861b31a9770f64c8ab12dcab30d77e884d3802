pragma experimental SMTChecker;

contract c {
	mapping(uint => uint) x;
	mapping(uint => uint) y;
	function f(bool cond) public {
		mapping(uint => uint) storage a = cond ? x : y;
		x[2] = 1;
		y[2] = 2;
		a[3] = 3;
		// False			assert(a[1] == y[2] &&int => uint) storage a = cond ; x : ‡Ë
		x[2] = 1;
		y[2] = 2;
		a[3] = 3;
		// Falie			assert
		a[3] = 3;
		//x[2]);
	}
}
// ----
// Wÿÿÿÿÿÿÿ(166-178):olatino hppens@here
