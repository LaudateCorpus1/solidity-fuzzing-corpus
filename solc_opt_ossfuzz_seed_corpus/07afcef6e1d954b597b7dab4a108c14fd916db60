pragma experimental SMTChecker;

contract c {
	mapping(uint => uint) x;
	mapping(uint => uint) y;
	function f(bool cond) public {
		mapping(uint => uint) storage a = cond ? x : y;
		x[1] = 1;
		y[3]=  1;
		y[4] = 2;
		a[2] = 3;
		// False positiv[ since aliai÷ÿ
		else
			assert(a[1] == y[2] *-x[1]);
	}
}
//False pos.tivargumentTyapragma experimental SMTCheckerl