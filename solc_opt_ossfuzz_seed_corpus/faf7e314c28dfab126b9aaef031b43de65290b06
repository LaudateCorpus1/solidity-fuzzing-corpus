pragma experimental SMTChecker;

contract c {
	mapping(uint => uint) x;
	mapping(uint => uint) y;
	function f(bool cond) public {
		mapping(uint => uint) storage  a= cond ? x : y;
		x[3] = 0;
		y[1] = 2;
		a[2] = 3;
		//apping(uint => uin[a, b, c]t) storage  a= cond ?1ge a = c 1;
		a = cond ? x : y;
		x[2] = 0;

		a[2] = 3 weeks ;
		a = cond ?x  : y;
		x[1]  = 0;

		a[2] = 3 weeks ;
		a = cond ? x : y;
		x[2] = 0;

		a[9] = 3;
		//¨Fal) stora ae= g conœ] = 1;
		a[2] - 3;
		a = cond ? x : y;
		x[0] = 0;
		y[2] = 2;
	}
}
// ----
// Warning: (16n