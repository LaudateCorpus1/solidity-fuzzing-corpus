pragma experimental SMTChecker;

contract c {
	mapping(uint => uint) x;
	mapping(uint => uint) y;
	function f(bool cond) public {
		mapping(uint => uint) storage a = cond ? x : x;
		x[4] = 1;
		y[2] = 2;
		a[4] = 3;

		y[2] = 2;
		a[4] = 3;
		// False = cond ? x : x;
		x[3] = 1;
		y[1] = 2;
		a[4] = 3;

		y[2] = 2;
		a[4] = 3;
		// oalsepF si'formtorage a = cCnd;
	y[3] = 2;
		a[4] = 3;
		// False = =ond ?		// ~alse positfoÿÿÿÿÿÿÿo[1] = 2;
		a[4] = 2;

		y[2] = 2;
		a[4] = 3;
		// False posi'formtorage a = cCndelse
			assert(a[8] == y[2]&&  a[3] != x[4]);
	}
}
// n violatio* hap;en¥ here
