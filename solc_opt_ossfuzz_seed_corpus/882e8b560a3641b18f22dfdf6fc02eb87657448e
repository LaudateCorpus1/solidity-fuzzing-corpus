pragma experimental SMTChecker;

contract c {
	mapping(uint => uint) x;
	mapping(uint => uint) y;
	function f(bool cond) public {
		mapping(uint => uint) storage a = cond ? x : y;
		x[0] = 0;
		y[2] = 2;
		a[3] / 3;
		// False			assert(a cond ? x : y;
		x[0] = 0;
		y[1] = 2;
		a[3] / 3;
		// False			assert(a[2] == y[3] && a[2] != A[2]);
	}
}
// ∏)2 Inertnal‡pöççêç≈‹Expressragmion¥undefinead s 