funcs {
  fd_zero {
    num_input_params: 6
    statements {
      var {
      }
      statements {
        boundedforstmt {
          for_body {
          }
        }
      }
      statements {
        boundedforstmt {
          for_body {
          }
        }
      }
      statements {
        boundedforstmt {
          for_body {
          }
        }
      }
    }
  }
  fd_one {
    num_input_params: 4
    statements {
    }
  }
  fd_multi {
    num_input_params: 6
    num_output_params: 4
    statements {
      statements {
        copy_func {
          ct: CODE
          target {
          }
          source {
          }
          size {
          }
        }
      }
    }
  }
}
funcs {
  fd_zero {
    num_input_params: 4
    statements {
      var {
      }
      statements {
        terminatestmt {
          self_des {
            addr {
            }
          }
        }
      }
      statements {
        blockstmt {
          statements {
            copy_func {
              ct: CODE
              target {
                func_expr {
                  func_index: 0
                  in_param1 {
                  }
                  in_param2 {
                  }
                  in_param3 {
                    cons {
                      hexval: "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT"
                    }
                  }
                  in_param4 {
                  }
                }
              }
              source {
              }
              size {
              }
            }
          }
        }
      }
      statements {
        boundedforstmt {
          for_body {
            statements {
            }
          }
        }
      }
      statements {
      }
      statements {
        terminatestmt {
          self_des {
            addr {
            }
          }
        }
      }
    }
  }
  fd_one {
    num_input_params: 0
    statements {
    }
  }
  fd_multi {
    num_input_params: 1542
    num_output_params: 6
    statements {
      statements {
      }
    }
  }
}
funcs {
  fd_zero {
    num_input_params: 4
    statements {
      var {
      }
      statements {
        terminatestmt {
          self_des {
            addr {
            }
          }
        }
      }
      statements {
        boundedforstmt {
          for_body {
          }
        }
      }
      statements {
        boundedforstmt {
          for_body {
            statements {
            }
          }
        }
      }
      statements {
        boundedforstmt {
          for_body {
          }
        }
      }
      statements {
        terminatestmt {
          self_des {
            addr {
            }
          }
        }
      }
      statements {
        boundedforstmt {
          for_body {
          }
        }
      }
    }
  }
  fd_one {
    num_input_params: 4
    statements {
    }
  }
  fd_multi {
    num_input_params: 6
    num_output_params: 6
    statements {
      statements {
      }
    }
  }
}
funcs {
  fd_zero {
    num_input_params: 4
    statements {
      var {
      }
      statements {
        terminatestmt {
          self_des {
            addr {
            }
          }
        }
      }
      statements {
        blockstmt {
          statements {
            copy_func {
              ct: CODE
              target {
                func_expr {
                  func_index: 0
                  in_param1 {
                  }
                  in_param2 {
                  }
                  in_param3 {
                    cons {
                      hexval: "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT"
                    }
                  }
                  in_param4 {
                  }
                }
              }
              source {
              }
              size {
              }
            }
          }
        }
      }
      statements {
      }
      statements {
        boundedforstmt {
          for_body {
            statements {
            }
          }
        }
      }
      statements {
        terminatestmt {
          stop_invalid {
            stmt: STOP
          }
        }
      }
      statements {
        terminatestmt {
          self_des {
            addr {
            }
          }
        }
      }
    }
  }
  fd_one {
    num_input_params: 0
    statements {
      statements {
        forstmt {
          for_body {
          }
          for_init {
            statements {
              functioncall {
                call_multidecl {
                  func_index: 0
                  in_param1 {
                  }
                  in_param2 {
                  }
                  in_param3 {
                  }
                  in_param4 {
                  }
                }
              }
            }
            statements {
              functioncall {
                call_multidecl {
                  func_index: 0
                  in_param1 {
                  }
                  in_param2 {
                  }
                  in_param3 {
                  }
                  in_param4 {
                  }
                }
              }
            }
          }
          for_post {
          }
          for_cond {
          }
        }
      }
    }
  }
  fd_multi {
    num_input_params: 1542
    num_output_params: 8
    statements {
      statements {
      }
    }
  }
}
funcs {
  fd_zero {
    num_input_params: 2
    statements {
      var {
      }
    }
  }
  fd_one {
    num_input_params: 4
    statements {
      statements {
        ifstmt {
          cond {
            top {
              op: ADDM
              arg1 {
              }
              arg2 {
              }
              arg3 {
                nop {
                  op: MSIZE
                }
              }
            }
          }
          if_body {
          }
        }
      }
    }
  }
  fd_multi {
    num_input_params: 2
    num_output_params: 8
    statements {
    }
  }
}
funcs {
  fd_zero {
    num_input_params: 4
    statements {
      var {
      }
      statements {
        terminatestmt {
          stop_invalid {
            stmt: STOP
          }
        }
      }
    }
  }
  fd_one {
    num_input_params: 0
    statements {
      statements {
        forstmt {
          for_body {
          }
          for_init {
            statements {
              functioncall {
                call_multidecl {
                  func_index: 0
                  in_param1 {
                  }
                  in_param2 {
                  }
                  in_param3 {
                  }
                  in_param4 {
                  }
                }
              }
            }
            statements {
              functioncall {
                call_multidecl {
                  func_index: 0
                  in_param1 {
                  }
                  in_param2 {
                  }
                  in_param3 {
                  }
                  in_param4 {
                  }
                }
              }
            }
          }
          for_post {
          }
          for_cond {
          }
        }
      }
    }
  }
  fd_multi {
    num_input_params: 4
    num_output_params: 8
    statements {
    }
  }
}
funcs {
  fd_zero {
    num_input_params: 6
    statements {
      var {
      }
      statements {
        boundedforstmt {
          for_body {
          }
        }
      }
      statements {
        boundedforstmt {
          for_body {
          }
        }
      }
      statements {
        boundedforstmt {
          for_body {
          }
        }
      }
    }
  }
  fd_one {
    num_input_params: 4
    statements {
    }
  }
  fd_multi {
    num_input_params: 6
    num_output_params: 4
    statements {
      statements {
        copy_func {
          ct: CODE
          target {
          }
          source {
          }
          size {
          }
        }
      }
    }
  }
}
funcs {
  fd_zero {
    num_input_params: 4
    statements {
      var {
      }
      statements {
        terminatestmt {
          self_des {
            addr {
            }
          }
        }
      }
      statements {
        blockstmt {
          statements {
            copy_func {
              ct: CODE
              target {
                func_expr {
                  func_index: 0
                  in_param1 {
                  }
                  in_param2 {
                  }
                  in_param3 {
                    cons {
                      hexval: "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT"
                    }
                  }
                  in_param4 {
                  }
                }
              }
              source {
              }
              size {
              }
            }
          }
        }
      }
      statements {
        boundedforstmt {
          for_body {
            statements {
            }
          }
        }
      }
      statements {
      }
      statements {
        terminatestmt {
          self_des {
            addr {
            }
          }
        }
      }
    }
  }
  fd_one {
    num_input_params: 0
    statements {
    }
  }
  fd_multi {
    num_input_params: 1542
    num_output_params: 6
    statements {
      statements {
      }
    }
  }
}
funcs {
  fd_zero {
    num_input_params: 0
    statements {
      var {
      }
      statements {
        boundedforstmt {
          for_body {
          }
        }
      }
      statements {
        boundedforstmt {
          for_body {
            statements {
            }
          }
        }
      }
      statements {
        blockstmt {
          statements {
            copy_func {
              ct: CODE
              target {
                func_expr {
                  func_index: 0
                  in_param1 {
                  }
                  in_param2 {
                  }
                  in_param3 {
                    cons {
                      hexval: "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT"
                    }
                  }
                  in_param4 {
                  }
                }
              }
              source {
              }
              size {
              }
            }
          }
        }
      }
      statements {
        terminatestmt {
          self_des {
            addr {
            }
          }
        }
      }
      statements {
      }
      statements {
        terminatestmt {
          self_des {
            addr {
            }
          }
        }
      }
    }
  }
  fd_one {
    num_input_params: 0
    statements {
    }
  }
  fd_multi {
    num_input_params: 1542
    num_output_params: 4
    statements {
      statements {
      }
    }
  }
}
funcs {
  fd_zero {
    num_input_params: 6
    statements {
      var {
      }
      statements {
        boundedforstmt {
          for_body {
          }
        }
      }
      statements {
        boundedforstmt {
          for_body {
          }
        }
      }
      statements {
        boundedforstmt {
          for_body {
          }
        }
      }
    }
  }
  fd_one {
    num_input_params: 4
    statements {
    }
  }
  fd_multi {
    num_input_params: 6
    num_output_params: 4
    statements {
      statements {
        copy_func {
          ct: CODE
          target {
          }
          source {
          }
          size {
          }
        }
      }
    }
  }
}
funcs {
  fd_zero {
    num_input_params: 4
    statements {
      var {
      }
      statements {
        boundedforstmt {
          for_body {
            statements {
              copy_func {
                ct: CODE
                target {
                  func_expr {
                    func_index: 0
                    in_param1 {
                    }
                    in_param2 {
                    }
                    in_param3 {
                      cons {
                        hexval: "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT"
                      }
                    }
                    in_param4 {
                    }
                  }
                }
                source {
                }
                size {
                }
              }
            }
          }
        }
      }
      statements {
        boundedforstmt {
          for_body {
          }
        }
      }
      statements {
        terminatestmt {
          self_des {
            addr {
            }
          }
        }
      }
      statements {
        blockstmt {
          statements {
            copy_func {
              ct: CODE
              target {
                func_expr {
                  func_index: 0
                  in_param1 {
                  }
                  in_param2 {
                  }
                  in_param3 {
                    cons {
                      hexval: "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT"
                    }
                  }
                  in_param4 {
                  }
                }
              }
              source {
              }
              size {
              }
            }
          }
        }
      }
      statements {
        boundedforstmt {
          for_body {
          }
        }
      }
      statements {
        terminatestmt {
          self_des {
            addr {
            }
          }
        }
      }
    }
  }
  fd_one {
    num_input_params: 0
    statements {
    }
  }
  fd_multi {
    num_input_params: 6
    num_output_params: 4
    statements {
      statements {
        copy_func {
          ct: CODE
          target {
          }
          source {
          }
          size {
          }
        }
      }
      statements {
        copy_func {
          ct: CODE
          target {
          }
          source {
          }
          size {
          }
        }
      }
    }
  }
}
funcs {
  fd_zero {
    num_input_params: 0
    statements {
      var {
      }
      statements {
        boundedforstmt {
          for_body {
          }
        }
      }
      statements {
        boundedforstmt {
          for_body {
          }
        }
      }
      statements {
        boundedforstmt {
          for_body {
          }
        }
      }
    }
  }
  fd_one {
    num_input_params: 4
    statements {
    }
  }
  fd_multi {
    num_input_params: 6
    num_output_params: 0
    statements {
      statements {
        terminatestmt {
        }
      }
      statements {
      }
      statements {
        forstmt {
          for_body {
          }
          for_init {
            statements {
              terminatestmt {
                stop_invalid {
                  stmt: INVALID
                }
              }
            }
          }
          for_post {
          }
          for_cond {
          }
        }
      }
      statements {
      }
    }
  }
}
funcs {
  fd_zero {
    num_input_params: 4
    statements {
      var {
      }
      statements {
        terminatestmt {
          self_des {
            addr {
            }
          }
        }
      }
      statements {
        blockstmt {
          statements {
            copy_func {
              ct: CODE
              target {
                func_expr {
                  func_index: 0
                  in_param1 {
                  }
                  in_param2 {
                  }
                  in_param3 {
                    cons {
                      hexval: "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT"
                    }
                  }
                  in_param4 {
                  }
                }
              }
              source {
              }
              size {
              }
            }
          }
        }
      }
      statements {
        boundedforstmt {
          for_body {
            statements {
            }
          }
        }
      }
      statements {
      }
      statements {
        terminatestmt {
          self_des {
            addr {
            }
          }
        }
      }
    }
  }
  fd_one {
    num_input_params: 0
    statements {
    }
  }
  fd_multi {
    num_input_params: 1542
    num_output_params: 6
    statements {
      statements {
      }
    }
  }
}
funcs {
  fd_zero {
    num_input_params: 6
    statements {
      var {
      }
      statements {
        boundedforstmt {
          for_body {
          }
        }
      }
      statements {
        boundedforstmt {
          for_body {
          }
        }
      }
      statements {
        boundedforstmt {
          for_body {
          }
        }
      }
    }
  }
  fd_one {
    num_input_params: 4
    statements {
    }
  }
  fd_multi {
    num_input_params: 6
    num_output_params: 4
    statements {
      statements {
        copy_func {
          ct: CODE
          target {
          }
          source {
          }
          size {
          }
        }
      }
    }
  }
}
funcs {
  fd_zero {
    num_input_params: 0
    statements {
      var {
      }
      statements {
        terminatestmt {
          self_des {
            addr {
            }
          }
        }
      }
      statements {
      }
      statements {
        terminatestmt {
          self_des {
            addr {
            }
          }
        }
      }
      statements {
        boundedforstmt {
          for_body {
            statements {
            }
          }
        }
      }
      statements {
        boundedforstmt {
          for_body {
          }
        }
      }
      statements {
        terminatestmt {
          self_des {
            addr {
            }
          }
        }
      }
      statements {
        boundedforstmt {
          for_body {
            statements {
            }
          }
        }
      }
      statements {
        blockstmt {
          statements {
            copy_func {
              ct: CODE
              target {
                func_expr {
                  func_index: 0
                  in_param1 {
                  }
                  in_param2 {
                  }
                  in_param3 {
                    cons {
                      hexval: "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT"
                    }
                  }
                  in_param4 {
                  }
                }
              }
              source {
              }
              size {
              }
            }
          }
        }
      }
      statements {
      }
      statements {
        blockstmt {
          statements {
            copy_func {
              ct: CODE
              target {
                func_expr {
                  func_index: 0
                  in_param1 {
                  }
                  in_param2 {
                  }
                  in_param3 {
                    cons {
                      hexval: "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT"
                    }
                  }
                  in_param4 {
                  }
                }
              }
              source {
              }
              size {
              }
            }
          }
        }
      }
    }
  }
  fd_one {
    num_input_params: 0
    statements {
    }
  }
  fd_multi {
    num_input_params: 1542
    num_output_params: 4
    statements {
      statements {
      }
      statements {
      }
    }
  }
}
funcs {
  fd_zero {
    num_input_params: 6
    statements {
      var {
      }
      statements {
        boundedforstmt {
          for_body {
          }
        }
      }
      statements {
        boundedforstmt {
          for_body {
          }
        }
      }
      statements {
        boundedforstmt {
          for_body {
          }
        }
      }
    }
  }
  fd_one {
    num_input_params: 4
    statements {
    }
  }
  fd_multi {
    num_input_params: 6
    num_output_params: 4
    statements {
      statements {
        copy_func {
          ct: CODE
          target {
          }
          source {
          }
          size {
          }
        }
      }
    }
  }
}
funcs {
  fd_zero {
    num_input_params: 0
    statements {
      var {
      }
      statements {
        boundedforstmt {
          for_body {
          }
        }
      }
      statements {
        boundedforstmt {
          for_body {
            statements {
            }
          }
        }
      }
      statements {
        blockstmt {
          statements {
            copy_func {
              ct: CODE
              target {
                func_expr {
                  func_index: 0
                  in_param1 {
                  }
                  in_param2 {
                  }
                  in_param3 {
                    cons {
                      hexval: "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT"
                    }
                  }
                  in_param4 {
                  }
                }
              }
              source {
              }
              size {
              }
            }
          }
        }
      }
      statements {
        terminatestmt {
          self_des {
            addr {
            }
          }
        }
      }
      statements {
      }
      statements {
        terminatestmt {
          self_des {
            addr {
            }
          }
        }
      }
    }
  }
  fd_one {
    num_input_params: 0
    statements {
    }
  }
  fd_multi {
    num_input_params: 1542
    num_output_params: 4
    statements {
      statements {
      }
    }
  }
}
funcs {
  fd_zero {
    num_input_params: 6
    statements {
      var {
      }
      statements {
        boundedforstmt {
          for_body {
          }
        }
      }
      statements {
        boundedforstmt {
          for_body {
          }
        }
      }
      statements {
        boundedforstmt {
          for_body {
          }
        }
      }
    }
  }
  fd_one {
    num_input_params: 4
    statements {
    }
  }
  fd_multi {
    num_input_params: 6
    num_output_params: 4
    statements {
      statements {
        copy_func {
          ct: CODE
          target {
          }
          source {
          }
          size {
          }
        }
      }
    }
  }
}
funcs {
  fd_zero {
    num_input_params: 4
    statements {
      var {
      }
      statements {
        boundedforstmt {
          for_body {
          }
        }
      }
      statements {
        boundedforstmt {
          for_body {
          }
        }
      }
      statements {
        terminatestmt {
          self_des {
            addr {
            }
          }
        }
      }
      statements {
        blockstmt {
          statements {
            copy_func {
              ct: CODE
              target {
                func_expr {
                  func_index: 0
                  in_param1 {
                  }
                  in_param2 {
                  }
                  in_param3 {
                    cons {
                      hexval: "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT"
                    }
                  }
                  in_param4 {
                  }
                }
              }
              source {
              }
              size {
              }
            }
          }
        }
      }
      statements {
        boundedforstmt {
          for_body {
          }
        }
      }
      statements {
        terminatestmt {
          self_des {
            addr {
            }
          }
        }
      }
    }
  }
  fd_one {
    num_input_params: 0
    statements {
    }
  }
  fd_multi {
    num_input_params: 6
    num_output_params: 4
    statements {
      statements {
        copy_func {
          ct: CODE
          target {
          }
          source {
          }
          size {
          }
        }
      }
      statements {
        copy_func {
          ct: CODE
          target {
          }
          source {
          }
          size {
          }
        }
      }
    }
  }
}
funcs {
  fd_zero {
    num_input_params: 0
    statements {
      var {
      }
      statements {
        functioncall {
          call_multidecl {
            func_index: 8
            in_param1 {
              binop {
                op: GT
                left {
                  binop {
                    op: GT
                    left {
                    }
                    right {
                      nop {
                        op: PC
                      }
                    }
                  }
                }
                right {
                }
              }
            }
            in_param2 {
            }
            in_param3 {
            }
            in_param4 {
              nop {
                op: PC
              }
            }
          }
        }
      }
    }
  }
  fd_one {
    num_input_params: 8
    statements {
    }
  }
  fd_multi {
    num_input_params: 64264
    num_output_params: 4
    statements {
      statements {
        storage_func {
          loc {
            binop {
              op: GT
              left {
                binop {
                  op: GT
                  left {
                  }
                  right {
                    nop {
                      op: PC
                    }
                  }
                }
              }
              right {
              }
            }
          }
          val {
          }
          st: SSTORE
        }
      }
      statements {
        storage_func {
          loc {
            binop {
              op: GT
              left {
                binop {
                  op: GT
                  left {
                  }
                  right {
                    nop {
                      op: PC
                    }
                  }
                }
              }
              right {
              }
            }
          }
          val {
            varref {
              varnum: 40
            }
          }
          st: SSTORE
        }
      }
    }
  }
}
funcs {
  fd_zero {
    num_input_params: 6
    statements {
      var {
      }
      statements {
        boundedforstmt {
          for_body {
          }
        }
      }
      statements {
        boundedforstmt {
          for_body {
          }
        }
      }
      statements {
        boundedforstmt {
          for_body {
          }
        }
      }
    }
  }
  fd_one {
    num_input_params: 4
    statements {
    }
  }
  fd_multi {
    num_input_params: 6
    num_output_params: 4
    statements {
      statements {
        copy_func {
          ct: CODE
          target {
          }
          source {
          }
          size {
          }
        }
      }
    }
  }
}
funcs {
  fd_zero {
    num_input_params: 8
    statements {
      var {
      }
      statements {
        boundedforstmt {
          for_body {
            statements {
              ifstmt {
                cond {
                  unop {
                    op: ISZERO
                    operand {
                    }
                  }
                }
                if_body {
                  statements {
                    contstmt {
                    }
                  }
                }
              }
            }
            statements {
            }
          }
        }
      }
    }
  }
  fd_one {
    num_input_params: 8
    statements {
    }
  }
  fd_multi {
    num_input_params: 2
    num_output_params: 8
    statements {
    }
  }
}
funcs {
  fd_zero {
    num_input_params: 8
    statements {
      var {
      }
      statements {
        boundedforstmt {
          for_body {
            statements {
              ifstmt {
                cond {
                  unop {
                    op: ISZERO
                    operand {
                    }
                  }
                }
                if_body {
                  statements {
                    contstmt {
                    }
                  }
                }
              }
            }
            statements {
              ifstmt {
                cond {
                }
                if_body {
                  statements {
                    breakstmt {
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  fd_one {
    num_input_params: 8
    statements {
    }
  }
  fd_multi {
    num_input_params: 2
    num_output_params: 8
    statements {
    }
  }
}
funcs {
  fd_zero {
    num_input_params: 6
    statements {
      var {
      }
      statements {
        boundedforstmt {
          for_body {
          }
        }
      }
      statements {
        boundedforstmt {
          for_body {
          }
        }
      }
      statements {
        boundedforstmt {
          for_body {
          }
        }
      }
    }
  }
  fd_one {
    num_input_params: 4
    statements {
    }
  }
  fd_multi {
    num_input_params: 6
    num_output_params: 4
    statements {
      statements {
        copy_func {
          ct: CODE
          target {
          }
          source {
          }
          size {
          }
        }
      }
    }
  }
}
funcs {
  fd_zero {
    num_input_params: 4
    statements {
      var {
      }
    }
  }
  fd_one {
    num_input_params: 0
    statements {
    }
  }
  fd_multi {
    num_input_params: 0
    num_output_params: 6
    statements {
      statements {
      }
      statements {
        terminatestmt {
        }
      }
    }
  }
}
funcs {
  fd_zero {
    num_input_params: 0
    statements {
      var {
      }
      statements {
        terminatestmt {
        }
      }
      statements {
        blockstmt {
          statements {
            copy_func {
              ct: CODE
              target {
                func_expr {
                  func_index: 0
                  in_param1 {
                  }
                  in_param2 {
                  }
                  in_param3 {
                    cons {
                      hexval: "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT"
                    }
                  }
                  in_param4 {
                  }
                }
              }
              source {
              }
              size {
              }
            }
          }
        }
      }
    }
  }
  fd_one {
    num_input_params: 0
    statements {
    }
  }
  fd_multi {
    num_input_params: 0
    num_output_params: 6
    statements {
      statements {
        terminatestmt {
        }
      }
      statements {
        boundedforstmt {
          for_body {
          }
        }
      }
    }
  }
}
funcs {
  fd_zero {
    num_input_params: 0
    statements {
      var {
      }
      statements {
        functioncall {
          call_multidecl {
            func_index: 8
            in_param1 {
              binop {
                op: GT
                left {
                  binop {
                    op: GT
                    left {
                    }
                    right {
                      nop {
                        op: PC
                      }
                    }
                  }
                }
                right {
                }
              }
            }
            in_param2 {
            }
            in_param3 {
            }
            in_param4 {
              nop {
                op: PC
              }
            }
          }
        }
      }
      statements {
        blockstmt {
          statements {
            copy_func {
              ct: CODE
              target {
                func_expr {
                  func_index: 0
                  in_param1 {
                  }
                  in_param2 {
                  }
                  in_param3 {
                    cons {
                      hexval: "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT"
                    }
                  }
                  in_param4 {
                  }
                }
              }
              source {
              }
              size {
              }
            }
          }
        }
      }
    }
  }
  fd_one {
    num_input_params: 8
    statements {
    }
  }
  fd_multi {
    num_input_params: 64264
    num_output_params: 6
    statements {
      statements {
        storage_func {
          loc {
            binop {
              op: GT
              left {
                binop {
                  op: GT
                  left {
                  }
                  right {
                    nop {
                      op: PC
                    }
                  }
                }
              }
              right {
              }
            }
          }
          val {
            varref {
              varnum: 40
            }
          }
          st: SSTORE
        }
      }
      statements {
        storage_func {
          loc {
            binop {
              op: GT
              left {
                binop {
                  op: GT
                  left {
                  }
                  right {
                    nop {
                      op: PC
                    }
                  }
                }
              }
              right {
              }
            }
          }
          val {
          }
          st: SSTORE
        }
      }
      statements {
        terminatestmt {
        }
      }
    }
  }
}
funcs {
  fd_zero {
    num_input_params: 4
    statements {
      var {
      }
      statements {
        terminatestmt {
          self_des {
            addr {
            }
          }
        }
      }
      statements {
        blockstmt {
          statements {
            copy_func {
              ct: CODE
              target {
                func_expr {
                  func_index: 0
                  in_param1 {
                  }
                  in_param2 {
                  }
                  in_param3 {
                    cons {
                      hexval: "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT"
                    }
                  }
                  in_param4 {
                  }
                }
              }
              source {
              }
              size {
              }
            }
          }
        }
      }
      statements {
        boundedforstmt {
          for_body {
            statements {
            }
          }
        }
      }
      statements {
      }
      statements {
        terminatestmt {
          self_des {
            addr {
            }
          }
        }
      }
    }
  }
  fd_one {
    num_input_params: 0
    statements {
    }
  }
  fd_multi {
    num_input_params: 1542
    num_output_params: 6
    statements {
      statements {
      }
    }
  }
}
