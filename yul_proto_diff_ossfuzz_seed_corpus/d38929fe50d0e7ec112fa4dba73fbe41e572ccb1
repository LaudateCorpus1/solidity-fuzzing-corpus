block {
  statements {
    forstmt {
      for_body {
      }
      for_init {
      }
      for_post {
        statements {
          terminatestmt {
            stop_invalid {
              stmt: STOP
            }
          }
        }
      }
      for_cond {
        top {
          op: ADDM
          arg1 {
            func_expr {
              ret: SINGLE
              func_index: 0
              in_param1 {
              }
              in_param2 {
              }
              in_param3 {
              }
              in_param4 {
              }
              out_param1 {
                varnum: 0
              }
              out_param2 {
                varnum: 0
              }
              out_param3 {
                varnum: 0
              }
              out_param4 {
                varnum: 0
              }
            }
          }
          arg2 {
          }
          arg3 {
          }
        }
      }
    }
  }
  statements {
    funcdef {
      num_input_params: 9
      num_output_params: 538976256
      block {
        statements {
          assignment {
            ref_id {
              varnum: 4
            }
            expr {
              cons {
                intval: 0
              }
            }
          }
        }
      }
    }
  }
  statements {
    boundedforstmt {
      for_body {
        statements {
          boundedforstmt {
            for_body {
              statements {
                boundedforstmt {
                  for_body {
                    statements {
                      boundedforstmt {
                        for_body {
                          statements {
                            boundedforstmt {
                              for_body {
                                statements {
                                  terminatestmt {
                                    stop_invalid {
                                      stmt: STOP
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
