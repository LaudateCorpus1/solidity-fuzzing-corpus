funcs {
  fd_zero {
    num_input_params: 0
    statements {
      var {
      }
      statements {
        functioncall {
        }
      }
      statements {
        switchstmt {
          switch_expr {
            nop {
              op: PC
            }
          }
          case_stmt {
            case_lit {
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: "z"
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: "or"
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: "2"
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              intval: 0
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              intval: 10752
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              intval: 134217775
            }
            case_block {
            }
          }
          default_block {
            statements {
              terminatestmt {
                stop_invalid {
                  stmt: STOP
                }
              }
            }
          }
        }
      }
      statements {
        forstmt {
          for_body {
          }
          for_init {
          }
          for_post {
          }
          for_cond {
            binop {
              op: SHR
              left {
              }
              right {
                binop {
                  op: SHR
                  left {
                  }
                  right {
                    binop {
                      op: SHR
                      left {
                      }
                      right {
                        binop {
                          op: SHR
                          left {
                          }
                          right {
                            binop {
                              op: SHR
                              left {
                              }
                              right {
                                binop {
                                  op: SHR
                                  left {
                                  }
                                  right {
                                    binop {
                                      op: SHR
                                      left {
                                      }
                                      right {
                                        binop {
                                          op: SHR
                                          left {
                                          }
                                          right {
                                            binop {
                                              op: SHR
                                              left {
                                              }
                                              right {
                                                binop {
                                                  op: SHR
                                                  left {
                                                  }
                                                  right {
                                                    binop {
                                                      op: SHR
                                                      left {
                                                      }
                                                      right {
                                                        binop {
                                                          op: SHR
                                                          left {
                                                          }
                                                          right {
                                                            binop {
                                                              op: SHR
                                                              left {
                                                              }
                                                              right {
                                                                binop {
                                                                  op: SHR
                                                                  left {
                                                                  }
                                                                  right {
                                                                    binop {
                                                                      op: SHR
                                                                      left {
                                                                      }
                                                                      right {
                                                                        binop {
                                                                          op: SHR
                                                                          left {
                                                                          }
                                                                          right {
                                                                            binop {
                                                                              op: SHR
                                                                              left {
                                                                              }
                                                                              right {
                                                                                binop {
                                                                                  op: SHR
                                                                                  left {
                                                                                  }
                                                                                  right {
                                                                                    binop {
                                                                                      op: SHR
                                                                                      left {
                                                                                      }
                                                                                      right {
                                                                                        binop {
                                                                                          op: SHR
                                                                                          left {
                                                                                          }
                                                                                          right {
                                                                                            binop {
                                                                                              op: SHR
                                                                                              left {
                                                                                              }
                                                                                              right {
                                                                                                binop {
                                                                                                  op: SHR
                                                                                                  left {
                                                                                                  }
                                                                                                  right {
                                                                                                    binop {
                                                                                                      op: SHL
                                                                                                      left {
                                                                                                        cons {
                                                                                                          intval: 136
                                                                                                        }
                                                                                                      }
                                                                                                      right {
                                                                                                        nop {
                                                                                                          op: RETURNDATASIZE
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      statements {
        switchstmt {
          switch_expr {
            nop {
              op: PC
            }
          }
          case_stmt {
            case_lit {
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: "z"
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: "or"
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: "2"
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              intval: 0
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              intval: 10752
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              intval: 134217775
            }
            case_block {
            }
          }
          default_block {
            statements {
              terminatestmt {
                stop_invalid {
                  stmt: STOP
                }
              }
            }
          }
        }
      }
      statements {
        breakstmt {
        }
      }
      statements {
        storage_func {
          loc {
            varref {
              varnum: 2818048
            }
          }
          val {
          }
          st: MSTORE
        }
      }
      statements {
        functioncall {
          call_multidecl {
            func_index: 0
            in_param1 {
            }
            in_param2 {
            }
            in_param3 {
            }
            in_param4 {
            }
          }
        }
      }
      statements {
        storage_func {
          loc {
            varref {
              varnum: 2818048
            }
          }
          val {
          }
          st: MSTORE
        }
      }
      statements {
        switchstmt {
          switch_expr {
            nop {
              op: PC
            }
          }
          case_stmt {
            case_lit {
              strval: "z"
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: "or"
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              intval: 10752
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              intval: 0
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              intval: 10752
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: "or"
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              intval: 10752
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              intval: 134217775
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              intval: 0
            }
            case_block {
            }
          }
          default_block {
            statements {
              terminatestmt {
                stop_invalid {
                  stmt: STOP
                }
              }
            }
            statements {
              terminatestmt {
                stop_invalid {
                  stmt: STOP
                }
              }
            }
          }
        }
      }
      statements {
        switchstmt {
          switch_expr {
            nop {
              op: PC
            }
          }
          case_stmt {
            case_lit {
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: "z"
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: "or"
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: "2"
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              intval: 0
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              intval: 10752
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
            }
            case_block {
            }
          }
          default_block {
            statements {
              terminatestmt {
                stop_invalid {
                  stmt: STOP
                }
              }
            }
          }
        }
      }
      statements {
        switchstmt {
          switch_expr {
            nop {
              op: PC
            }
          }
          case_stmt {
            case_lit {
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: "z"
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: "or"
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: "2"
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              intval: 0
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              intval: 10752
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              intval: 134217775
            }
            case_block {
            }
          }
          default_block {
            statements {
              terminatestmt {
                stop_invalid {
                  stmt: STOP
                }
              }
            }
          }
        }
      }
    }
  }
  fd_one {
    num_input_params: 0
    statements {
    }
  }
  fd_multi {
    num_input_params: 0
    num_output_params: 6
    statements {
    }
  }
}
