funcs {
  fd_zero {
    num_input_params: 0
    statements {
      var {
      }
      statements {
        extcode_copy {
          addr {
            cons {
              strval: "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
            }
          }
          target {
          }
          source {
          }
          size {
            top {
              op: MULM
              arg1 {
                cons {
                  hexval: "66666666666666666666666666666666666"
                }
              }
              arg2 {
                cons {
                  hexval: "666666666666666666"
                }
              }
              arg3 {
                nop {
                  op: PC
                }
              }
            }
          }
        }
      }
      statements {
        functioncall {
          call_zero {
            func_index: 0
            in_param1 {
            }
            in_param2 {
            }
            in_param3 {
            }
            in_param4 {
            }
          }
        }
      }
    }
  }
  fd_one {
    num_input_params: 0
    statements {
      statements {
        functioncall {
          call_zero {
            func_index: 8
            in_param1 {
            }
            in_param2 {
            }
            in_param3 {
            }
            in_param4 {
              nop {
                op: CODESIZE
              }
            }
          }
        }
      }
      statements {
        ifstmt {
          cond {
            binop {
              op: KECCAK
              left {
                cons {
                  intval: 0
                }
              }
              right {
                binop {
                  op: SHR
                  left {
                    cons {
                      intval: 0
                    }
                  }
                  right {
                    nop {
                      op: MSIZE
                    }
                  }
                }
              }
            }
          }
          if_body {
          }
        }
      }
      statements {
        storage_func {
          loc {
            binop {
              op: SDIV
              left {
              }
              right {
              }
            }
          }
          val {
          }
          st: MSTORE
        }
      }
    }
  }
  fd_multi {
    num_input_params: 0
    num_output_params: 4
    statements {
      statements {
        functioncall {
          call_zero {
            func_index: 8
            in_param1 {
            }
            in_param2 {
            }
            in_param3 {
            }
            in_param4 {
              nop {
                op: CODESIZE
              }
            }
          }
        }
      }
      statements {
        ifstmt {
          cond {
            binop {
              op: KECCAK
              left {
                cons {
                  intval: 0
                }
              }
              right {
                binop {
                  op: SHR
                  left {
                    cons {
                      intval: 0
                    }
                  }
                  right {
                    nop {
                      op: MSIZE
                    }
                  }
                }
              }
            }
          }
          if_body {
          }
        }
      }
      statements {
        storage_func {
          loc {
            binop {
              op: SDIV
              left {
              }
              right {
              }
            }
          }
          val {
            nop {
              op: GAS
            }
          }
          st: MSTORE
        }
      }
    }
  }
}
funcs {
  fd_zero {
    num_input_params: 0
    statements {
      var {
      }
      statements {
        extcode_copy {
          addr {
            cons {
              strval: "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
            }
          }
          target {
          }
          source {
          }
          size {
            top {
              op: MULM
              arg1 {
                cons {
                  hexval: "66666666666666666666666666666666666"
                }
              }
              arg2 {
                cons {
                  hexval: "666666666666666666"
                }
              }
              arg3 {
                nop {
                  op: PC
                }
              }
            }
          }
        }
      }
      statements {
        functioncall {
          call_zero {
            func_index: 0
            in_param1 {
            }
            in_param2 {
            }
            in_param3 {
            }
            in_param4 {
            }
          }
        }
      }
    }
  }
  fd_one {
    num_input_params: 0
    statements {
    }
  }
  fd_multi {
    num_input_params: 0
    num_output_params: 4
    statements {
      statements {
        functioncall {
          call_zero {
            func_index: 8
            in_param1 {
            }
            in_param2 {
            }
            in_param3 {
            }
            in_param4 {
              nop {
                op: CODESIZE
              }
            }
          }
        }
      }
      statements {
        ifstmt {
          cond {
            binop {
              op: KECCAK
              left {
                cons {
                  intval: 0
                }
              }
              right {
                binop {
                  op: SHR
                  left {
                    cons {
                      intval: 0
                    }
                  }
                  right {
                    nop {
                      op: MSIZE
                    }
                  }
                }
              }
            }
          }
          if_body {
          }
        }
      }
      statements {
        storage_func {
          loc {
            binop {
              op: SDIV
              left {
              }
              right {
              }
            }
          }
          val {
          }
          st: MSTORE
        }
      }
    }
  }
}
