funcs {
  fd_zero {
    num_input_params: 0
    statements {
      var {
      }
      statements {
        extcode_copy {
          addr {
          }
          target {
          }
          source {
            unop {
              op: NOT
              operand {
                cons {
                  strval: "\031\377\377\377\377\031\031\031\031\031\031\031\031\031\031\031\031\031\031\031\031\031"
                }
              }
            }
          }
          size {
            top {
              op: MULM
              arg1 {
                cons {
                  hexval: "66666666666666666666666666666666666"
                }
              }
              arg2 {
                cons {
                  hexval: "66666666666666666666666666666666666"
                }
              }
              arg3 {
                top {
                  op: MULM
                  arg1 {
                    cons {
                      hexval: "66666666666666666666666666666666666"
                    }
                  }
                  arg2 {
                    cons {
                      hexval: "5"
                    }
                  }
                  arg3 {
                    nop {
                      op: PC
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  fd_one {
    num_input_params: 4
    statements {
    }
  }
  fd_multi {
    num_input_params: 8
    num_output_params: 0
    statements {
    }
  }
}
funcs {
  fd_zero {
    num_input_params: 6
    statements {
      var {
      }
      statements {
      }
    }
  }
  fd_one {
    num_input_params: 0
    statements {
    }
  }
  fd_multi {
    num_input_params: 145
    num_output_params: 26112
    statements {
      statements {
      }
      statements {
        forstmt {
          for_body {
          }
          for_init {
          }
          for_post {
          }
          for_cond {
            cons {
              hexval: ""
            }
          }
        }
      }
    }
  }
}
