funcs {
  fd_zero {
    num_input_params: 3
    statements {
      var {
      }
      statements {
        boundedforstmt {
          for_body {
            statements {
              boundedforstmt {
                for_body {
                  statements {
                    log_func {
                      pos {
                      }
                      size {
                      }
                      num_topics: TWO
                      t1 {
                      }
                      t2 {
                      }
                      t3 {
                      }
                      t4 {
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  fd_one {
    num_input_params: 0
    statements {
    }
  }
  fd_multi {
    num_input_params: 6
    num_output_params: 8
    statements {
      statements {
        functioncall {
          call_zero {
            func_index: 0
            in_param1 {
            }
            in_param2 {
            }
            in_param3 {
            }
            in_param4 {
              top {
                op: MULM
                arg1 {
                }
                arg2 {
                }
                arg3 {
                }
              }
            }
          }
        }
      }
      statements {
        functioncall {
          call_multiassign {
            func_index: 0
            in_param1 {
            }
            in_param2 {
            }
            in_param3 {
            }
            in_param4 {
            }
            out_param1 {
              varnum: 2
            }
            out_param2 {
              varnum: 8388608
            }
            out_param3 {
              varnum: 115
            }
            out_param4 {
              varnum: 2
            }
          }
        }
      }
      statements {
        switchstmt {
          switch_expr {
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
        }
      }
    }
  }
}
funcs {
  fd_zero {
    num_input_params: 3
    statements {
      var {
      }
    }
  }
  fd_one {
    num_input_params: 0
    statements {
      statements {
      }
    }
  }
  fd_multi {
    num_input_params: 0
    num_output_params: 0
    statements {
      statements {
        functioncall {
          call_multiassign {
            func_index: 0
            in_param1 {
            }
            in_param2 {
            }
            in_param3 {
            }
            in_param4 {
            }
            out_param1 {
              varnum: 2
            }
            out_param2 {
              varnum: 8388608
            }
            out_param3 {
              varnum: 115
            }
            out_param4 {
              varnum: 2
            }
          }
        }
      }
      statements {
      }
      statements {
        storage_func {
          loc {
          }
          val {
            varref {
              varnum: 23
            }
          }
          st: MSTORE
        }
      }
      statements {
        switchstmt {
          switch_expr {
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              intval: 0
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
        }
      }
      statements {
        switchstmt {
          switch_expr {
          }
          case_stmt {
            case_lit {
              hexval: "\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302"
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
        }
      }
      statements {
        boundedforstmt {
          for_body {
            statements {
            }
          }
        }
      }
    }
  }
}
funcs {
  fd_zero {
    num_input_params: 0
    statements {
      var {
      }
      statements {
        terminatestmt {
          stop_invalid {
            stmt: STOP
          }
        }
      }
    }
  }
  fd_one {
    num_input_params: 0
    statements {
    }
  }
  fd_multi {
    num_input_params: 6
    num_output_params: 4
    statements {
      statements {
        switchstmt {
          switch_expr {
          }
          case_stmt {
            case_lit {
              hexval: "\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302"
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              intval: 0
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
        }
      }
      statements {
        switchstmt {
          switch_expr {
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
        }
      }
      statements {
        functioncall {
          call_multiassign {
            func_index: 0
            in_param1 {
            }
            in_param2 {
            }
            in_param3 {
            }
            in_param4 {
            }
            out_param1 {
              varnum: 2
            }
            out_param2 {
              varnum: 8388608
            }
            out_param3 {
              varnum: 115
            }
            out_param4 {
              varnum: 2
            }
          }
        }
      }
      statements {
        switchstmt {
          switch_expr {
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
        }
      }
      statements {
        boundedforstmt {
          for_body {
            statements {
              boundedforstmt {
                for_body {
                  statements {
                    boundedforstmt {
                      for_body {
                        statements {
                          boundedforstmt {
                            for_body {
                              statements {
                                boundedforstmt {
                                  for_body {
                                    statements {
                                      boundedforstmt {
                                        for_body {
                                          statements {
                                            functioncall {
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
funcs {
  fd_zero {
    num_input_params: 0
    statements {
      var {
      }
      statements {
        functioncall {
          call_multidecl {
            func_index: 1
            in_param1 {
            }
            in_param2 {
            }
            in_param3 {
            }
            in_param4 {
            }
          }
        }
      }
    }
  }
  fd_one {
    num_input_params: 0
    statements {
    }
  }
  fd_multi {
    num_input_params: 0
    num_output_params: 4
    statements {
      statements {
        functioncall {
          call_multiassign {
            func_index: 0
            in_param1 {
            }
            in_param2 {
            }
            in_param3 {
            }
            in_param4 {
            }
            out_param1 {
              varnum: 2
            }
            out_param2 {
              varnum: 8388608
            }
            out_param3 {
              varnum: 115
            }
            out_param4 {
              varnum: 2
            }
          }
        }
      }
      statements {
        boundedforstmt {
          for_body {
            statements {
              boundedforstmt {
                for_body {
                  statements {
                    boundedforstmt {
                      for_body {
                        statements {
                          boundedforstmt {
                            for_body {
                              statements {
                                boundedforstmt {
                                  for_body {
                                    statements {
                                      boundedforstmt {
                                        for_body {
                                          statements {
                                            functioncall {
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      statements {
        functioncall {
          call_zero {
            func_index: 0
            in_param1 {
            }
            in_param2 {
            }
            in_param3 {
            }
            in_param4 {
            }
          }
        }
      }
      statements {
        switchstmt {
          switch_expr {
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              hexval: "\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302"
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
        }
      }
    }
  }
}
funcs {
  fd_zero {
    num_input_params: 0
    statements {
      var {
      }
      statements {
        terminatestmt {
          stop_invalid {
            stmt: STOP
          }
        }
      }
    }
  }
  fd_one {
    num_input_params: 0
    statements {
    }
  }
  fd_multi {
    num_input_params: 0
    num_output_params: 4
    statements {
      statements {
      }
      statements {
        switchstmt {
          switch_expr {
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              hexval: "\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302"
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
        }
      }
      statements {
        boundedforstmt {
          for_body {
            statements {
              boundedforstmt {
                for_body {
                  statements {
                    boundedforstmt {
                      for_body {
                        statements {
                          boundedforstmt {
                            for_body {
                              statements {
                                boundedforstmt {
                                  for_body {
                                    statements {
                                      boundedforstmt {
                                        for_body {
                                          statements {
                                            functioncall {
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
funcs {
  fd_zero {
    num_input_params: 0
    statements {
      var {
      }
    }
  }
  fd_one {
    num_input_params: 4
    statements {
    }
  }
  fd_multi {
    num_input_params: 0
    num_output_params: 4
    statements {
      statements {
        switchstmt {
          switch_expr {
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
        }
      }
      statements {
        functioncall {
          call_multiassign {
            func_index: 0
            in_param1 {
            }
            in_param2 {
            }
            in_param3 {
            }
            in_param4 {
            }
            out_param1 {
              varnum: 2
            }
            out_param2 {
              varnum: 8388608
            }
            out_param3 {
              varnum: 115
            }
            out_param4 {
              varnum: 2
            }
          }
        }
      }
      statements {
        switchstmt {
          switch_expr {
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
        }
      }
      statements {
        functioncall {
          call_zero {
            func_index: 0
            in_param1 {
            }
            in_param2 {
            }
            in_param3 {
            }
            in_param4 {
              top {
                op: MULM
                arg1 {
                }
                arg2 {
                }
                arg3 {
                }
              }
            }
          }
        }
      }
      statements {
        boundedforstmt {
          for_body {
            statements {
              boundedforstmt {
                for_body {
                  statements {
                    boundedforstmt {
                      for_body {
                        statements {
                          boundedforstmt {
                            for_body {
                              statements {
                                boundedforstmt {
                                  for_body {
                                    statements {
                                      boundedforstmt {
                                        for_body {
                                          statements {
                                            functioncall {
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      statements {
        switchstmt {
          switch_expr {
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              hexval: "\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302"
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
        }
      }
    }
  }
}
funcs {
  fd_zero {
    num_input_params: 8
    statements {
      var {
      }
    }
  }
  fd_one {
    num_input_params: 8
    statements {
    }
  }
  fd_multi {
    num_input_params: 6
    num_output_params: 8
    statements {
      statements {
        boundedforstmt {
          for_body {
            statements {
            }
          }
        }
      }
      statements {
      }
      statements {
        switchstmt {
          switch_expr {
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
        }
      }
    }
  }
}
funcs {
  fd_zero {
    num_input_params: 0
    statements {
      var {
      }
    }
  }
  fd_one {
    num_input_params: 4
    statements {
    }
  }
  fd_multi {
    num_input_params: 4
    num_output_params: 0
    statements {
      statements {
        functioncall {
          call_zero {
            func_index: 0
            in_param1 {
            }
            in_param2 {
            }
            in_param3 {
            }
            in_param4 {
            }
          }
        }
      }
    }
  }
}
funcs {
  fd_zero {
    num_input_params: 0
    statements {
      var {
      }
    }
  }
  fd_one {
    num_input_params: 0
    statements {
    }
  }
  fd_multi {
    num_input_params: 0
    num_output_params: 0
    statements {
    }
  }
}
funcs {
  fd_zero {
    num_input_params: 3
    statements {
      var {
      }
      statements {
        boundedforstmt {
          for_body {
          }
        }
      }
    }
  }
  fd_one {
    num_input_params: 0
    statements {
    }
  }
  fd_multi {
    num_input_params: 0
    num_output_params: 0
    statements {
    }
  }
}
funcs {
  fd_zero {
    num_input_params: 6
    statements {
      var {
      }
    }
  }
  fd_one {
    num_input_params: 8
    statements {
    }
  }
  fd_multi {
    num_input_params: 6
    num_output_params: 8
    statements {
      statements {
        storage_func {
          loc {
          }
          val {
            varref {
              varnum: 23
            }
          }
          st: MSTORE
        }
      }
      statements {
        storage_func {
          loc {
          }
          val {
            varref {
              varnum: 23
            }
          }
          st: MSTORE
        }
      }
      statements {
        switchstmt {
          switch_expr {
          }
          case_stmt {
            case_lit {
              hexval: "\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302"
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
        }
      }
      statements {
        switchstmt {
          switch_expr {
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
        }
      }
      statements {
        switchstmt {
          switch_expr {
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
        }
      }
      statements {
        switchstmt {
          switch_expr {
          }
          case_stmt {
            case_lit {
              hexval: "\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302"
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
        }
      }
    }
  }
}
funcs {
  fd_zero {
    num_input_params: 3
    statements {
      var {
      }
    }
  }
  fd_one {
    num_input_params: 4
    statements {
    }
  }
  fd_multi {
    num_input_params: 0
    num_output_params: 0
    statements {
      statements {
        switchstmt {
          switch_expr {
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
        }
      }
      statements {
        switchstmt {
          switch_expr {
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
              statements {
                storage_func {
                  loc {
                  }
                  val {
                    varref {
                      varnum: 23
                    }
                  }
                  st: MSTORE
                }
              }
              statements {
                switchstmt {
                  switch_expr {
                  }
                  case_stmt {
                    case_lit {
                      strval: ""
                    }
                    case_block {
                    }
                  }
                  case_stmt {
                    case_lit {
                      strval: ""
                    }
                    case_block {
                    }
                  }
                  case_stmt {
                    case_lit {
                    }
                    case_block {
                    }
                  }
                  case_stmt {
                    case_lit {
                      strval: ""
                    }
                    case_block {
                    }
                  }
                }
              }
              statements {
                functioncall {
                  call_zero {
                    func_index: 0
                    in_param1 {
                    }
                    in_param2 {
                    }
                    in_param3 {
                    }
                    in_param4 {
                      top {
                        op: MULM
                        arg1 {
                        }
                        arg2 {
                        }
                        arg3 {
                        }
                      }
                    }
                  }
                }
              }
              statements {
                switchstmt {
                  switch_expr {
                  }
                  case_stmt {
                    case_lit {
                      hexval: "\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302\302"
                    }
                    case_block {
                    }
                  }
                  case_stmt {
                    case_lit {
                      strval: ""
                    }
                    case_block {
                    }
                  }
                  case_stmt {
                    case_lit {
                      strval: ""
                    }
                    case_block {
                    }
                  }
                  case_stmt {
                    case_lit {
                      strval: ""
                    }
                    case_block {
                    }
                  }
                  case_stmt {
                    case_lit {
                      strval: ""
                    }
                    case_block {
                    }
                  }
                  case_stmt {
                    case_lit {
                      strval: ""
                    }
                    case_block {
                    }
                  }
                  case_stmt {
                    case_lit {
                      strval: ""
                    }
                    case_block {
                    }
                  }
                  case_stmt {
                    case_lit {
                      strval: ""
                    }
                    case_block {
                    }
                  }
                  case_stmt {
                    case_lit {
                      strval: ""
                    }
                    case_block {
                    }
                  }
                }
              }
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
        }
      }
      statements {
        functioncall {
          call_zero {
            func_index: 0
            in_param1 {
            }
            in_param2 {
            }
            in_param3 {
            }
            in_param4 {
              top {
                op: MULM
                arg1 {
                }
                arg2 {
                }
                arg3 {
                }
              }
            }
          }
        }
      }
      statements {
        switchstmt {
          switch_expr {
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
          case_stmt {
            case_lit {
              strval: ""
            }
            case_block {
            }
          }
        }
      }
    }
  }
}
