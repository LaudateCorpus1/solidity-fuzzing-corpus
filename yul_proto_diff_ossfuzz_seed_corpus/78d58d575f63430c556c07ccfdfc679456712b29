funcs {
  fd_zero {
    num_input_params: 1
    statements {
      var {
      }
      statements {
        ifstmt {
          cond {
            func_expr {
              func_index: 0
              in_param1 {
              }
              in_param2 {
                func_expr {
                  func_index: 0
                  in_param1 {
                  }
                  in_param2 {
                    func_expr {
                      func_index: 0
                      in_param1 {
                      }
                      in_param2 {
                      }
                      in_param3 {
                      }
                      in_param4 {
                        func_expr {
                          func_index: 0
                          in_param1 {
                          }
                          in_param2 {
                          }
                          in_param3 {
                          }
                          in_param4 {
                          }
                        }
                      }
                    }
                  }
                  in_param3 {
                    varref {
                      varnum: 2070311936
                    }
                  }
                  in_param4 {
                    func_expr {
                      func_index: 0
                      in_param1 {
                      }
                      in_param2 {
                      }
                      in_param3 {
                      }
                      in_param4 {
                      }
                    }
                  }
                }
              }
              in_param3 {
                varref {
                  varnum: 2070311936
                }
              }
              in_param4 {
                func_expr {
                  func_index: 0
                  in_param1 {
                  }
                  in_param2 {
                    func_expr {
                      func_index: 0
                      in_param1 {
                      }
                      in_param2 {
                        func_expr {
                          func_index: 0
                          in_param1 {
                          }
                          in_param2 {
                          }
                          in_param3 {
                            unop {
                              op: NOT
                              operand {
                              }
                            }
                          }
                          in_param4 {
                          }
                        }
                      }
                      in_param3 {
                      }
                      in_param4 {
                        top {
                          op: ADDM
                          arg1 {
                          }
                          arg2 {
                            binop {
                              op: ADD
                              left {
                              }
                              right {
                                cons {
                                  strval: "\321\321\321\321\321\321\321\321\321\321"
                                }
                              }
                            }
                          }
                          arg3 {
                          }
                        }
                      }
                    }
                  }
                  in_param3 {
                  }
                  in_param4 {
                  }
                }
              }
            }
          }
          if_body {
            statements {
              functioncall {
                call_zero {
                  func_index: 0
                  in_param1 {
                  }
                  in_param2 {
                  }
                  in_param3 {
                  }
                  in_param4 {
                    cons {
                      strval: "\005"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  fd_one {
    num_input_params: 4294967294
    statements {
      statements {
        functioncall {
          call_multiassign {
            func_index: 0
            in_param1 {
            }
            in_param2 {
              cons {
                strval: "\217"
              }
            }
            in_param3 {
            }
            in_param4 {
            }
            out_param1 {
              varnum: 0
            }
            out_param2 {
              varnum: 0
            }
            out_param3 {
              varnum: 0
            }
            out_param4 {
              varnum: 0
            }
          }
        }
      }
      statements {
        functioncall {
          call_multidecl {
            func_index: 0
            in_param1 {
            }
            in_param2 {
            }
            in_param3 {
            }
            in_param4 {
            }
          }
        }
      }
      statements {
        functioncall {
          call_multidecl {
            func_index: 1
            in_param1 {
            }
            in_param2 {
            }
            in_param3 {
            }
            in_param4 {
            }
          }
        }
      }
      statements {
        functioncall {
          call_multidecl {
            func_index: 0
            in_param1 {
            }
            in_param2 {
            }
            in_param3 {
            }
            in_param4 {
            }
          }
        }
      }
      statements {
        functioncall {
          call_multidecl {
            func_index: 0
            in_param1 {
            }
            in_param2 {
            }
            in_param3 {
            }
            in_param4 {
            }
          }
        }
      }
    }
  }
  fd_multi {
    num_input_params: 0
    num_output_params: 4
    statements {
      statements {
        boundedforstmt {
          for_body {
          }
        }
      }
      statements {
        terminatestmt {
          stop_invalid {
            stmt: STOP
          }
        }
      }
      statements {
        boundedforstmt {
          for_body {
          }
        }
      }
    }
  }
}
