funcs {
  fd_zero {
    num_input_params: 2
    statements {
      var {
      }
      statements {
        boundedforstmt {
          for_body {
          }
        }
      }
    }
  }
  fd_one {
    num_input_params: 0
    statements {
    }
  }
  fd_multi {
    num_input_params: 0
    num_output_params: 6
    statements {
      statements {
        functioncall {
          call_zero {
            func_index: 0
            in_param1 {
            }
            in_param2 {
            }
            in_param3 {
            }
            in_param4 {
            }
          }
        }
      }
    }
  }
}
funcs {
  fd_zero {
    num_input_params: 4
    statements {
      var {
      }
    }
  }
  fd_one {
    num_input_params: 4
    statements {
    }
  }
  fd_multi {
    num_input_params: 4
    num_output_params: 8
    statements {
      statements {
        assignment {
          ref_id {
            varnum: 5
          }
          expr {
          }
        }
      }
      statements {
        boundedforstmt {
          for_body {
            statements {
              assignment {
                ref_id {
                  varnum: 5
                }
                expr {
                }
              }
            }
          }
        }
      }
      statements {
        boundedforstmt {
          for_body {
            statements {
              assignment {
                ref_id {
                  varnum: 5
                }
                expr {
                }
              }
            }
            statements {
              ifstmt {
                cond {
                  unop {
                    op: MLOAD
                    operand {
                    }
                  }
                }
                if_body {
                  statements {
                    breakstmt {
                    }
                  }
                }
              }
            }
            statements {
              assignment {
                ref_id {
                  varnum: 5
                }
                expr {
                }
              }
            }
          }
        }
      }
    }
  }
}
