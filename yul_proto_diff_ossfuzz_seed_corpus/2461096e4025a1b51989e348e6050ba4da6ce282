funcs {
  fd_zero {
    num_input_params: 0
    statements {
      var {
      }
    }
  }
  fd_one {
    num_input_params: 0
    statements {
    }
  }
  fd_multi {
    num_input_params: 0
    num_output_params: 4
    statements {
      statements {
        ifstmt {
          cond {
            nop {
              op: PC
            }
          }
          if_body {
            statements {
              assignment {
                ref_id {
                  varnum: 3
                }
                expr {
                }
              }
            }
          }
        }
      }
      statements {
        terminatestmt {
          stop_invalid {
            stmt: STOP
          }
        }
      }
    }
  }
}
funcs {
  fd_zero {
    num_input_params: 0
    statements {
      var {
      }
    }
  }
  fd_one {
    num_input_params: 0
    statements {
    }
  }
  fd_multi {
    num_input_params: 0
    num_output_params: 4
    statements {
      statements {
        ifstmt {
          cond {
            nop {
              op: PC
            }
          }
          if_body {
            statements {
              assignment {
                ref_id {
                  varnum: 0
                }
                expr {
                }
              }
            }
          }
        }
      }
      statements {
        terminatestmt {
          stop_invalid {
            stmt: STOP
          }
        }
      }
    }
  }
}
funcs {
  fd_zero {
    num_input_params: 0
    statements {
      var {
      }
    }
  }
  fd_one {
    num_input_params: 0
    statements {
    }
  }
  fd_multi {
    num_input_params: 0
    num_output_params: 4
    statements {
      statements {
        ifstmt {
          cond {
            nop {
              op: PC
            }
          }
          if_body {
            statements {
              assignment {
                ref_id {
                  varnum: 0
                }
                expr {
                }
              }
            }
          }
        }
      }
      statements {
        terminatestmt {
          stop_invalid {
            stmt: STOP
          }
        }
      }
    }
  }
}
