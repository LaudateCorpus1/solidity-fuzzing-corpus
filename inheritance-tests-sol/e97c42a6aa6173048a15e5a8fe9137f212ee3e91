
pragma solidity >=0.0;



contract C0 {

	function f0() public view
	
	returns (uint)
	{
		return 193084;
	}
}



interface I2BB {

	function f0() external view returns (uint);
}
interface I2B is I2BB {

	function f1() external payable returns (uint);
}
interface I2 is I2B {

	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}





interface I3BBBB {

	function f0() external payable returns (uint);
}
interface I3BBB is I3BBBB {

}
interface I3BB is I3BBB {

	function f0() override
	external payable returns (uint);
}
interface I3B is I3BB {

	function f0() override
	external payable returns (uint);
}

interface I3BBBBB is I3BB {

}



interface I3BBBBBBBB {

}
interface I3BBBBBBB is I3BBBBBBBB {

}
interface I3BBBBBB is I3BBBBB, I3BBBBBBB {

}
interface I3 is I3B, I3BBBBB, I3BBBBBB {

	function f0() override(I3B, I3BB)
	external payable returns (uint);
	function f1() external view returns (uint);
	function f2() external payable returns (uint);
}




interface I4BBB {

	function f0() external view returns (uint);
}
interface I4BB is I4BBB {

	function f0() override
	external view returns (uint);
}
interface I4B is I4BB {

}
interface I4 is I4B {

}


contract C5B {

}
contract C5 is C5B {

	function f0() public view
	
	returns (uint)
	{
		return 1314249054;
	}
}





interface I6BBBB {

	function f0() external payable returns (uint);
}
interface I6BBB is I6BBBB {

}
interface I6BB is I6BBB {

	function f0() override
	external payable returns (uint);
}
interface I6B is I6BB {

}
interface I6 is I6B {

	function f1() external payable returns (uint);
	function f2() external payable returns (uint);
	function f3() external view returns (uint);
}

contract C7 {

	function f0() public view
	
	returns (uint)
	{
		return 1414286161;
	}
}


interface I8B {

	function f0() external payable returns (uint);
	function f1() external view returns (uint);
}




interface I8BBBBB {

	function f0() external payable returns (uint);
}
interface I8BBBB is I8BBBBB {

}
interface I8BBB is I8BBBB {

}
interface I8BB is I8B, I8BBB {

	function f0() override(I8B, I8BBBBB)
	external payable returns (uint);
	function f1() override
	external view returns (uint);
}
interface I8 is I8B, I8BB {

	function f0() override(I8B, I8BB)
	external payable returns (uint);
	function f1() override(I8B, I8BB)
	external view returns (uint);
}


interface I9B {

	function f0() external payable returns (uint);
	function f1() external view returns (uint);
}




interface I9BBBBB {

	function f0() external payable returns (uint);
}
interface I9BBBB is I9BBBBB {

	function f0() override
	external payable returns (uint);
}
interface I9BBB is I9BBBB {

	function f0() override
	external payable returns (uint);
}
interface I9BB is I9B, I9BBB {

	function f0() override(I9B, I9BBB)
	external payable returns (uint);
	function f1() override
	external view returns (uint);
}
interface I9 is I9B, I9BB {

	function f0() override(I9B, I9BB)
	external payable returns (uint);
	function f1() override(I9B, I9BB)
	external view returns (uint);
}


contract C {
	function test() public returns (uint)
	{
			C0 tc0 = new C0();
			if (tc0.f0() != 193084)
				return 1;
			C5 tc1 = new C5();
			if (tc1.f0() != 1314249054)
				return 2;
			C7 tc2 = new C7();
			if (tc2.f0() != 1414286161)
				return 3;
			return 0;
	}
}

