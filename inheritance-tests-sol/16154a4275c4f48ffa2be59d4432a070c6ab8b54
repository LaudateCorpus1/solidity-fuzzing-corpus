pragma solidity >=0.0;
interface I0BBB {
	function f0() external payable returns (uint);
}
interface I0BB is I0BBB {
	function f1() external payable returns (uint);
}
interface I0B is I0BB {
	function f0() override
	external payable returns (uint);
	function f2() external view returns (uint);
}
interface I0BBBBB {
	function f0() external payable returns (uint);
}
interface I0BBBBBB is I0BBBBB {
	function f1() external payable returns (uint);
}
interface I0BBBB is I0BB, I0BBBBB, I0BBBBBB {
	function f0() override(I0BBB, I0BBBBB)
	external payable returns (uint);
	function f1() override(I0BB, I0BBBBBB)
	external payable returns (uint);
}
interface I0 is I0B, I0BBBB {
	function f0() override(I0B, I0BBBB)
	external payable returns (uint);
	function f1() override(I0BB, I0BBBB)
	external payable returns (uint);
	function f2() override
	external view returns (uint);
}
library L1 {
	function f0(uint) internal pure returns (uint)
	{
		return 1681692777;
	}
}
library L2 {
	function f0(uint) internal view returns (uint)
	{
		return 1714636915;
	}
}
library L3 {
	function f0(uint) internal pure returns (uint)
	{
		return 1957747793;
	}
	function f1(uint) internal view returns (uint)
	{
		return 424238335;
	}
}
interface C4BBB {
	function f0() external payable returns (uint);
}
interface C4BB is C4BBB {
	function f0() override
	external payable returns (uint);
}
contract C4B is C4BB {
	function f0() external payable
	override
	returns (uint)
	{
		return 1113236487;
	}
}
contract C4 is C4B {
}
contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}
