pragma solidity >=0.0;
interface C0B {
	function f0() external view returns (uint);
	function f1() external view returns (uint);
}
contract C0 is C0B {
	function f0() external view
	override
	returns (uint)
	{
		return 182605794;
	}
	function f1() virtual external view
	override
	returns (uint)
	{
		return 1914720637;
	}
}
interface C1BBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface C1BBBBBBBBBBBB is C1BBBBBBBBBBB {
	function f1() external pure returns (uint);
}
interface C1BBBBBBBBBB is C1BBBBBBBBBBB, C1BBBBBBBBBBBB {
	function f2() external view returns (uint);
	function f3() external view returns (uint);
}
interface C1BBBBBBBBB is C1BBBBBBBBBB {
}
interface C1BBBBBBBB is C1BBBBBBBBB {
	function f3() override
	external view returns (uint);
}
interface C1BBBBBBB is C1BBBBBBBB {
	function f1() override
	external pure returns (uint);
	function f3() override
	external view returns (uint);
}
interface C1BBBBBB is C1BBBBBBB {
	function f1() override
	external pure returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
}
interface C1BBBBBBBBBBBBB is C1BBBBBB {
	function f2() override
	external view returns (uint);
	function f4() external view returns (uint);
}
interface C1BBBBB is C1BBBBBB, C1BBBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f2() override(C1BBBBBB, C1BBBBBBBBBBBBB)
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f5() external pure returns (uint);
	function f6() external pure returns (uint);
	function f7() external payable returns (uint);
	function f8() external payable returns (uint);
}
interface C1BBBB is C1BBBBB {
	function f1() override
	external pure returns (uint);
	function f2() override
	external view returns (uint);
	function f5() override
	external pure returns (uint);
	function f8() override
	external payable returns (uint);
}
interface C1BBB is C1BBBB {
	function f0() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f5() override
	external pure returns (uint);
	function f7() override
	external payable returns (uint);
	function f9() external payable returns (uint);
}
interface C1BB is C1BBB {
	function f1() override
	external pure returns (uint);
	function f5() override
	external pure returns (uint);
	function f7() override
	external payable returns (uint);
}
interface C1BBBBBBBBBBBBBB is C1BBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external pure returns (uint);
	function f2() override
	external view returns (uint);
	function f5() override
	external pure returns (uint);
	function f7() override
	external payable returns (uint);
	function f9() override
	external payable returns (uint);
	function f10() external payable returns (uint);
}
interface C1B is C1BB, C1BBBBBBBBBBBBBB {
	function f0() override(C1BBB, C1BBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(C1BB, C1BBBBBBBBBBBBBB)
	external pure returns (uint);
	function f2() override(C1BBB, C1BBBBBBBBBBBBBB)
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f5() override(C1BB, C1BBBBBBBBBBBBBB)
	external pure returns (uint);
	function f6() override
	external pure returns (uint);
	function f7() override(C1BB, C1BBBBBBBBBBBBBB)
	external payable returns (uint);
	function f8() override
	external payable returns (uint);
	function f9() override(C1BBB, C1BBBBBBBBBBBBBB)
	external payable returns (uint);
	function f10() override
	external payable returns (uint);
	function f11() external view returns (uint);
}
interface C1BBBBBBBBBBBBBBB is C1BBBBBBBBBBBBBB {
	function f1() override
	external pure returns (uint);
	function f2() override
	external view returns (uint);
	function f4() override
	external view returns (uint);
	function f5() override
	external pure returns (uint);
	function f6() override
	external pure returns (uint);
	function f7() override
	external payable returns (uint);
	function f10() override
	external payable returns (uint);
	function f11() external view returns (uint);
}
contract C1 is C1B, C1BBBBBBBBBBBBBBB {
	function f0() external view
	override(C1BBBBBBBBBBBBBB, C1B)
	returns (uint)
	{
		return 268625699;
	}
	function f1() external pure
	override(C1BBBBBBBBBBBBBBB, C1B)
	returns (uint)
	{
		return 190807059;
	}
	function f2() external view
	override(C1BBBBBBBBBBBBBBB, C1B)
	returns (uint)
	{
		return 1161007069;
	}
	function f3() virtual external view
	override(C1BBBBB, C1B)
	returns (uint)
	{
		return 1181057508;
	}
	function f4() external view
	override(C1BBBBBBBBBBBBBBB, C1BBBBBBBBBBBBB)
	returns (uint)
	{
		return 1040552188;
	}
	function f5() external pure
	override(C1BBBBBBBBBBBBBBB, C1B)
	returns (uint)
	{
		return 15580725;
	}
	function f6() external pure
	override(C1BBBBBBBBBBBBBBB, C1B)
	returns (uint)
	{
		return 442770701;
	}
	function f7() external payable
	override(C1BBBBBBBBBBBBBBB, C1B)
	returns (uint)
	{
		return 246980175;
	}
	function f8() virtual external payable
	override(C1BBBB, C1B)
	returns (uint)
	{
		return 365367087;
	}
	function f9() external payable
	override(C1BBBBBBBBBBBBBB, C1B)
	returns (uint)
	{
		return 524054552;
	}
	function f10() external payable
	override(C1BBBBBBBBBBBBBBB, C1B)
	returns (uint)
	{
		return 88805914;
	}
	function f11() virtual external view
	override(C1BBBBBBBBBBBBBBB, C1B)
	returns (uint)
	{
		return 785648268;
	}
}
interface I2 {
	function f0() external view returns (uint);
}
interface C3BBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface C3BBBBBBBBBBBB is C3BBBBBBBBBBB {
	function f1() external view returns (uint);
}
interface C3BBBBBBBBBB is C3BBBBBBBBBBB, C3BBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f2() external view returns (uint);
	function f3() external view returns (uint);
}
interface C3BBBBBBBBB is C3BBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
}
interface C3BBBBBBBB is C3BBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
}
interface C3BBBBBBB is C3BBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
}
interface C3BBBBBB is C3BBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
}
interface C3BBBBBBBBBBBBB is C3BBBBBBB {
	function f1() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() external payable returns (uint);
}
interface C3BBBBB is C3BBBBBB, C3BBBBBBBBBBBBB {
	function f0() override(C3BBBBBB, C3BBBBBBB)
	external view returns (uint);
	function f1() override(C3BBBBBB, C3BBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override(C3BBBBBB, C3BBBBBBBBBBBBB)
	external view returns (uint);
	function f3() override(C3BBBBBB, C3BBBBBBBBBBBBB)
	external view returns (uint);
	function f5() external pure returns (uint);
	function f6() external pure returns (uint);
	function f7() external payable returns (uint);
	function f8() external payable returns (uint);
}
interface C3BBBB is C3BBBBB {
	function f0() override
	external view returns (uint);
	function f7() override
	external payable returns (uint);
	function f8() override
	external payable returns (uint);
}
interface C3BBB is C3BBBB {
	function f1() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f7() override
	external payable returns (uint);
	function f9() external payable returns (uint);
}
interface C3BB is C3BBB {
	function f8() override
	external payable returns (uint);
}
interface C3BBBBBBBBBBBBBB is C3BB {
	function f1() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override
	external pure returns (uint);
	function f10() external payable returns (uint);
}
interface C3B is C3BB, C3BBBBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override(C3BBB, C3BBBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override(C3BBBBB, C3BBBBBBBBBBBBBB)
	external view returns (uint);
	function f4() override(C3BBB, C3BBBBBBBBBBBBBB)
	external payable returns (uint);
	function f5() override(C3BBBBB, C3BBBBBBBBBBBBBB)
	external pure returns (uint);
	function f7() override
	external payable returns (uint);
	function f8() override
	external payable returns (uint);
	function f10() override
	external payable returns (uint);
	function f11() external view returns (uint);
}
interface C3BBBBBBBBBBBBBBB is C3B {
	function f0() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override
	external pure returns (uint);
	function f7() override
	external payable returns (uint);
	function f9() override
	external payable returns (uint);
	function f10() override
	external payable returns (uint);
	function f12() external view returns (uint);
}
contract C3 is C3B, C3BBBBBBBBBBBBBBB {
	function f0() external view
	override(C3BBBBBBBBBBBBBBB, C3B)
	returns (uint)
	{
		return 847330980;
	}
	function f1() external view
	override
	returns (uint)
	{
		return 1437405485;
	}
	function f2() virtual external view
	override
	returns (uint)
	{
		return 1721924214;
	}
	function f3() virtual external view
	override(C3BBBBBBBBBBBBBBB, C3B)
	returns (uint)
	{
		return 997617804;
	}
	function f4() virtual external payable
	override(C3BBBBBBBBBBBBBBB, C3B)
	returns (uint)
	{
		return 393565781;
	}
	function f5() external pure
	override(C3BBBBBBBBBBBBBBB, C3B)
	returns (uint)
	{
		return 552976400;
	}
	function f6() external pure
	override
	returns (uint)
	{
		return 334783765;
	}
	function f7() external payable
	override(C3BBBBBBBBBBBBBBB, C3B)
	returns (uint)
	{
		return 1311144361;
	}
	function f8() virtual external payable
	override
	returns (uint)
	{
		return 1012383909;
	}
	function f9() virtual external payable
	override(C3BBBBBBBBBBBBBBB, C3BBB)
	returns (uint)
	{
		return 421988682;
	}
	function f10() external payable
	override(C3BBBBBBBBBBBBBBB, C3B)
	returns (uint)
	{
		return 303423551;
	}
	function f11() external view
	override
	returns (uint)
	{
		return 549172245;
	}
	function f12() external view
	override
	returns (uint)
	{
		return 2134550910;
	}
}
library L4 {
	function f0(uint) private view returns (uint)
	{
		return 596516649;
	}
	function f1(uint) public view returns (uint)
	{
		return 1189641421;
	}
}
library L5 {
	function f0(uint) public view returns (uint)
	{
		return 1025202362;
	}
	function f1(uint) external pure returns (uint)
	{
		return 1350490027;
	}
}
contract C {
	using L4 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f1() != 1189641421)
			return 1;
		return 0;
	}
}
