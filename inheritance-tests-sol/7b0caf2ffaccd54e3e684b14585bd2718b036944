
pragma solidity >=0.0;


library L0 {

	function f0(uint) internal pure returns (uint)
	{
		return 1804289383;
	}
}
library L1 {

	function f0(uint) public pure returns (uint)
	{
		return 846930886;
	}
}









interface C2BBBBBBBB {

	function f0() external pure returns (uint);
}
interface C2BBBBBBB is C2BBBBBBBB {

	function f0() override
	external pure returns (uint);
	function f1() external payable returns (uint);
}
interface C2BBBBBB is C2BBBBBBB {

	function f2() external view returns (uint);
	function f3() external view returns (uint);
}
interface C2BBBBB is C2BBBBBB {

}

interface C2BBBBBBBBB is C2BBBBBB {

	function f4() external view returns (uint);
}
interface C2BBBB is C2BBBBB, C2BBBBBBBBB {

	function f1() override
	external payable returns (uint);
	function f4() override
	external view returns (uint);
}
contract C2BBB is C2BBBB {

	function f0() virtual external pure
	override
	returns (uint)
	{
		return 1402304087;
	}
	function f1() external payable
	override
	returns (uint)
	{
		return 2064876628;
	}
	function f2() virtual external view
	override
	returns (uint)
	{
		return 1842513780;
	}
	function f3() external view
	override
	returns (uint)
	{
		return 631416347;
	}
	function f4() external view
	override
	returns (uint)
	{
		return 890442452;
	}
}
contract C2BB is C2BBB {

	function f0() virtual external pure
	override
	returns (uint)
	{
		return 1696049367;
	}
	function f2() external view
	override
	returns (uint)
	{
		return 1272185027;
	}
}
contract C2B is C2BB {

	function f0() virtual external pure
	override
	returns (uint)
	{
		return 1287522347;
	}
}
contract C2 is C2B {

	function f0() external pure
	override
	returns (uint)
	{
		return 153892771;
	}
}




interface I3BBB {

	function f0() external payable returns (uint);
}
interface I3BB is I3BBB {

	function f0() override
	external payable returns (uint);
	function f1() external payable returns (uint);
}
interface I3B is I3BB {

	function f0() override
	external payable returns (uint);
	function f2() external view returns (uint);
}


interface I3BBBBB {

	function f0() external payable returns (uint);
}
interface I3BBBB is I3BB, I3BBBBB {

	function f0() override(I3BB, I3BBBBB)
	external payable returns (uint);
}
interface I3 is I3B, I3BBBB {

	function f0() override(I3B, I3BBBB)
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}




interface I5BBB {

	function f0() external payable returns (uint);
}
interface I5BB is I5BBB {

	function f1() external payable returns (uint);
}
interface I5B is I5BB {

	function f2() external view returns (uint);
}


interface I5BBBBB {

	function f0() external payable returns (uint);
}
interface I5BBBB is I5B, I5BBBBB {

	function f0() override(I5BBB, I5BBBBB)
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
}
interface I5 is I5B, I5BBBB {

	function f0() override(I5BBB, I5BBBB)
	external payable returns (uint);
	function f1() override(I5BB, I5BBBB)
	external payable returns (uint);
	function f2() override(I5B, I5BBBB)
	external view returns (uint);
}

interface I6 {

	function f0() external payable returns (uint);
}

contract C7 {

	function f0() virtual public pure
	
	returns (uint)
	{
		return 1447645967;
	}
}


contract C {
	using L1 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 846930886)
			return 1;
		return 0;
	}
}

