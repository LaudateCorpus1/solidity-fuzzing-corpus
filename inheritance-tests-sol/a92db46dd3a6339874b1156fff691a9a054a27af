pragma solidity >=0.0;
interface C0B {
	function f0() external view returns (uint);
}
contract C0 is C0B {
	function f0() external view
	override
	returns (uint)
	{
		return 91302897;
	}
}
interface I1BBBBBB {
	function f0() external view returns (uint);
}
interface I1BBBBB is I1BBBBBB {
	function f1() external view returns (uint);
	function f2() external payable returns (uint);
}
interface I1BBBBBBBB {
}
interface I1BBBBBBB is I1BBBBBB, I1BBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
}
interface I1BBBB is I1BBBBB, I1BBBBBBB {
	function f0() override(I1BBBBBB, I1BBBBBBB)
	external view returns (uint);
	function f1() override(I1BBBBB, I1BBBBBBB)
	external view returns (uint);
	function f2() override
	external payable returns (uint);
}
interface I1BBB is I1BBBB {
	function f3() external view returns (uint);
	function f4() external payable returns (uint);
}
interface I1BB is I1BBB {
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() external view returns (uint);
	function f6() external view returns (uint);
}
interface I1BBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I1BBBBBBBBB is I1BB, I1BBBBBBBBBB {
	function f0() override(I1BBBB, I1BBBBBBBBBB)
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override
	external view returns (uint);
	function f7() external view returns (uint);
}
interface I1B is I1BB, I1BBBBBBBBB {
	function f0() override(I1BBBB, I1BBBBBBBBB)
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f3() override(I1BBB, I1BBBBBBBBB)
	external view returns (uint);
	function f4() override(I1BB, I1BBBBBBBBB)
	external payable returns (uint);
	function f5() override(I1BB, I1BBBBBBBBB)
	external view returns (uint);
	function f6() override
	external view returns (uint);
}
interface I1 is I1B {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f6() override
	external view returns (uint);
	function f7() override
	external view returns (uint);
	function f8() external view returns (uint);
	function f9() external payable returns (uint);
}
interface I2BBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I2BBBBBBBBB is I2BBBBBBBBBB {
	function f1() external view returns (uint);
	function f2() external payable returns (uint);
}
interface I2BBBBBBBBBBBB {
}
interface I2BBBBBBBBBBB is I2BBBBBBBBBB, I2BBBBBBBBBBBB {
	function f1() external view returns (uint);
}
interface I2BBBBBBBB is I2BBBBBBBBB, I2BBBBBBBBBBB {
	function f1() override(I2BBBBBBBBB, I2BBBBBBBBBBB)
	external view returns (uint);
	function f2() override
	external payable returns (uint);
}
interface I2BBBBBBB is I2BBBBBBBB {
	function f2() override
	external payable returns (uint);
	function f3() external view returns (uint);
	function f4() external payable returns (uint);
}
interface I2BBBBBB is I2BBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f5() external view returns (uint);
	function f6() external view returns (uint);
}
interface I2BBBBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I2BBBBBBBBBBBBB is I2BBBBBBB, I2BBBBBBBBBBBBBB {
	function f0() override(I2BBBBBBBBBB, I2BBBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f5() external view returns (uint);
}
interface I2BBBBB is I2BBBBBB, I2BBBBBBBBBBBBB {
	function f0() override(I2BBBBBB, I2BBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I2BBBBBB, I2BBBBBBBB)
	external view returns (uint);
	function f2() override(I2BBBBBB, I2BBBBBBBBBBBBB)
	external payable returns (uint);
	function f3() override(I2BBBBBB, I2BBBBBBB)
	external view returns (uint);
	function f5() override(I2BBBBBB, I2BBBBBBBBBBBBB)
	external view returns (uint);
	function f6() override
	external view returns (uint);
}
interface I2BBBBBBBBBBBBBBB is I2BBBBBBBBBBBBB {
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f5() override
	external view returns (uint);
	function f6() external view returns (uint);
}
interface I2BBBB is I2BBBBB, I2BBBBBBBBBBBBBBB {
	function f0() override(I2BBBBB, I2BBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I2BBBBB, I2BBBBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override(I2BBBBB, I2BBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f3() override(I2BBBBB, I2BBBBBBB)
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override(I2BBBBB, I2BBBBBBBBBBBBBBB)
	external view returns (uint);
	function f6() override(I2BBBBB, I2BBBBBBBBBBBBBBB)
	external view returns (uint);
}
interface I2BBB is I2BBBB {
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f5() override
	external view returns (uint);
	function f7() external view returns (uint);
	function f8() external payable returns (uint);
}
interface I2BB is I2BBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override
	external view returns (uint);
	function f6() override
	external view returns (uint);
	function f9() external view returns (uint);
	function f10() external view returns (uint);
}
interface I2BBBBBBBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I2BBBBBBBBBBBBBBBB is I2BBB, I2BBBBBBBBBBBBBBBBB {
	function f0() override(I2BBBB, I2BBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f6() override
	external view returns (uint);
	function f9() external view returns (uint);
}
interface I2B is I2BB, I2BBBBBBBBBBBBBBBB {
	function f0() override(I2BB, I2BBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I2BB, I2BBBB)
	external view returns (uint);
	function f3() override(I2BBB, I2BBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f4() override(I2BB, I2BBBB)
	external payable returns (uint);
	function f5() override(I2BB, I2BBB)
	external view returns (uint);
	function f6() override(I2BB, I2BBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f9() override(I2BB, I2BBBBBBBBBBBBBBBB)
	external view returns (uint);
}
interface I2 is I2B {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override
	external view returns (uint);
	function f6() override
	external view returns (uint);
	function f7() override
	external view returns (uint);
	function f8() override
	external payable returns (uint);
	function f11() external view returns (uint);
	function f12() external payable returns (uint);
}
contract C {
	function test() public returns (uint)
	{
			C0 tc0 = new C0();
			if (tc0.f0() != 91302897)
				return 1;
			return 0;
	}
}
