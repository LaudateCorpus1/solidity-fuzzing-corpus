pragma solidity >=0.0;
interface C0BB {
	function f0() external view returns (uint);
}
interface C0B is C0BB {
}
interface C0BBBB {
	function f0() external view returns (uint);
}
interface C0BBB is C0BB, C0BBBB {
	function f0() override(C0BB, C0BBBB)
	external view returns (uint);
}
contract C0 is C0B, C0BBB {
	function f0() external view
	override(C0BBB, C0BB)
	returns (uint)
	{
		return 2078669041;
	}
}
interface I1BB {
	function f0() external payable returns (uint);
}
interface I1B is I1BB {
	function f1() external view returns (uint);
}
interface I1 is I1B {
	function f2() external view returns (uint);
}
interface C2BB {
	function f0() external view returns (uint);
}
interface C2B is C2BB {
}
interface C2BBB is C2B {
	function f1() external view returns (uint);
	function f2() external view returns (uint);
	function f3() external view returns (uint);
}
interface C2BBBB is C2BB {
	function f1() external view returns (uint);
	function f2() external view returns (uint);
}
interface C2BBBBB is C2BB {
	function f1() external view returns (uint);
}
contract C2 is C2B, C2BBB, C2BBBB, C2BBBBB {
	function f0() external view
	override
	returns (uint)
	{
		return 1936030137;
	}
	function f1() external view
	override(C2BBBB, C2BBB, C2BBBBB)
	returns (uint)
	{
		return 1931656580;
	}
	function f2() external view
	override(C2BBBB, C2BBB)
	returns (uint)
	{
		return 638022372;
	}
	function f3() virtual external view
	override
	returns (uint)
	{
		return 353718330;
	}
}
library L3 {
	function f0(uint) public view returns (uint)
	{
		return 1957747793;
	}
}
library L4 {
	function f0(uint) public pure returns (uint)
	{
		return 424238335;
	}
}
contract C {
	using L4 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 424238335)
			return 1;
		return 0;
	}
}
