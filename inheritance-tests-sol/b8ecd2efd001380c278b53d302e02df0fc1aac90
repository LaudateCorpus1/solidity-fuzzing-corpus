pragma solidity >=0.0;
interface C0B {
	function f0() external payable returns (uint);
}
contract C0 is C0B {
	function f0() external payable
	override
	returns (uint)
	{
		return 91302897;
	}
}
abstract contract C2BB {
}
contract C2B is C2BB {
	function f0() virtual public pure
	
	returns (uint)
	{
		return 2015020308;
	}
}
contract C2 is C2B {
}
interface C3BBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface C3BBBBBBBBB is C3BBBBBBBBBB {
	function f1() external view returns (uint);
}
interface C3BBBBBBBB is C3BBBBBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external view returns (uint);
}
interface C3BBBBBBBBBBB is C3BBBBBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external view returns (uint);
	function f2() external view returns (uint);
}
interface C3BBBBBBB is C3BBBBBBBB, C3BBBBBBBBBBB {
	function f0() override(C3BBBBBBBB, C3BBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(C3BBBBBBBB, C3BBBBBBBBBBB)
	external view returns (uint);
	function f2() override
	external view returns (uint);
}
contract C3BBBBBB is C3BBBBBBB {
	function f0() external payable
	override
	returns (uint)
	{
		return 2079025730;
	}
	function f1() virtual external view
	override
	returns (uint)
	{
		return 1404944717;
	}
	function f2() external view
	override
	returns (uint)
	{
		return 424589468;
	}
}
contract C3BBBBB is C3BBBBBB {
	function f1() virtual external view
	override
	returns (uint)
	{
		return 1709834337;
	}
}
contract C3BBBB is C3BBBBB {
}
contract C3BBB is C3BBBB {
}
contract C3BB is C3BBB {
	function f1() external view
	override
	returns (uint)
	{
		return 1150688209;
	}
}
contract C3B is C3BB {
}
contract C3 is C3B {
}
interface C4BBB {
	function f0() external view returns (uint);
	function f1() external payable returns (uint);
}
interface C4BB is C4BBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() external payable returns (uint);
}
interface C4B is C4BB {
	function f0() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
}
contract C4 is C4B {
	function f0() virtual external view
	override
	returns (uint)
	{
		return 1516106925;
	}
	function f1() external payable
	override
	returns (uint)
	{
		return 2139221702;
	}
	function f2() external payable
	override
	returns (uint)
	{
		return 1249752168;
	}
}
interface C5BBB {
	function f0() external payable returns (uint);
}
interface C5BB is C5BBB {
}
abstract contract C5B is C5BB {
	function f0() virtual external payable
	override
	returns (uint)
	{
		return 138295049;
	}
}
abstract contract C5BBBBB {
}
contract C5BBBB is C5BB, C5BBBBB {
	function f0() virtual external payable
	override
	returns (uint)
	{
		return 40050478;
	}
}
contract C5 is C5B, C5BBBB {
	function f0() virtual external payable
	override(C5BBBB, C5B)
	returns (uint)
	{
		return 621713535;
	}
}
library L6 {
	function f0(uint) external pure returns (uint)
	{
		return 1957747793;
	}
}
library L7 {
	function f0(uint) public pure returns (uint)
	{
		return 424238335;
	}
}
contract C {
	using L6 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1957747793)
			return 1;
		return 0;
	}
}
