
pragma solidity >=0.0;




interface I0B {

	function f0() external payable returns (uint);
	function f1() external payable returns (uint);
	function f2() external view returns (uint);
	function f3() external view returns (uint);
	function f4() external view returns (uint);
	function f5() external payable returns (uint);
	function f6() external view returns (uint);
	function f7() external payable returns (uint);
}

interface I0BB is I0B {

	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
	function f8() external payable returns (uint);
	function f9() external view returns (uint);
	function f10() external payable returns (uint);
	function f11() external view returns (uint);
	function f12() external payable returns (uint);
}
interface I0 is I0B, I0BB {

	function f1() override(I0B, I0BB)
	external payable returns (uint);
	function f2() override(I0B, I0BB)
	external view returns (uint);
	function f10() override
	external payable returns (uint);
	function f13() external view returns (uint);
	function f14() external view returns (uint);
}


interface I2B {

	function f0() external payable returns (uint);
	function f1() external payable returns (uint);
	function f2() external view returns (uint);
	function f3() external view returns (uint);
	function f4() external view returns (uint);
	function f5() external payable returns (uint);
	function f6() external view returns (uint);
	function f7() external payable returns (uint);
}

interface I2BB is I2B {

	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f7() override
	external payable returns (uint);
	function f8() external payable returns (uint);
	function f9() external view returns (uint);
	function f10() external payable returns (uint);
	function f11() external view returns (uint);
	function f12() external payable returns (uint);
}
interface I2 is I2B, I2BB {

	function f0() override
	external payable returns (uint);
	function f1() override(I2B, I2BB)
	external payable returns (uint);
	function f2() override(I2B, I2BB)
	external view returns (uint);
	function f3() override(I2B, I2BB)
	external view returns (uint);
	function f4() override
	external view returns (uint);
	function f6() override
	external view returns (uint);
	function f7() override(I2B, I2BB)
	external payable returns (uint);
	function f11() override
	external view returns (uint);
	function f12() override
	external payable returns (uint);
	function f13() external payable returns (uint);
	function f14() external payable returns (uint);
}


interface I3B {

	function f0() external payable returns (uint);
}
interface I3 is I3B {

}


interface I6B {

	function f0() external payable returns (uint);
	function f1() external payable returns (uint);
	function f2() external view returns (uint);
	function f3() external view returns (uint);
	function f4() external view returns (uint);
	function f5() external payable returns (uint);
	function f6() external view returns (uint);
	function f7() external payable returns (uint);
}

interface I6BB is I6B {

	function f0() override
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
	function f4() override
	external view returns (uint);
	function f6() override
	external view returns (uint);
	function f8() external payable returns (uint);
	function f9() external view returns (uint);
	function f10() external payable returns (uint);
	function f11() external view returns (uint);
	function f12() external payable returns (uint);
}
interface I6 is I6B, I6BB {

	function f0() override(I6B, I6BB)
	external payable returns (uint);
	function f1() override(I6B, I6BB)
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override(I6B, I6BB)
	external view returns (uint);
	function f6() override(I6B, I6BB)
	external view returns (uint);
	function f7() override
	external payable returns (uint);
	function f8() override
	external payable returns (uint);
	function f9() override
	external view returns (uint);
	function f12() override
	external payable returns (uint);
	function f13() external payable returns (uint);
	function f14() external payable returns (uint);
}


contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}

