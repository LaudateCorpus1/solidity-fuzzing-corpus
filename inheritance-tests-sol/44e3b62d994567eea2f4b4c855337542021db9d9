
pragma solidity >=0.0;






interface I0BBB {

	function f0() external payable returns (uint);
}
interface I0BB is I0BBB {

}
interface I0B is I0BB {

	function f0() override
	external payable returns (uint);
	function f1() external view returns (uint);
}
interface I0 is I0B {

}


interface I1B {

	function f0() external payable returns (uint);
}
interface I1 is I1B {

	function f1() external payable returns (uint);
}


interface I2B {

	function f0() external payable returns (uint);
}
interface I2 is I2B {

	function f1() external payable returns (uint);
}





interface I3BBBB {

	function f0() external view returns (uint);
}
interface I3BBB is I3BBBB {

}
interface I3BB is I3BBB {

}
interface I3B is I3BB {

}
interface I3 is I3B {

}



interface I4BB {

	function f0() external payable returns (uint);
}
interface I4B is I4BB {

}
interface I4 is I4B {

	function f0() override
	external payable returns (uint);
	function f1() external view returns (uint);
}
library L5 {

	function f0(uint) external pure returns (uint)
	{
		return 1804289383;
	}
}




interface I6BBB {

	function f0() external payable returns (uint);
}
interface I6BB is I6BBB {

}
interface I6B is I6BB {

	function f1() external view returns (uint);
}
interface I6 is I6B {

	function f2() external view returns (uint);
}





interface C7BBBB {

	function f0() external payable returns (uint);
}
interface C7BBB is C7BBBB {

	function f0() override
	external payable returns (uint);
}
interface C7BB is C7BBB {

	function f0() override
	external payable returns (uint);
}
contract C7B is C7BB {

	function f0() external payable
	override
	returns (uint)
	{
		return 2010567813;
	}
}
abstract contract C7 is C7B {

}


interface I8B {

	function f0() external payable returns (uint);
}
interface I8 is I8B {

	function f1() external payable returns (uint);
}



interface I9BB {

	function f0() external payable returns (uint);
}
interface I9B is I9BB {

	function f0() override
	external payable returns (uint);
}
interface I9 is I9B {

}



interface I10BB {

	function f0() external payable returns (uint);
}
interface I10B is I10BB {

	function f0() override
	external payable returns (uint);
}

interface I10BBB is I10B {

}

interface I10BBBB is I10BB {

	function f0() override
	external payable returns (uint);
	function f1() external payable returns (uint);
}
interface I10 is I10B, I10BBB, I10BBBB {

	function f0() override(I10B, I10BBBB)
	external payable returns (uint);
}





interface I11BBBB {

	function f0() external view returns (uint);
}
interface I11BBB is I11BBBB {

}
interface I11BB is I11BBB {

}
interface I11B is I11BB {

	function f0() override
	external view returns (uint);
}
interface I11 is I11B {

	function f0() override
	external view returns (uint);
}




interface I13BBB {

	function f0() external payable returns (uint);
}
interface I13BB is I13BBB {

}
interface I13B is I13BB {

	function f1() external view returns (uint);
}
interface I13 is I13B {

	function f0() override
	external payable returns (uint);
	function f2() external view returns (uint);
}


contract C {
	using L5 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1804289383)
			return 1;
		return 0;
	}
}

