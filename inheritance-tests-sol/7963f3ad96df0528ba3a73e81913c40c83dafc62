pragma solidity >=0.0;
interface I0BBBBBB {
	function f0() external payable returns (uint);
}
interface I0BBBBB is I0BBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I0BBBB is I0BBBBB {
	function f0() override
	external payable returns (uint);
	function f1() external payable returns (uint);
}
interface I0BBB is I0BBBB {
}
interface I0BB is I0BBB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I0BBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I0BBBBBBBB is I0BBBBBBBBB {
}
interface I0BBBBBBB is I0BBB, I0BBBBBBBB {
	function f0() override(I0BBBB, I0BBBBBBBBB)
	external payable returns (uint);
}
interface I0BBBBBBBBBB is I0BBBBBBB {
	function f1() override
	external payable returns (uint);
}
interface I0B is I0BB, I0BBBBBBB, I0BBBBBBBBBB {
	function f0() override(I0BB, I0BBBBBBB)
	external payable returns (uint);
	function f1() override(I0BB, I0BBBB, I0BBBBBBBBBB)
	external payable returns (uint);
}
interface I0 is I0B {
	function f0() override
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
library L1 {
	function f0(uint) public pure returns (uint)
	{
		return 1681692777;
	}
}
contract C {
	using L1 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1681692777)
			return 1;
		return 0;
	}
}
