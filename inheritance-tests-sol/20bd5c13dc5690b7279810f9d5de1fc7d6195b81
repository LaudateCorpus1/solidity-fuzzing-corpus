pragma solidity >=0.0;
interface I0BBB {
	function f0() external view returns (uint);
}
interface I0BB is I0BBB {
}
interface I0B is I0BB {
	function f0() override
	external view returns (uint);
}
interface I0 is I0B {
	function f1() external view returns (uint);
}
interface I1BB {
	function f0() external pure returns (uint);
}
interface I1B is I1BB {
	function f1() external payable returns (uint);
}
interface I1 is I1B {
}
interface I2B {
	function f0() external view returns (uint);
}
interface I2BBBB {
	function f0() external view returns (uint);
}
interface I2BBB is I2BBBB {
	function f1() external payable returns (uint);
}
interface I2BB is I2B, I2BBB {
	function f0() override(I2B, I2BBBB)
	external view returns (uint);
}
interface I2 is I2B, I2BB {
	function f0() override(I2B, I2BB)
	external view returns (uint);
}
interface C3BBBB {
	function f0() external payable returns (uint);
	function f1() external payable returns (uint);
}
interface C3BBB is C3BBBB {
}
interface C3BB is C3BBB {
	function f0() override
	external payable returns (uint);
}
contract C3B is C3BB {
	function f0() virtual external payable
	override
	returns (uint)
	{
		return 914937185;
	}
	function f1() virtual external payable
	override
	returns (uint)
	{
		return 1402304087;
	}
}
abstract contract C3 is C3B {
	function f0() virtual external payable
	override
	returns (uint)
	{
		return 1842513780;
	}
}
interface I4B {
	function f0() external payable returns (uint);
}
interface I4 is I4B {
}
interface I5BBB {
	function f0() external view returns (uint);
}
interface I5BB is I5BBB {
}
interface I5B is I5BB {
}
interface I5 is I5B {
	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
}
interface I6BBBB {
	function f0() external view returns (uint);
}
interface I6BBB is I6BBBB {
}
interface I6BB is I6BBB {
}
interface I6B is I6BB {
}
interface I6BBBBB is I6B {
	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I6BBBBBBBB {
	function f0() external view returns (uint);
}
interface I6BBBBBBB is I6BBBBBBBB {
}
interface I6BBBBBB is I6BB, I6BBBBBBB {
	function f0() override(I6BBBB, I6BBBBBBBB)
	external view returns (uint);
}
interface I6 is I6B, I6BBBBB, I6BBBBBB {
	function f0() override(I6BBBB, I6BBBBB, I6BBBBBB)
	external view returns (uint);
}
contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}
