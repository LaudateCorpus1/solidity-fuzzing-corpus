pragma solidity >=0.0;
interface C1BBBBBBBB {
	function f0() external payable returns (uint);
	function f1() external pure returns (uint);
}
interface C1BBBBBBB is C1BBBBBBBB {
	function f0() override
	external payable returns (uint);
	function f2() external payable returns (uint);
}
interface C1BBBBBB is C1BBBBBBB {
	function f1() override
	external pure returns (uint);
	function f3() external view returns (uint);
	function f4() external view returns (uint);
}
interface C1BBBBB is C1BBBBBB {
	function f1() override
	external pure returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
}
interface C1BBBBBBBBB is C1BBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external pure returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external view returns (uint);
	function f5() external view returns (uint);
}
interface C1BBBB is C1BBBBB, C1BBBBBBBBB {
	function f0() override(C1BBBBBBB, C1BBBBBBBBB)
	external payable returns (uint);
	function f1() override(C1BBBBB, C1BBBBBBBBB)
	external pure returns (uint);
	function f2() override(C1BBBBB, C1BBBBBBB)
	external payable returns (uint);
	function f3() override(C1BBBBB, C1BBBBBBBBB)
	external view returns (uint);
	function f4() override(C1BBBBBB, C1BBBBBBBBB)
	external view returns (uint);
	function f5() override
	external view returns (uint);
}
contract C1BBB is C1BBBB {
	function f0() external payable
	override
	returns (uint)
	{
		return 206008598;
	}
	function f1() virtual external pure
	override
	returns (uint)
	{
		return 1358404307;
	}
	function f2() external payable
	override
	returns (uint)
	{
		return 324855843;
	}
	function f3() external view
	override
	returns (uint)
	{
		return 2037666653;
	}
	function f4() external view
	override
	returns (uint)
	{
		return 91491940;
	}
	function f5() virtual external view
	override
	returns (uint)
	{
		return 1578591759;
	}
}
contract C1BB is C1BBB {
}
contract C1B is C1BB {
}
contract C1 is C1B {
	function f1() external pure
	override
	returns (uint)
	{
		return 1498947413;
	}
	function f5() external view
	override
	returns (uint)
	{
		return 88805914;
	}
}
interface C2B {
	function f0() external view returns (uint);
}
interface C2BB is C2B {
	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
}
contract C2 is C2B, C2BB {
	function f0() external view
	override(C2BB, C2B)
	returns (uint)
	{
		return 844776180;
	}
	function f1() virtual external view
	override
	returns (uint)
	{
		return 1210064531;
	}
	function f2() public pure
	
	returns (uint)
	{
		return 1617261148;
	}
}
contract C {
	function test() public returns (uint)
	{
			C1 tc0 = new C1();
			if (tc0.f0() != 206008598)
				return 1;
			if (tc0.f1() != 1498947413)
				return 2;
			if (tc0.f2() != 324855843)
				return 3;
			if (tc0.f3() != 2037666653)
				return 4;
			if (tc0.f4() != 91491940)
				return 5;
			if (tc0.f5() != 88805914)
				return 6;
			C1B tc1 = new C1B();
			if (tc1.f0() != 206008598)
				return 7;
			if (tc1.f1() != 1358404307)
				return 8;
			if (tc1.f2() != 324855843)
				return 9;
			if (tc1.f3() != 2037666653)
				return 10;
			if (tc1.f4() != 91491940)
				return 11;
			if (tc1.f5() != 1578591759)
				return 12;
			C1BB tc2 = new C1BB();
			if (tc2.f0() != 206008598)
				return 13;
			if (tc2.f1() != 1358404307)
				return 14;
			if (tc2.f2() != 324855843)
				return 15;
			if (tc2.f3() != 2037666653)
				return 16;
			if (tc2.f4() != 91491940)
				return 17;
			if (tc2.f5() != 1578591759)
				return 18;
			C1BBB tc3 = new C1BBB();
			if (tc3.f0() != 206008598)
				return 19;
			if (tc3.f1() != 1358404307)
				return 20;
			if (tc3.f2() != 324855843)
				return 21;
			if (tc3.f3() != 2037666653)
				return 22;
			if (tc3.f4() != 91491940)
				return 23;
			if (tc3.f5() != 1578591759)
				return 24;
			C2 tc4 = new C2();
			if (tc4.f0() != 844776180)
				return 25;
			if (tc4.f1() != 1210064531)
				return 26;
			if (tc4.f2() != 1617261148)
				return 27;
			return 0;
	}
}
