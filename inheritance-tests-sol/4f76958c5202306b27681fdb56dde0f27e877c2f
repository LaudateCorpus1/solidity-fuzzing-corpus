pragma solidity >=0.0;
interface I0BB {
	function f0() external view returns (uint);
}
interface I0B is I0BB {
}
interface I0BBBBBB {
}
interface I0BBBBB is I0BBBBBB {
	function f0() external view returns (uint);
}
interface I0BBBB is I0BBBBB {
}
interface I0BBB is I0BB, I0BBBB {
	function f0() override(I0BB, I0BBBBB)
	external view returns (uint);
}
interface I0BBBBBBBBBB {
}
interface I0BBBBBBBBB is I0BBBBBBBBBB {
}
interface I0BBBBBBBB is I0BBBBBBBBB {
}
interface I0BBBBBBB is I0BBB, I0BBBBBBBB {
}
interface I0 is I0B, I0BBB, I0BBBBBBB {
	function f0() override(I0BB, I0BBB)
	external view returns (uint);
}
interface I1BBB {
	function f0() external view returns (uint);
}
interface I1BBBBB {
	function f0() external view returns (uint);
	function f1() external view returns (uint);
	function f2() external view returns (uint);
	function f3() external payable returns (uint);
	function f4() external payable returns (uint);
}
interface I1BBBB is I1BBB, I1BBBBB {
	function f0() override(I1BBB, I1BBBBB)
	external view returns (uint);
}
interface I1BB is I1BBB, I1BBBB {
	function f0() override(I1BBB, I1BBBB)
	external view returns (uint);
	function f3() override
	external payable returns (uint);
	function f5() external view returns (uint);
}
interface I1B is I1BB {
	function f0() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f5() override
	external view returns (uint);
}
interface I1 is I1B {
	function f0() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
}
interface I3BBBBBB {
}
interface I3BBBBB is I3BBBBBB {
}
interface I3BBBB is I3BBBBB {
}
interface I3BBBBBBBBBB {
}
interface I3BBBBBBBBB is I3BBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I3BBBBBBBB is I3BBBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface I3BBBBBBB is I3BBBBB, I3BBBBBBBB {
}
interface I3BBB is I3BBBB, I3BBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I3BB is I3BBB {
	function f2() external view returns (uint);
}
interface I3B is I3BB {
	function f2() override
	external view returns (uint);
}
interface I3BBBBBBBBBBBBBB {
}
interface I3BBBBBBBBBBBBB is I3BBBBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I3BBBBBBBBBBBB is I3BBBBBBBBBBBBB {
}
interface I3BBBBBBBBBBB is I3BB, I3BBBBBBBBBBBB {
	function f0() override(I3BBB, I3BBBBBBBBBBBBB)
	external view returns (uint);
}
interface I3 is I3B, I3BBBBBBBBBBB {
	function f0() override(I3BBB, I3BBBBBBBBBBB)
	external view returns (uint);
	function f2() override(I3B, I3BB)
	external view returns (uint);
	function f3() external payable returns (uint);
}
interface I4BBBBBBBBB {
}
interface I4BBBBBBBB is I4BBBBBBBBB {
}
interface I4BBBBBBB is I4BBBBBBBB {
}
interface I4BBBBBB is I4BBBBBBB {
}
interface I4BBBBB is I4BBBBBB {
}
interface I4BBBB is I4BBBBB {
}
interface I4BBBBBBBBBBBBB {
}
interface I4BBBBBBBBBBBB is I4BBBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I4BBBBBBBBBBB is I4BBBBBBBBBBBB {
}
interface I4BBBBBBBBBB is I4BBBBB, I4BBBBBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface I4BBB is I4BBBB, I4BBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I4BB is I4BBB {
	function f1() override
	external payable returns (uint);
	function f2() external view returns (uint);
}
interface I4B is I4BB {
	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I4BBBBBBBBBBBBBBBBB {
}
interface I4BBBBBBBBBBBBBBBB is I4BBBBBBBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I4BBBBBBBBBBBBBBB is I4BBBBBBBBBBBBBBBB {
}
interface I4BBBBBBBBBBBBBB is I4B, I4BBBBBBBBBBBBBBB {
	function f0() override(I4B, I4BBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override
	external view returns (uint);
}
interface I4 is I4B, I4BBBBBBBBBBBBBB {
	function f0() override(I4B, I4BBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override(I4BB, I4BBBBBBBBBBBBBB)
	external view returns (uint);
	function f3() external payable returns (uint);
}
interface I5 {
	function f0() external payable returns (uint);
}
interface I6BBBBBB {
}
interface I6BBBBB is I6BBBBBB {
}
interface I6BBBB is I6BBBBB {
}
interface I6BBBBBBBBBB {
}
interface I6BBBBBBBBB is I6BBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I6BBBBBBBB is I6BBBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface I6BBBBBBB is I6BBBB, I6BBBBBBBB {
}
interface I6BBB is I6BBBB, I6BBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I6BB is I6BBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() external view returns (uint);
}
interface I6B is I6BB {
	function f0() override
	external view returns (uint);
}
interface I6BBBBBBBBBBBBBB {
}
interface I6BBBBBBBBBBBBB is I6BBBBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I6BBBBBBBBBBBB is I6BBBBBBBBBBBBB {
}
interface I6BBBBBBBBBBB is I6BB, I6BBBBBBBBBBBB {
	function f0() override(I6BB, I6BBBBBBBBBBBBB)
	external view returns (uint);
}
interface I6 is I6B, I6BBBBBBBBBBB {
	function f0() override(I6B, I6BBBBBBBBBBB)
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f3() external payable returns (uint);
}
contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}
