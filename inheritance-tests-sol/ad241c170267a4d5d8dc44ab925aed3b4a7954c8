pragma solidity >=0.0;
library L0 {
	function f0(uint) public view returns (uint)
	{
		return 1804289383;
	}
}
interface I1BBB {
	function f0() external view returns (uint);
}
interface I1BB is I1BBB {
	function f1() external view returns (uint);
	function f2() external payable returns (uint);
}
interface I1BBBBB {
}
interface I1BBBB is I1BB, I1BBBBB {
	function f2() override
	external payable returns (uint);
	function f3() external view returns (uint);
}
interface I1B is I1BB, I1BBBB {
	function f1() override
	external view returns (uint);
	function f2() override(I1BB, I1BBBB)
	external payable returns (uint);
}
interface I1 is I1B {
	function f4() external view returns (uint);
	function f5() external payable returns (uint);
}
library L2 {
	function f0(uint) public pure returns (uint)
	{
		return 1681692777;
	}
}
library L3 {
	function f0(uint) private pure returns (uint)
	{
		return 1714636915;
	}
}
contract C4BBB {
	function f0() virtual public pure
	
	returns (uint)
	{
		return 1508462820;
	}
}
contract C4BB is C4BBB {
}
abstract contract C4B is C4BB {
	function f0() public pure
	override
	returns (uint)
	{
		return 1778238631;
	}
}
contract C4 is C4B {
	function f1() virtual public pure
	
	returns (uint)
	{
		return 2051906719;
	}
}
interface I5 {
	function f0() external view returns (uint);
}
interface I6BBBBBBB {
	function f0() external payable returns (uint);
}
interface I6BBBBBB is I6BBBBBBB {
}
interface I6BBBBB is I6BBBBBB {
}
interface I6BBBB is I6BBBBB {
}
interface I6BBB is I6BBBB {
	function f0() override
	external payable returns (uint);
}
interface I6BB is I6BBB {
	function f0() override
	external payable returns (uint);
}
interface I6B is I6BB {
	function f1() external payable returns (uint);
}
interface I6 is I6B {
	function f0() override
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
contract C7 {
	function f0() external pure
	
	returns (uint)
	{
		return 1763960396;
	}
	function f1() private pure
	
	returns (uint)
	{
		return 405671766;
	}
}
interface I8B {
	function f0() external view returns (uint);
}
interface I8BBBB {
	function f0() external view returns (uint);
}
interface I8BBB is I8BBBB {
	function f0() override
	external view returns (uint);
}
interface I8BB is I8B, I8BBB {
	function f0() override(I8B, I8BBB)
	external view returns (uint);
}
interface I8 is I8B, I8BB {
	function f0() override(I8B, I8BB)
	external view returns (uint);
}
contract C {
	using L2 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1681692777)
			return 1;
		return 0;
	}
}
