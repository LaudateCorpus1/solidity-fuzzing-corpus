pragma solidity >=0.0;
interface I0BB {
	function f0() external payable returns (uint);
}
interface I0B is I0BB {
	function f0() override
	external payable returns (uint);
}
interface I0 is I0B {
	function f1() external payable returns (uint);
}
interface I1BBBB {
	function f0() external payable returns (uint);
}
interface I1BBB is I1BBBB {
	function f0() override
	external payable returns (uint);
}
interface I1BB is I1BBB {
	function f0() override
	external payable returns (uint);
	function f1() external view returns (uint);
}
interface I1B is I1BB {
	function f1() override
	external view returns (uint);
}
interface I1 is I1B {
	function f0() override
	external payable returns (uint);
	function f1() override
	external view returns (uint);
}
interface I2BBBB {
	function f0() external view returns (uint);
	function f1() external payable returns (uint);
}
interface I2BBB is I2BBBB {
	function f0() override
	external view returns (uint);
	function f2() external view returns (uint);
}
interface I2BB is I2BBB {
	function f1() override
	external payable returns (uint);
}
interface I2BBBBBBBB {
	function f0() external view returns (uint);
	function f1() external payable returns (uint);
}
interface I2BBBBBBB is I2BBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I2BBBBBB is I2BBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I2BBBBB is I2BBB, I2BBBBBB {
	function f0() override(I2BBB, I2BBBBBB)
	external view returns (uint);
	function f1() override(I2BBBB, I2BBBBBB)
	external payable returns (uint);
	function f2() override
	external view returns (uint);
}
interface I2B is I2BB, I2BBBBB {
	function f0() override(I2BBB, I2BBBBB)
	external view returns (uint);
	function f1() override(I2BB, I2BBBBB)
	external payable returns (uint);
	function f2() override(I2BBB, I2BBBBB)
	external view returns (uint);
}
interface I2 is I2B {
	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I4BBBB {
	function f0() external view returns (uint);
	function f1() external payable returns (uint);
}
interface I4BBB is I4BBBB {
	function f0() override
	external view returns (uint);
	function f2() external view returns (uint);
}
interface I4BB is I4BBB {
	function f0() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
}
interface I4BBBBBBBB {
	function f0() external view returns (uint);
	function f1() external payable returns (uint);
}
interface I4BBBBBBB is I4BBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface I4BBBBBB is I4BBBBBBB {
	function f1() override
	external payable returns (uint);
}
interface I4BBBBB is I4BB, I4BBBBBB {
	function f0() override(I4BB, I4BBBBBBB)
	external view returns (uint);
	function f1() override(I4BBBB, I4BBBBBB)
	external payable returns (uint);
	function f2() override
	external view returns (uint);
}
interface I4B is I4BB, I4BBBBB {
	function f0() override(I4BB, I4BBBBB)
	external view returns (uint);
	function f1() override(I4BBBB, I4BBBBB)
	external payable returns (uint);
	function f2() override(I4BB, I4BBBBB)
	external view returns (uint);
}
interface I4BBBBBBBBB is I4BB {
	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
}
interface I4 is I4B, I4BBBBBBBBB {
	function f0() override(I4B, I4BBBBBBBBB)
	external view returns (uint);
	function f1() override(I4B, I4BBBBBBBBB)
	external payable returns (uint);
	function f2() override(I4B, I4BBBBBBBBB)
	external view returns (uint);
}
contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}
