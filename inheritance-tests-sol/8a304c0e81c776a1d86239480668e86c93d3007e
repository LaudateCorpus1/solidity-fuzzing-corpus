
pragma solidity >=0.0;





interface I0BB {

}
interface I0B is I0BB {

}







interface I0BBBBBBBBB {

	function f0() external view returns (uint);
}
interface I0BBBBBBBB is I0BBBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I0BBBBBBB is I0BBBBBBBB {

}
interface I0BBBBBB is I0BBBBBBB {

}
interface I0BBBBB is I0BBBBBB {

}
interface I0BBBB is I0BBBBB {

}

interface I0BBBBBBBBBB is I0BBBB {

	function f1() external payable returns (uint);
}
interface I0BBB is I0BB, I0BBBB, I0BBBBBBBBBB {

}
interface I0 is I0B, I0BBB {

	function f1() override
	external payable returns (uint);
	function f2() external view returns (uint);
}



interface I1BB {

	function f0() external view returns (uint);
}
interface I1B is I1BB {

	function f1() external payable returns (uint);
}
interface I1 is I1B {

	function f0() override
	external view returns (uint);
}




interface I2BBB {

}
interface I2BB is I2BBB {

}
interface I2B is I2BB {

}







interface I2BBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I2BBBBBBBBB is I2BBBBBBBBBB {

}
interface I2BBBBBBBB is I2BBBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I2BBBBBBB is I2BBBBBBBB {

}
interface I2BBBBBB is I2BBBBBBB {

}
interface I2BBBBB is I2BBBBBB {

}

interface I2BBBBBBBBBBB is I2BBBBBB {

	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I2BBBB is I2BB, I2BBBBB, I2BBBBBBBBBBB {

	function f0() override(I2BBBBBBBB, I2BBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I2 is I2B, I2BBBB {

	function f2() external view returns (uint);
}



interface I3BB {

}
interface I3B is I3BB {

}


interface I3BBBB {

	function f0() external view returns (uint);
}
interface I3BBB is I3BB, I3BBBB {

	function f0() override
	external view returns (uint);
}







interface I3BBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I3BBBBBBBBBB is I3BBBBBBBBBBB {

}
interface I3BBBBBBBBB is I3BBBBBBBBBB {

}
interface I3BBBBBBBB is I3BBBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I3BBBBBBB is I3BBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I3BBBBBB is I3BBBBBBB {

	function f0() override
	external view returns (uint);
}

interface I3BBBBBBBBBBBB is I3BBBBBB {

	function f1() external payable returns (uint);
}
interface I3BBBBB is I3BBBB, I3BBBBBB, I3BBBBBBBBBBBB {

	function f0() override(I3BBBB, I3BBBBBB)
	external view returns (uint);
}
interface I3 is I3B, I3BBB, I3BBBBB {

	function f0() override(I3BBB, I3BBBBB)
	external view returns (uint);
	function f2() external view returns (uint);
}





interface I4BBBB {

	function f0() external payable returns (uint);
}
interface I4BBB is I4BBBB {

}
interface I4BB is I4BBB {

	function f0() override
	external payable returns (uint);
}

interface I4BBBBB is I4BB {

	function f1() external view returns (uint);
}
interface I4B is I4BB, I4BBBBB {

	function f0() override
	external payable returns (uint);
	function f2() external payable returns (uint);
}
interface I4 is I4B {

	function f2() override
	external payable returns (uint);
}


contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}

