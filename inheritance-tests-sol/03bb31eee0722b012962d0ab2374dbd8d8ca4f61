
pragma solidity >=0.0;




interface I0B {

	function f0() external view returns (uint);
}
interface I0 is I0B {

}








interface I1BBBBBBB {

	function f0() external payable returns (uint);
}
interface I1BBBBBB is I1BBBBBBB {

	function f0() override
	external payable returns (uint);
	function f1() external view returns (uint);
}
interface I1BBBBB is I1BBBBBB {

}


interface I1BBBBBBBBB {

}
interface I1BBBBBBBB is I1BBBBBB, I1BBBBBBBBB {

}
interface I1BBBB is I1BBBBB, I1BBBBBBBB {

}
interface I1BBB is I1BBBB {

}
interface I1BB is I1BBB {

}






interface I1BBBBBBBBBBBBBBB {

	function f0() external payable returns (uint);
}
interface I1BBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBB {

}
interface I1BBBBBBBBBBBBB is I1BBBBBBBBBBBBBB {

	function f0() override
	external payable returns (uint);
}
interface I1BBBBBBBBBBBB is I1BBBBBBBBBBBBB {

	function f0() override
	external payable returns (uint);
}
interface I1BBBBBBBBBBB is I1BBBBBBBBBBBB {

}
interface I1BBBBBBBBBB is I1BB, I1BBBBBBBBBBB {

	function f0() override(I1BBBBBB, I1BBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override
	external view returns (uint);
}
interface I1B is I1BB, I1BBBBBBBBBB {

	function f0() override(I1BBBBBB, I1BBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I1BBBBBB, I1BBBBBBBBBB)
	external view returns (uint);
}
interface I1 is I1B {

	function f2() external pure returns (uint);
}







interface I2BBBBBB {

	function f0() external view returns (uint);
}

interface I2BBBBBBB is I2BBBBBB {

	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I2BBBBB is I2BBBBBB, I2BBBBBBB {

	function f0() override(I2BBBBBB, I2BBBBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() external view returns (uint);
}
interface I2BBBB is I2BBBBB {

	function f1() override
	external payable returns (uint);
}
interface I2BBB is I2BBBB {

	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
	function f3() external payable returns (uint);
}
interface I2BB is I2BBB {

	function f1() override
	external payable returns (uint);
}
interface I2B is I2BB {

	function f1() override
	external payable returns (uint);
	function f3() override
	external payable returns (uint);
}
interface I2 is I2B {

	function f1() override
	external payable returns (uint);
	function f3() override
	external payable returns (uint);
}







interface I5BBBBBB {

}
interface I5BBBBB is I5BBBBBB {

}
interface I5BBBB is I5BBBBB {

}




interface I5BBBBBBBBBB {

}
interface I5BBBBBBBBB is I5BBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I5BBBBBBBB is I5BBBBBBBBB {

}
interface I5BBBBBBB is I5BBBBB, I5BBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I5BBB is I5BBBB, I5BBBBBBB {

	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I5BB is I5BBB {

	function f0() override
	external view returns (uint);
	function f2() external view returns (uint);
}





interface I5BBBBBBBBBBBBBBB {

}
interface I5BBBBBBBBBBBBBB is I5BBBBBBBBBBBBBBB {

}
interface I5BBBBBBBBBBBBB is I5BBBBBBBBBBBBBB {

}




interface I5BBBBBBBBBBBBBBBBBBB {

}
interface I5BBBBBBBBBBBBBBBBBB is I5BBBBBBBBBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I5BBBBBBBBBBBBBBBBB is I5BBBBBBBBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I5BBBBBBBBBBBBBBBB is I5BBBBBBBBBBBBB, I5BBBBBBBBBBBBBBBBB {

}
interface I5BBBBBBBBBBBB is I5BBBBBBBBBBBBB, I5BBBBBBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I5BBBBBBBBBBB is I5BB, I5BBBBBBBBBBBB {

	function f0() override(I5BB, I5BBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I5BBB, I5BBBBBBBBBBBB)
	external payable returns (uint);
	function f2() override
	external view returns (uint);
	function f3() external view returns (uint);
}
interface I5B is I5BB, I5BBBBBBBBBBB {

	function f0() override(I5BB, I5BBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I5BBB, I5BBBBBBBBBBB)
	external payable returns (uint);
	function f2() override(I5BB, I5BBBBBBBBBBB)
	external view returns (uint);
	function f3() override
	external view returns (uint);
}




interface I5BBBBBBBBBBBBBBBBBBBBBBB {

}
interface I5BBBBBBBBBBBBBBBBBBBBBB is I5BBBBBBBBBBBBBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I5BBBBBBBBBBBBBBBBBBBBB is I5BBBBBBBBBBBBBBBBBBBBBB {

}
interface I5BBBBBBBBBBBBBBBBBBBB is I5BB, I5BBBBBBBBBBBBBBBBBBBBB {

	function f0() override(I5BB, I5BBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}




interface I5BBBBBBBBBBBBBBBBBBBBBBBBBBB {

}
interface I5BBBBBBBBBBBBBBBBBBBBBBBBBB is I5BBBBBBBBBBBBBBBBBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I5BBBBBBBBBBBBBBBBBBBBBBBBB is I5BBBBBBBBBBBBBBBBBBBBBBBBBB {

}
interface I5BBBBBBBBBBBBBBBBBBBBBBBB is I5BB, I5BBBBBBBBBBBBBBBBBBBBBBBBB {

	function f0() override(I5BB, I5BBBBBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override
	external view returns (uint);
}
interface I5 is I5B, I5BBBBBBBBBBBBBBBBBBBB, I5BBBBBBBBBBBBBBBBBBBBBBBB {

	function f0() override(I5B, I5BBBBBBBBBBBBBBBBBBBB, I5BBBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I5B, I5BBBBBBBBBBBBBBBBBBBB, I5BBB)
	external payable returns (uint);
	function f2() override(I5B, I5BB, I5BBBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f4() external payable returns (uint);
}
library L6 {

	function f0(uint) public view returns (uint)
	{
		return 1025202362;
	}
}

interface I7 {

	function f0() external view returns (uint);
}


contract C {
	using L6 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1025202362)
			return 1;
		return 0;
	}
}

