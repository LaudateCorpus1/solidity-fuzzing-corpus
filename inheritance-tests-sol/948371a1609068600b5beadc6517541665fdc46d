
pragma solidity >=0.0;


library L0 {

	function f0(uint) external pure returns (uint)
	{
		return 1804289383;
	}
}
library L1 {

	function f0(uint) private pure returns (uint)
	{
		return 846930886;
	}
}




interface I2BBB {

	function f0() external view returns (uint);
}
interface I2BB is I2BBB {

	function f0() override
	external view returns (uint);
}
interface I2B is I2BB {

}


interface I2BBBBB {

	function f0() external view returns (uint);
}
interface I2BBBB is I2BB, I2BBBBB {

	function f0() override(I2BB, I2BBBBB)
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I2 is I2B, I2BBBB {

	function f0() override(I2BB, I2BBBB)
	external view returns (uint);
	function f2() external view returns (uint);
}





interface I3BBBB {

	function f0() external view returns (uint);
}
interface I3BBB is I3BBBB {

}
interface I3BB is I3BBB {

}
interface I3B is I3BB {

}

interface I3BBBBB is I3BB {

	function f1() external pure returns (uint);
}




interface I3BBBBBBBBB {

	function f0() external view returns (uint);
}
interface I3BBBBBBBB is I3BBBBBBBBB {

}
interface I3BBBBBBB is I3BBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I3BBBBBB is I3BB, I3BBBBBBB {

	function f0() override(I3BBBB, I3BBBBBBB)
	external view returns (uint);
}
interface I3 is I3B, I3BBBBB, I3BBBBBB {

	function f0() override(I3BBBB, I3BBBBBB)
	external view returns (uint);
	function f1() override
	external pure returns (uint);
}




interface I4BBB {

	function f0() external view returns (uint);
}
interface I4BB is I4BBB {

	function f1() external view returns (uint);
	function f2() external payable returns (uint);
}


interface I4BBBBB {

}
interface I4BBBB is I4BBB, I4BBBBB {

	function f1() external view returns (uint);
}
interface I4B is I4BB, I4BBBB {

	function f0() override
	external view returns (uint);
	function f1() override(I4BB, I4BBBB)
	external view returns (uint);
	function f2() override
	external payable returns (uint);
}
interface I4 is I4B {

	function f3() external view returns (uint);
	function f4() external payable returns (uint);
}


interface I5B {

	function f0() external view returns (uint);
}
interface I5 is I5B {

	function f0() override
	external view returns (uint);
}
library L6 {

	function f0(uint) internal pure returns (uint)
	{
		return 719885386;
	}
	function f1(uint) public view returns (uint)
	{
		return 1649760492;
	}
}
library L7 {

	function f0(uint) private pure returns (uint)
	{
		return 596516649;
	}
}



interface I8BB {

	function f0() external view returns (uint);
}
interface I8B is I8BB {

	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I8 is I8B {

	function f1() override
	external payable returns (uint);
}





interface I9BBBB {

	function f0() external view returns (uint);
}
interface I9BBB is I9BBBB {

}
interface I9BB is I9BBB {

}
interface I9B is I9BB {

	function f0() override
	external view returns (uint);
}

interface I9BBBBB is I9BB {

	function f1() external pure returns (uint);
}




interface I9BBBBBBBBB {

	function f0() external view returns (uint);
}
interface I9BBBBBBBB is I9BBBBBBBBB {

}
interface I9BBBBBBB is I9BBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I9BBBBBB is I9BBBBB, I9BBBBBBB {

	function f0() override(I9BBBB, I9BBBBBBB)
	external view returns (uint);
	function f1() override
	external pure returns (uint);
}
interface I9 is I9B, I9BBBBB, I9BBBBBB {

	function f0() override(I9B, I9BBBB, I9BBBBBB)
	external view returns (uint);
	function f1() override(I9BBBBB, I9BBBBBB)
	external pure returns (uint);
}


interface I10B {

	function f0() external view returns (uint);
}
interface I10 is I10B {

	function f0() override
	external view returns (uint);
}





interface I11BBBB {

	function f0() external view returns (uint);
}
interface I11BBB is I11BBBB {

}
interface I11BB is I11BBB {

	function f0() override
	external view returns (uint);
}
interface I11B is I11BB {

	function f0() override
	external view returns (uint);
}

interface I11BBBBB is I11BB {

	function f1() external payable returns (uint);
}





interface I11BBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I11BBBBBBBBB is I11BBBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I11BBBBBBBB is I11BBBBBBBBB {

}
interface I11BBBBBBB is I11BBBBBBBB {

	function f1() override
	external payable returns (uint);
}
interface I11BBBBBB is I11BBBBB, I11BBBBBBB {

	function f0() override(I11BB, I11BBBBBBBBB)
	external view returns (uint);
	function f1() override(I11BBBBB, I11BBBBBBB)
	external payable returns (uint);
}
interface I11 is I11B, I11BBBBB, I11BBBBBB {

	function f0() override(I11B, I11BB, I11BBBBBB)
	external view returns (uint);
	function f1() override(I11BBBBB, I11BBBBBB)
	external payable returns (uint);
}



interface I12BB {

	function f0() external payable returns (uint);
}


interface I12BBBB {

	function f0() external payable returns (uint);
}
interface I12BBB is I12BB, I12BBBB {

	function f0() override(I12BB, I12BBBB)
	external payable returns (uint);
}
interface I12B is I12BB, I12BBB {

	function f0() override(I12BB, I12BBB)
	external payable returns (uint);
}
interface I12 is I12B {

	function f0() override
	external payable returns (uint);
	function f1() external view returns (uint);
	function f2() external payable returns (uint);
}




interface I13BBB {

	function f0() external view returns (uint);
}
interface I13BB is I13BBB {

	function f0() override
	external view returns (uint);
}
interface I13B is I13BB {

}
interface I13 is I13B {

	function f1() external view returns (uint);
}





interface I14BBBB {

	function f0() external view returns (uint);
}
interface I14BBB is I14BBBB {

	function f0() override
	external view returns (uint);
}
interface I14BB is I14BBB {

	function f0() override
	external view returns (uint);
}
interface I14B is I14BB {

	function f0() override
	external view returns (uint);
}
interface I14 is I14B {

	function f0() override
	external view returns (uint);
}



interface I15BB {

	function f0() external view returns (uint);
}
interface I15B is I15BB {

	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I15 is I15B {

}
library L16 {

	function f0(uint) private pure returns (uint)
	{
		return 2044897763;
	}
}


contract C {
	using L0 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1804289383)
			return 1;
		return 0;
	}
}

