pragma solidity >=0.0;
contract C0BBB {
	function f0() external pure
	
	returns (uint)
	{
		return 48271;
	}
}
contract C0BB is C0BBB {
}
contract C0B is C0BB {
}
contract C0 is C0B {
}
contract C1BBB {
	function f0() virtual public pure
	
	returns (uint)
	{
		return 1914720637;
	}
}
contract C1BBBB is C1BBB {
}
contract C1BB is C1BBB, C1BBBB {
}
contract C1B is C1BB {
}
contract C1 is C1B {
	function f1() virtual public pure
	
	returns (uint)
	{
		return 1203428207;
	}
}
contract C2BBB {
	function f0() external pure
	
	returns (uint)
	{
		return 1250328747;
	}
}
contract C2BB is C2BBB {
}
abstract contract C2B is C2BB {
}
contract C2 is C2B {
}
interface I3BBB {
	function f0() external payable returns (uint);
}
interface I3BB is I3BBB {
}
interface I3B is I3BB {
	function f0() override
	external payable returns (uint);
}
interface I3 is I3B {
}
library L4 {
	function f0(uint) private pure returns (uint)
	{
		return 846930886;
	}
	function f1(uint) external pure returns (uint)
	{
		return 1681692777;
	}
}
interface C5BB {
	function f0() external view returns (uint);
}
interface C5B is C5BB {
}
contract C5 is C5B {
	function f0() external view
	override
	returns (uint)
	{
		return 1936030137;
	}
}
library L6 {
	function f0(uint) private pure returns (uint)
	{
		return 1714636915;
	}
}
interface C7BB {
	function f0() external view returns (uint);
}
interface C7B is C7BB {
	function f0() override
	external view returns (uint);
}
contract C7 is C7B {
	function f0() virtual external view
	override
	returns (uint)
	{
		return 1947433875;
	}
}
contract C {
	using L4 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f1() != 1681692777)
			return 1;
		return 0;
	}
}
