
pragma solidity >=0.0;


library L0 {

	function f0(uint) private pure returns (uint)
	{
		return 1804289383;
	}
	function f1(uint) private pure returns (uint)
	{
		return 846930886;
	}
}


interface I1B {

	function f0() external payable returns (uint);
	function f1() external payable returns (uint);
	function f2() external view returns (uint);
	function f3() external view returns (uint);
	function f4() external view returns (uint);
	function f5() external payable returns (uint);
	function f6() external view returns (uint);
	function f7() external payable returns (uint);
}

interface I1BB is I1B {

	function f0() override
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
	function f4() override
	external view returns (uint);
	function f6() override
	external view returns (uint);
	function f7() override
	external payable returns (uint);
	function f8() external payable returns (uint);
	function f9() external view returns (uint);
	function f10() external payable returns (uint);
	function f11() external view returns (uint);
	function f12() external payable returns (uint);
}
interface I1 is I1B, I1BB {

	function f0() override(I1B, I1BB)
	external payable returns (uint);
	function f1() override(I1B, I1BB)
	external payable returns (uint);
	function f2() override(I1B, I1BB)
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override(I1B, I1BB)
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() override(I1B, I1BB)
	external view returns (uint);
	function f7() override(I1B, I1BB)
	external payable returns (uint);
	function f11() override
	external view returns (uint);
	function f13() external view returns (uint);
	function f14() external view returns (uint);
}


contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}

