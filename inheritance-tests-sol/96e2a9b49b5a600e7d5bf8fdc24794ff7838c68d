pragma solidity >=0.0;
interface C0BBBBBBBBB {
	function f0() external payable returns (uint);
	function f1() external pure returns (uint);
}
interface C0BBBBBBBB is C0BBBBBBBBB {
	function f1() override
	external pure returns (uint);
}
interface C0BBBBBBBBBB is C0BBBBBBBBB {
	function f2() external payable returns (uint);
}
interface C0BBBBBBB is C0BBBBBBBB, C0BBBBBBBBBB {
	function f1() override(C0BBBBBBBB, C0BBBBBBBBB)
	external pure returns (uint);
	function f3() external view returns (uint);
	function f4() external view returns (uint);
}
interface C0BBBBBB is C0BBBBBBB {
}
interface C0BBBBBBBBBBB is C0BBBBBB {
	function f2() override
	external payable returns (uint);
	function f5() external view returns (uint);
}
interface C0BBBBB is C0BBBBBB, C0BBBBBBBBBBB {
	function f1() override
	external pure returns (uint);
	function f2() override(C0BBBBBBBBBB, C0BBBBBBBBBBB)
	external payable returns (uint);
	function f5() override
	external view returns (uint);
	function f6() external view returns (uint);
}
contract C0BBBB is C0BBBBB {
	function f0() virtual external payable
	override
	returns (uint)
	{
		return 1947433875;
	}
	function f1() external pure
	override
	returns (uint)
	{
		return 2010567813;
	}
	function f2() virtual external payable
	override
	returns (uint)
	{
		return 662405787;
	}
	function f3() virtual external view
	override
	returns (uint)
	{
		return 849178936;
	}
	function f4() external view
	override
	returns (uint)
	{
		return 1479919876;
	}
	function f5() external view
	override
	returns (uint)
	{
		return 1272185027;
	}
	function f6() external view
	override
	returns (uint)
	{
		return 1308858262;
	}
}
contract C0BBB is C0BBBB {
	function f3() external view
	override
	returns (uint)
	{
		return 153892771;
	}
}
contract C0BB is C0BBB {
	function f2() external payable
	override
	returns (uint)
	{
		return 389431516;
	}
}
contract C0B is C0BB {
}
contract C0BBBBBBBBBBBB is C0BB {
}
contract C0 is C0B, C0BBBBBBBBBBBB {
}
interface C1BBBB {
	function f0() external payable returns (uint);
}
interface C1BBB is C1BBBB {
}
contract C1BB is C1BBB {
	function f0() virtual external payable
	override
	returns (uint)
	{
		return 352020689;
	}
	function f1() external pure
	
	returns (uint)
	{
		return 1500063655;
	}
	function f2() external pure
	
	returns (uint)
	{
		return 719080959;
	}
}
contract C1B is C1BB {
}
contract C1BBBBB is C1BB {
}
contract C1 is C1B, C1BBBBB {
	function f0() virtual external payable
	override
	returns (uint)
	{
		return 1003765604;
	}
	function f3() public payable
	
	returns (uint)
	{
		return 1243427070;
	}
}
interface C2BBBB {
	function f0() external payable returns (uint);
}
interface C2BBB is C2BBBB {
}
contract C2BB is C2BBB {
	function f0() virtual external payable
	override
	returns (uint)
	{
		return 1788215331;
	}
	function f1() external pure
	
	returns (uint)
	{
		return 837051536;
	}
	function f2() external pure
	
	returns (uint)
	{
		return 409875951;
	}
}
contract C2B is C2BB {
}
contract C2BBBBB is C2BB {
}
contract C2 is C2B, C2BBBBB {
	function f0() virtual external payable
	override
	returns (uint)
	{
		return 1318652553;
	}
	function f3() public payable
	
	returns (uint)
	{
		return 1262088783;
	}
}
library L3 {
	function f0(uint) public view returns (uint)
	{
		return 424238335;
	}
	function f1(uint) public pure returns (uint)
	{
		return 719885386;
	}
}
contract C {
	using L3 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 424238335)
			return 1;
		return 0;
	}
}
