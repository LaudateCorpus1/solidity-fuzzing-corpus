
pragma solidity >=0.0;





interface I0BB {

	function f0() external view returns (uint);
}
interface I0B is I0BB {

	function f1() external view returns (uint);
}
interface I0 is I0B {

	function f0() override
	external view returns (uint);
}





interface I1BBBB {

	function f0() external view returns (uint);
}
interface I1BBB is I1BBBB {

	function f1() external payable returns (uint);
}

interface I1BBBBB is I1BBBB {

	function f1() external payable returns (uint);
}
interface I1BB is I1BBB, I1BBBBB {

	function f1() override(I1BBB, I1BBBBB)
	external payable returns (uint);
}
interface I1B is I1BB {

	function f2() external payable returns (uint);
}


interface I1BBBBBBB {

	function f0() external view returns (uint);
}
interface I1BBBBBB is I1B, I1BBBBBBB {

	function f0() override(I1BBBB, I1BBBBBBB)
	external view returns (uint);
	function f3() external payable returns (uint);
}
interface I1 is I1B, I1BBBBBB {

	function f0() override(I1BBBB, I1BBBBBB)
	external view returns (uint);
	function f2() override
	external payable returns (uint);
}





interface I2BBBB {

	function f0() external view returns (uint);
}
interface I2BBB is I2BBBB {

	function f1() external payable returns (uint);
}
interface I2BB is I2BBB {

	function f1() override
	external payable returns (uint);
}
interface I2B is I2BB {

	function f1() override
	external payable returns (uint);
}

interface I2BBBBB is I2BB {

	function f0() override
	external view returns (uint);
	function f2() external payable returns (uint);
}
interface I2 is I2B, I2BBBBB {

	function f0() override(I2BBBB, I2BBBBB)
	external view returns (uint);
	function f1() override(I2B, I2BB)
	external payable returns (uint);
}


contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}

