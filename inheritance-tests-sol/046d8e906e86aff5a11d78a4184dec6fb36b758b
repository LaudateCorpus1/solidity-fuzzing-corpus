pragma solidity >=0.0;
interface I0BB {
	function f0() external payable returns (uint);
}
interface I0B is I0BB {
}
interface I0 is I0B {
	function f0() override
	external payable returns (uint);
}
interface C1BBBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface C1BBBBBBBBBBBB is C1BBBBBBBBBBBBB {
}
interface C1BBBBBBBBBBBBBB is C1BBBBBBBBBBBBB {
	function f1() external view returns (uint);
}
interface C1BBBBBBBBBBB is C1BBBBBBBBBBBB, C1BBBBBBBBBBBBBB {
}
abstract contract C1BBBBBBBBBB is C1BBBBBBBBBBB {
	function f0() virtual external view
	override
	returns (uint);
	function f1() virtual external view
	override
	returns (uint);
}
contract C1BBBBBBBBB is C1BBBBBBBBBB {
	function f0() virtual external view
	override
	returns (uint)
	{
		return 1559527823;
	}
	function f1() external view
	override
	returns (uint)
	{
		return 638022372;
	}
}
contract C1BBBBBBBB is C1BBBBBBBBB {
	function f0() external view
	override
	returns (uint)
	{
		return 1936030137;
	}
}
contract C1BBBBBBB is C1BBBBBBBB {
	function f2() public view
	
	returns (uint)
	{
		return 353718330;
	}
	function f3() public pure
	
	returns (uint)
	{
		return 1842513780;
	}
}
contract C1BBBBBB is C1BBBBBBB {
}
contract C1BBBBB is C1BBBBBB {
}
contract C1BBBB is C1BBBBB {
}
contract C1BBB is C1BBBB {
	function f4() public view
	
	returns (uint)
	{
		return 662405787;
	}
	function f5() public pure
	
	returns (uint)
	{
		return 1105724094;
	}
}
contract C1BB is C1BBB {
}
contract C1B is C1BB {
}
contract C1 is C1B {
}
contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}
