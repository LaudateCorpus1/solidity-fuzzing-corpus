pragma solidity >=0.0;
interface I0BB {
	function f0() external payable returns (uint);
}
interface I0B is I0BB {
	function f0() override
	external payable returns (uint);
}
interface I0BBB is I0BB {
	function f1() external payable returns (uint);
}
interface I0 is I0B, I0BBB {
	function f0() override(I0B, I0BB)
	external payable returns (uint);
}
interface I1BB {
	function f0() external payable returns (uint);
}
interface I1B is I1BB {
}
interface I1BBB is I1B {
	function f1() external pure returns (uint);
}
interface I1 is I1B, I1BBB {
	function f1() override
	external pure returns (uint);
}
interface I2B {
}
interface I2 is I2B {
}
interface I3BB {
	function f0() external payable returns (uint);
}
interface I3B is I3BB {
	function f0() override
	external payable returns (uint);
}
interface I3BBB is I3BB {
	function f1() external payable returns (uint);
}
interface I3 is I3B, I3BBB {
	function f0() override(I3B, I3BB)
	external payable returns (uint);
}
interface I4BBBB {
	function f0() external view returns (uint);
}
interface I4BBB is I4BBBB {
}
interface I4BB is I4BBB {
	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I4B is I4BB {
	function f1() override
	external payable returns (uint);
}
interface I4 is I4B {
}
contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}
