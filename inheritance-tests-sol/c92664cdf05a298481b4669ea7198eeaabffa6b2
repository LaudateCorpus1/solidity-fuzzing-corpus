
pragma solidity >=0.0;



interface I0 {

	function f0() external view returns (uint);
}











interface I1BBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I1BBBBBBBBB is I1BBBBBBBBBB {

	function f0() override
	external view returns (uint);
}

interface I1BBBBBBBBBBB is I1BBBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I1BBBBBBBB is I1BBBBBBBBB, I1BBBBBBBBBBB {

	function f0() override(I1BBBBBBBBB, I1BBBBBBBBBBB)
	external view returns (uint);
	function f2() external view returns (uint);
}
interface I1BBBBBBB is I1BBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I1BBBBBB is I1BBBBBBB {

	function f0() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
}
interface I1BBBBB is I1BBBBBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I1BBBB is I1BBBBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
}

interface I1BBBBBBBBBBBB is I1BBBB {

	function f0() override
	external view returns (uint);
	function f3() external payable returns (uint);
}
interface I1BBB is I1BBBB, I1BBBBBBBBBBBB {

	function f0() override(I1BBBB, I1BBBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f3() override
	external payable returns (uint);
	function f4() external view returns (uint);
}
interface I1BB is I1BBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f4() override
	external view returns (uint);
}
interface I1B is I1BB {

	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
}
interface I1 is I1B {

	function f1() override
	external payable returns (uint);
	function f3() override
	external payable returns (uint);
}

contract C2 {

	function f0() public payable
	
	returns (uint)
	{
		return 1573232780;
	}
}

interface I3 {

	function f0() external pure returns (uint);
}




interface I4BBB {

}
interface I4BB is I4BBB {

	function f0() external view returns (uint);
}
interface I4B is I4BB {

	function f0() override
	external view returns (uint);
}










interface I4BBBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I4BBBBBBBBBBBB is I4BBBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
}

interface I4BBBBBBBBBBBBBB is I4BBBBBBBBBBBBB {

	function f1() external payable returns (uint);
}
interface I4BBBBBBBBBBB is I4BBBBBBBBBBBB, I4BBBBBBBBBBBBBB {

	function f0() override(I4BBBBBBBBBBBB, I4BBBBBBBBBBBBB)
	external view returns (uint);
	function f2() external view returns (uint);
}
interface I4BBBBBBBBBB is I4BBBBBBBBBBB {

	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
}
interface I4BBBBBBBBB is I4BBBBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I4BBBBBBBB is I4BBBBBBBBB {

}
interface I4BBBBBBB is I4BBBBBBBB {

	function f2() override
	external view returns (uint);
}

interface I4BBBBBBBBBBBBBBB is I4BBBBBBBB {

	function f0() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f3() external payable returns (uint);
}
interface I4BBBBBB is I4BBBBBBB, I4BBBBBBBBBBBBBBB {

	function f0() override(I4BBBBBBBBB, I4BBBBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override(I4BBBBBBB, I4BBBBBBBBBBBBBBB)
	external view returns (uint);
	function f3() override
	external payable returns (uint);
	function f4() external view returns (uint);
}
interface I4BBBBB is I4BBBBBB {

	function f1() override
	external payable returns (uint);
	function f3() override
	external payable returns (uint);
	function f4() override
	external view returns (uint);
}
interface I4BBBB is I4BB, I4BBBBB {

	function f0() override(I4BB, I4BBBBBB)
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override
	external payable returns (uint);
	function f4() override
	external view returns (uint);
}
interface I4 is I4B, I4BBBB {

	function f0() override(I4B, I4BBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f5() external payable returns (uint);
}



interface I5BB {

	function f0() external view returns (uint);
}
interface I5B is I5BB {

	function f0() override
	external view returns (uint);
}
interface I5 is I5B {

	function f0() override
	external view returns (uint);
}




interface I6BBB {

	function f0() external payable returns (uint);
	function f1() external payable returns (uint);
}
interface I6BB is I6BBB {

	function f0() override
	external payable returns (uint);
}
interface I6B is I6BB {

	function f0() override
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}


interface I6BBBBB {

	function f0() external payable returns (uint);
}
interface I6BBBB is I6BB, I6BBBBB {

	function f0() override(I6BB, I6BBBBB)
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() external payable returns (uint);
}
interface I6 is I6B, I6BBBB {

	function f0() override(I6B, I6BBBB)
	external payable returns (uint);
	function f1() override(I6B, I6BBBB)
	external payable returns (uint);
}

interface I7 {

	function f0() external pure returns (uint);
}


contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}

