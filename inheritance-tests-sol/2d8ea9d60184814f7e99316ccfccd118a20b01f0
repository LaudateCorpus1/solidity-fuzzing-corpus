pragma solidity >=0.0;
interface I0BBBBB {
	function f0() external view returns (uint);
}
interface I0BBBB is I0BBBBB {
	function f0() override
	external view returns (uint);
}
interface I0BBBBBB is I0BBBBB {
	function f1() external payable returns (uint);
}
interface I0BBB is I0BBBB, I0BBBBBB {
	function f0() override(I0BBBB, I0BBBBB)
	external view returns (uint);
	function f2() external view returns (uint);
}
interface I0BB is I0BBB {
	function f2() override
	external view returns (uint);
}
interface I0B is I0BB {
	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
}
interface I0 is I0B {
	function f2() override
	external view returns (uint);
}
library L1 {
	function f0(uint) private pure returns (uint)
	{
		return 846930886;
	}
}
interface I2BBB {
	function f0() external view returns (uint);
}
interface I2BBBBB {
	function f0() external view returns (uint);
	function f1() external view returns (uint);
	function f2() external view returns (uint);
	function f3() external payable returns (uint);
	function f4() external payable returns (uint);
}
interface I2BBBB is I2BBB, I2BBBBB {
	function f0() override(I2BBB, I2BBBBB)
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override
	external payable returns (uint);
	function f4() override
	external payable returns (uint);
}
interface I2BB is I2BBB, I2BBBB {
	function f0() override(I2BBB, I2BBBB)
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() external view returns (uint);
}
interface I2B is I2BB {
	function f1() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f5() override
	external view returns (uint);
}
interface I2 is I2B {
	function f2() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override
	external view returns (uint);
}
interface I3BBB {
	function f0() external view returns (uint);
}
interface I3BBBBB {
	function f0() external view returns (uint);
	function f1() external view returns (uint);
	function f2() external view returns (uint);
	function f3() external payable returns (uint);
	function f4() external payable returns (uint);
}
interface I3BBBB is I3BBB, I3BBBBB {
	function f0() override(I3BBB, I3BBBBB)
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
}
interface I3BB is I3BBB, I3BBBB {
	function f0() override(I3BBB, I3BBBB)
	external view returns (uint);
	function f3() override
	external payable returns (uint);
	function f5() external view returns (uint);
}
interface I3B is I3BB {
	function f1() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override
	external payable returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override
	external view returns (uint);
}
interface I3 is I3B {
	function f0() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override
	external view returns (uint);
}
library L4 {
	function f0(uint) external pure returns (uint)
	{
		return 1957747793;
	}
}
contract C5BB {
	function f0() virtual public pure
	
	returns (uint)
	{
		return 456602171;
	}
}
contract C5B is C5BB {
	function f0() virtual public pure
	override
	returns (uint)
	{
		return 267230971;
	}
}
interface C5BBB {
}
contract C5BBBBB {
	function f0() virtual public pure
	
	returns (uint)
	{
		return 2042519933;
	}
}
contract C5BBBB is C5BB, C5BBBBB {
	function f0() virtual public pure
	override(C5BBBBB, C5BB)
	returns (uint)
	{
		return 703050418;
	}
}
abstract contract C5 is C5B, C5BBB, C5BBBB {
	function f0() virtual public pure
	override(C5BBBB, C5B)
	returns (uint)
	{
		return 88703659;
	}
}
contract C9B {
	function f0() virtual public pure
	
	returns (uint)
	{
		return 1933155466;
	}
}
abstract contract C9 is C9B {
}
contract C {
	using L4 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1957747793)
			return 1;
		return 0;
	}
}
