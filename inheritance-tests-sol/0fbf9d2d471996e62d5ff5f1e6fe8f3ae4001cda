
pragma solidity >=0.0;






interface C0BBB {

	function f0() external payable returns (uint);
}
interface C0BB is C0BBB {

	function f0() override
	external payable returns (uint);
}
abstract contract C0B is C0BB {

	function f0() virtual external payable
	override
	returns (uint);
}


abstract contract C0BBBBB {

}
contract C0BBBB is C0BB, C0BBBBB {

	function f0() virtual external payable
	override
	returns (uint)
	{
		return 223870541;
	}
}
contract C0 is C0B, C0BBBB {

	function f0() virtual external payable
	override(C0BBBB, C0B)
	returns (uint)
	{
		return 180753275;
	}
}







interface C1BBBBBB {

	function f0() external view returns (uint);
}
interface C1BBBBB is C1BBBBBB {

}
interface C1BBBB is C1BBBBB {

	function f0() override
	external view returns (uint);
}
interface C1BBB is C1BBBB {

	function f0() override
	external view returns (uint);
}






interface C1BBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface C1BBBBBBBBBBB is C1BBBBBBBBBBBB {

}
interface C1BBBBBBBBBB is C1BBBBBBBBBBB {

}
interface C1BBBBBBBBB is C1BBBBBBBBBB {

}



interface C1BBBBBBBBBBBBBBB {

}
interface C1BBBBBBBBBBBBBB is C1BBBBBBBBBBBBBBB {

}
interface C1BBBBBBBBBBBBB is C1BBBBBBBBBB, C1BBBBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface C1BBBBBBBB is C1BBBBBBBBB, C1BBBBBBBBBBBBB {

	function f0() override(C1BBBBBBBBBBBB, C1BBBBBBBBBBBBB)
	external view returns (uint);
}
interface C1BBBBBBB is C1BBB, C1BBBBBBBB {

	function f0() override(C1BBB, C1BBBBBBBB)
	external view returns (uint);
}
interface C1BB is C1BBB, C1BBBBBBB {

	function f0() override(C1BBB, C1BBBBBBB)
	external view returns (uint);
}
interface C1B is C1BB {

	function f0() override
	external view returns (uint);
}
contract C1 is C1B {

	function f0() external view
	override
	returns (uint)
	{
		return 858901821;
	}
}



abstract contract C2BB {

}
contract C2B is C2BB {

}



interface C2BBBBB {

	function f0() external payable returns (uint);
}
interface C2BBBB is C2BBBBB {

}
interface C2BBB is C2BBBB {

	function f0() override
	external payable returns (uint);
}
contract C2 is C2B, C2BBB {

	function f0() external payable
	override
	returns (uint)
	{
		return 318729750;
	}
}

interface I3 {

	function f0() external view returns (uint);
}



interface C4BB {

	function f0() external payable returns (uint);
}
interface C4B is C4BB {

	function f0() override
	external payable returns (uint);
}
contract C4 is C4B {

	function f0() external payable
	override
	returns (uint)
	{
		return 943587517;
	}
}
library L5 {

	function f0(uint) internal pure returns (uint)
	{
		return 1957747793;
	}
	function f1(uint) internal pure returns (uint)
	{
		return 424238335;
	}
}
library L7 {

	function f0(uint) internal pure returns (uint)
	{
		return 719885386;
	}
}
library L8 {

	function f0(uint) public pure returns (uint)
	{
		return 1649760492;
	}
}

interface I9 {

	function f0() external view returns (uint);
}
library L10 {

	function f0(uint) public view returns (uint)
	{
		return 596516649;
	}
}
library L11 {

	function f0(uint) internal pure returns (uint)
	{
		return 1189641421;
	}
}
library L12 {

	function f0(uint) internal view returns (uint)
	{
		return 1025202362;
	}
}

contract C13 {

	function f0() virtual public pure
	
	returns (uint)
	{
		return 1488084345;
	}
}

interface I14 {

	function f0() external view returns (uint);
}
library L15 {

	function f0(uint) public view returns (uint)
	{
		return 1350490027;
	}
}
library L16 {

	function f0(uint) external pure returns (uint)
	{
		return 783368690;
	}
}


contract C {
	function test() public returns (uint)
	{
			C0 tc0 = new C0();
			if (tc0.f0() != 180753275)
				return 1;
			C0BBBB tc1 = new C0BBBB();
			if (tc1.f0() != 223870541)
				return 2;
			C1 tc2 = new C1();
			if (tc2.f0() != 858901821)
				return 3;
			C13 tc3 = new C13();
			if (tc3.f0() != 1488084345)
				return 4;
			C2 tc4 = new C2();
			if (tc4.f0() != 318729750)
				return 5;
			C4 tc5 = new C4();
			if (tc5.f0() != 943587517)
				return 6;
			return 0;
	}
}

