pragma solidity >=0.0;
interface I0 {
	function f0() external payable returns (uint);
}
interface I1 {
	function f0() external payable returns (uint);
}
interface I2 {
	function f0() external payable returns (uint);
}
interface I3BBBBBB {
}
interface I3BBBBB is I3BBBBBB {
}
interface I3BBBB is I3BBBBB {
}
interface I3BBBBBBBBBB {
}
interface I3BBBBBBBBB is I3BBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I3BBBBBBBB is I3BBBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface I3BBBBBBB is I3BBBBB, I3BBBBBBBB {
}
interface I3BBB is I3BBBB, I3BBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I3BB is I3BBB {
	function f2() external view returns (uint);
}
interface I3B is I3BB {
	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
}
interface I3BBBBBBBBBBBBBB {
}
interface I3BBBBBBBBBBBBB is I3BBBBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I3BBBBBBBBBBBB is I3BBBBBBBBBBBBB {
}
interface I3BBBBBBBBBBB is I3B, I3BBBBBBBBBBBB {
	function f0() override(I3BBB, I3BBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override
	external view returns (uint);
}
interface I3 is I3B, I3BBBBBBBBBBB {
	function f0() override(I3BBB, I3BBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override(I3B, I3BBBBBBBBBBB)
	external view returns (uint);
	function f3() external payable returns (uint);
}
contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}
