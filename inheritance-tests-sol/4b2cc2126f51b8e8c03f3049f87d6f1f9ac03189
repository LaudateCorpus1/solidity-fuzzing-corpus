
pragma solidity >=0.0;




interface I1B {

	function f0() external payable returns (uint);
}
interface I1 is I1B {

	function f1() external payable returns (uint);
}
library L2 {

	function f0(uint) external pure returns (uint)
	{
		return 1681692777;
	}
}





interface I3BBBB {

	function f0() external view returns (uint);
}
interface I3BBB is I3BBBB {

}
interface I3BB is I3BBB {

}
interface I3B is I3BB {

}
interface I3 is I3B {

	function f0() override
	external view returns (uint);
}

interface I5 {

	function f0() external payable returns (uint);
}






interface I6BBBBB {

	function f0() external view returns (uint);
}
interface I6BBBB is I6BBBBB {

}
interface I6BBB is I6BBBB {

	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I6BB is I6BBB {

	function f0() override
	external view returns (uint);
}
interface I6B is I6BB {

	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I6 is I6B {

}




interface I7BBB {

}
interface I7BB is I7BBB {

	function f0() external view returns (uint);
}
interface I7B is I7BB {

	function f0() override
	external view returns (uint);
}



interface I7BBBBBB {

	function f0() external view returns (uint);
}
interface I7BBBBB is I7BBBBBB {

	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I7BBBB is I7BB, I7BBBBB {

	function f0() override(I7BB, I7BBBBB)
	external view returns (uint);
}
interface I7 is I7B, I7BBBB {

	function f0() override(I7B, I7BBBB)
	external view returns (uint);
	function f2() external payable returns (uint);
}


interface I8B {

	function f0() external payable returns (uint);
}
interface I8 is I8B {

	function f1() external payable returns (uint);
}





interface C9BBBB {

	function f0() external payable returns (uint);
}
interface C9BBB is C9BBBB {

}

interface C9BBBBB is C9BBBB {

	function f0() override
	external payable returns (uint);
	function f1() external view returns (uint);
}
interface C9BB is C9BBB, C9BBBBB {

	function f0() override(C9BBBB, C9BBBBB)
	external payable returns (uint);
}
contract C9B is C9BB {

	function f0() external payable
	override
	returns (uint)
	{
		return 153892771;
	}
	function f1() virtual external view
	override
	returns (uint)
	{
		return 480194461;
	}
}
abstract contract C9 is C9B {

}





interface I10BBBB {

	function f0() external view returns (uint);
}
interface I10BBB is I10BBBB {

	function f0() override
	external view returns (uint);
}
interface I10BB is I10BBB {

}
interface I10B is I10BB {

}
interface I10 is I10B {

}


contract C {
	using L2 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1681692777)
			return 1;
		return 0;
	}
}

