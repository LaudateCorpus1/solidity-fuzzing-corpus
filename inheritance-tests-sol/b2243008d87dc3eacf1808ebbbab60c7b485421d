pragma solidity >=0.0;
interface I0B {
	function f0() external payable returns (uint);
}
interface I0BBBBBBBB {
	function f0() external payable returns (uint);
}
interface I0BBBBBBB is I0BBBBBBBB {
	function f1() external view returns (uint);
}
interface I0BBBBBB is I0BBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I0BBBBBBBBBB {
}
interface I0BBBBBBBBB is I0BBBBBB, I0BBBBBBBBBB {
}
interface I0BBBBB is I0BBBBBB, I0BBBBBBBBB {
}
interface I0BBBB is I0BBBBB {
}
interface I0BBB is I0BBBB {
}
interface I0BBBBBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I0BBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I0BBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBB {
}
interface I0BBBBBBBBBBBBB is I0BBBBBBBBBBBBBB {
}
interface I0BBBBBBBBBBBB is I0BBBBBBBBBBBBB {
}
interface I0BBBBBBBBBBB is I0BBBB, I0BBBBBBBBBBBB {
	function f0() override(I0BBBBBB, I0BBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override
	external view returns (uint);
}
interface I0BB is I0B, I0BBB, I0BBBBBBBBBBB {
	function f0() override(I0B, I0BBBBBB, I0BBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I0BBBBBBB, I0BBBBBBBBBBB)
	external view returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBBBBBBBBBB {
}
interface I0BBBBBBBBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBBBBBBBBB {
}
interface I0BBBBBBBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBBBBBBBB {
}
interface I0BBBBBBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I0BBBBBBBBBBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() external view returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I0BBBBBBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f1() override
	external view returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I0BBBBBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I0BBBBBBBBBBBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBBBB {
	function f1() override
	external view returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBBB {
	function f1() override
	external view returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
}
interface I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
}
interface I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I0BBBBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
}
interface I0BBBBBBBBBBBBBBBBB is I0BB, I0BBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I0BB, I0BBBBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I0BB, I0BBBBBBBBBBBBBBBBBB)
	external view returns (uint);
}
interface I0 is I0B, I0BB, I0BBBBBBBBBBBBBBBBB {
	function f0() override(I0B, I0BB, I0BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I0BB, I0BBBBBBBBBBBBBBBBB)
	external view returns (uint);
}
interface I1B {
	function f0() external payable returns (uint);
}
interface I1BBBBB {
	function f0() external payable returns (uint);
}
interface I1BBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I1BBBBBBBB is I1BBBBBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() external view returns (uint);
}
interface I1BBBBBBB is I1BBBBBBBB {
}
interface I1BBBBBBBBBBB {
}
interface I1BBBBBBBBBB is I1BBBBBBBB, I1BBBBBBBBBBB {
	function f1() override
	external view returns (uint);
}
interface I1BBBBBB is I1BBBBB, I1BBBBBBB, I1BBBBBBBBBB {
	function f0() override(I1BBBBB, I1BBBBBBBB)
	external payable returns (uint);
	function f1() override(I1BBBBBBBB, I1BBBBBBBBBB)
	external view returns (uint);
}
interface I1BBBB is I1BBBBB, I1BBBBBB {
	function f0() override(I1BBBBB, I1BBBBBB)
	external payable returns (uint);
	function f1() override
	external view returns (uint);
}
interface I1BBB is I1BBBB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external view returns (uint);
}
interface I1BBBBBBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBBB {
}
interface I1BBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBB {
}
interface I1BBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBB {
}
interface I1BBBBBBBBBBBBB is I1BBBBBBBBBBBBBB {
}
interface I1BBBBBBBBBBBB is I1BBB, I1BBBBBBBBBBBBB {
	function f0() override(I1BBB, I1BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
}
interface I1BB is I1B, I1BBB, I1BBBBBBBBBBBB {
	function f0() override(I1B, I1BBB, I1BBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override
	external view returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBBBBBBBBBBBBB {
}
interface I1BBBBBBBBBBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBBBBBBBBBBB {
}
interface I1BBBBBBBBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I1BBBBBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() external view returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I1BBBBBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
}
interface I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external view returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I1BBBBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I1BBBBBBBBBBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBBBBBBB {
}
interface I1BBBBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBBBBBB {
	function f1() override
	external view returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
}
interface I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
}
interface I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
}
interface I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
}
interface I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I1BBBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override
	external view returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBB is I1BB, I1BBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I1BB, I1BBBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I1BB, I1BBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
}
interface I1 is I1B, I1BB, I1BBBBBBBBBBBBBBBBBB {
	function f0() override(I1B, I1BB, I1BBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I1BB, I1BBBBBBBBBBBBBBBBBB)
	external view returns (uint);
}
contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}
