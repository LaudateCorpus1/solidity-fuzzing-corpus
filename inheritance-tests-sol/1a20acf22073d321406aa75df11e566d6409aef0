
pragma solidity >=0.0;


library L0 {

	function f0(uint) public pure returns (uint)
	{
		return 1804289383;
	}
	function f1(uint) public view returns (uint)
	{
		return 846930886;
	}
}




interface C1BBB {

	function f0() external view returns (uint);
	function f1() external payable returns (uint);
}
interface C1BB is C1BBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}
interface C1B is C1BB {

	function f0() override
	external view returns (uint);
}
contract C1 is C1B {

	function f0() virtual external view
	override
	returns (uint)
	{
		return 85104760;
	}
	function f1() virtual external payable
	override
	returns (uint)
	{
		return 379178538;
	}
}














interface I2BBBBBBBBBBBBB {

	function f0() external view returns (uint);
}

interface I2BBBBBBBBBBBBBB is I2BBBBBBBBBBBBB {

	function f1() external view returns (uint);
}
interface I2BBBBBBBBBBBB is I2BBBBBBBBBBBBB, I2BBBBBBBBBBBBBB {

	function f1() override
	external view returns (uint);
	function f2() external view returns (uint);
	function f3() external view returns (uint);
}
interface I2BBBBBBBBBBB is I2BBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
}
interface I2BBBBBBBBBB is I2BBBBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
}
interface I2BBBBBBBBB is I2BBBBBBBBBB {

	function f2() override
	external view returns (uint);
	function f4() external payable returns (uint);
}
interface I2BBBBBBBB is I2BBBBBBBBB {

	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
}

interface I2BBBBBBBBBBBBBBB is I2BBBBBBBBB {

	function f1() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() external payable returns (uint);
}
interface I2BBBBBBB is I2BBBBBBBB, I2BBBBBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f1() override(I2BBBBBBBBBBB, I2BBBBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override(I2BBBBBBBBB, I2BBBBBBBBBBBBBBB)
	external view returns (uint);
	function f3() override(I2BBBBBBBB, I2BBBBBBBBBBBB)
	external view returns (uint);
	function f4() override(I2BBBBBBBB, I2BBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f6() external payable returns (uint);
	function f7() external pure returns (uint);
	function f8() external view returns (uint);
	function f9() external payable returns (uint);
}
interface I2BBBBBB is I2BBBBBBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() override
	external payable returns (uint);
	function f7() override
	external pure returns (uint);
	function f8() override
	external view returns (uint);
}
interface I2BBBBB is I2BBBBBB {

	function f0() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f7() override
	external pure returns (uint);
	function f8() override
	external view returns (uint);
	function f9() override
	external payable returns (uint);
	function f10() external payable returns (uint);
}

interface I2BBBBBBBBBBBBBBBB is I2BBBBBB {

	function f0() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override
	external payable returns (uint);
	function f8() override
	external view returns (uint);
	function f9() override
	external payable returns (uint);
	function f10() external payable returns (uint);
}
interface I2BBBB is I2BBBBB, I2BBBBBBBBBBBBBBBB {

	function f0() override(I2BBBBB, I2BBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override(I2BBBBBB, I2BBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f4() override(I2BBBBBBB, I2BBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f5() override(I2BBBBB, I2BBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f6() override
	external payable returns (uint);
	function f7() override(I2BBBBB, I2BBBBBB)
	external pure returns (uint);
	function f8() override(I2BBBBB, I2BBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f9() override(I2BBBBB, I2BBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f10() override(I2BBBBB, I2BBBBBBBBBBBBBBBB)
	external payable returns (uint);
}

interface I2BBBBBBBBBBBBBBBBB is I2BBBBB {

	function f1() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() override
	external payable returns (uint);
	function f7() override
	external pure returns (uint);
	function f10() override
	external payable returns (uint);
	function f11() external payable returns (uint);
}
interface I2BBB is I2BBBB, I2BBBBBBBBBBBBBBBBB {

	function f0() override(I2BBBB, I2BBBBB)
	external view returns (uint);
	function f1() override(I2BBBBBB, I2BBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override(I2BBBB, I2BBBBBBB)
	external view returns (uint);
	function f3() override(I2BBBB, I2BBBBBB)
	external view returns (uint);
	function f4() override(I2BBBB, I2BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f5() override(I2BBBB, I2BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f6() override(I2BBBB, I2BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f7() override(I2BBBB, I2BBBBBBBBBBBBBBBBB)
	external pure returns (uint);
	function f8() override(I2BBBB, I2BBBBB)
	external view returns (uint);
	function f9() override(I2BBBB, I2BBBBB)
	external payable returns (uint);
	function f10() override(I2BBBB, I2BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f11() override
	external payable returns (uint);
	function f12() external view returns (uint);
}
interface I2BB is I2BBB {

	function f0() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f7() override
	external pure returns (uint);
	function f8() override
	external view returns (uint);
	function f10() override
	external payable returns (uint);
	function f12() override
	external view returns (uint);
}
interface I2B is I2BB {

	function f0() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f8() override
	external view returns (uint);
	function f9() override
	external payable returns (uint);
	function f12() override
	external view returns (uint);
}

interface I2BBBBBBBBBBBBBBBBBB is I2B {

	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f6() override
	external payable returns (uint);
	function f9() override
	external payable returns (uint);
	function f11() override
	external payable returns (uint);
	function f13() external payable returns (uint);
}
interface I2 is I2B, I2BBBBBBBBBBBBBBBBBB {

	function f0() override(I2B, I2BBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I2BBB, I2BBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() override(I2BBB, I2BBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f8() override
	external view returns (uint);
	function f9() override(I2B, I2BBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f11() override(I2BBB, I2BBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
}


interface I3B {

	function f0() external view returns (uint);
}
interface I3 is I3B {

	function f0() override
	external view returns (uint);
}


contract C {
	using L0 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1804289383)
			return 1;
		return 0;
	}
}

