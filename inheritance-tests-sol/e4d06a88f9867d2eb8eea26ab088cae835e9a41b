
pragma solidity >=0.0;











interface C0BBBBBBBB {

	function f0() external payable returns (uint);
	function f1() external pure returns (uint);
}
interface C0BBBBBBB is C0BBBBBBBB {

	function f1() override
	external pure returns (uint);
}
interface C0BBBBBB is C0BBBBBBB {

	function f2() external view returns (uint);
	function f3() external view returns (uint);
}
interface C0BBBBB is C0BBBBBB {

}

interface C0BBBBBBBBB is C0BBBBBB {

	function f4() external view returns (uint);
}
interface C0BBBB is C0BBBBB, C0BBBBBBBBB {

	function f1() override
	external pure returns (uint);
	function f4() override
	external view returns (uint);
}
contract C0BBB is C0BBBB {

	function f0() virtual external payable
	override
	returns (uint)
	{
		return 1402304087;
	}
	function f1() external pure
	override
	returns (uint)
	{
		return 2064876628;
	}
	function f2() virtual external view
	override
	returns (uint)
	{
		return 1842513780;
	}
	function f3() external view
	override
	returns (uint)
	{
		return 631416347;
	}
	function f4() external view
	override
	returns (uint)
	{
		return 890442452;
	}
}
contract C0BB is C0BBB {

	function f0() virtual external payable
	override
	returns (uint)
	{
		return 1696049367;
	}
	function f2() external view
	override
	returns (uint)
	{
		return 1272185027;
	}
}
contract C0B is C0BB {

	function f0() virtual external payable
	override
	returns (uint)
	{
		return 1287522347;
	}
}
contract C0 is C0B {

	function f0() external payable
	override
	returns (uint)
	{
		return 153892771;
	}
}




interface C1BBB {

	function f0() external payable returns (uint);
}
contract C1BB is C1BBB {

	function f0() virtual external payable
	override
	returns (uint)
	{
		return 480194461;
	}
}
contract C1B is C1BB {

}

abstract contract C1BBBB is C1B {

}
contract C1 is C1B, C1BBBB {

	function f0() external payable
	override
	returns (uint)
	{
		return 942409124;
	}
}


interface I3B {

	function f0() external view returns (uint);
}
interface I3 is I3B {

	function f0() override
	external view returns (uint);
}


interface I4B {

	function f0() external payable returns (uint);
	function f1() external view returns (uint);
}
interface I4 is I4B {

	function f0() override
	external payable returns (uint);
	function f1() override
	external view returns (uint);
}


abstract contract C5B {

}
contract C5 is C5B {

	function f0() public view
	
	returns (uint)
	{
		return 1779057140;
	}
}


contract C {
	function test() public returns (uint)
	{
			C0 tc0 = new C0();
			if (tc0.f0() != 153892771)
				return 1;
			if (tc0.f1() != 2064876628)
				return 2;
			if (tc0.f2() != 1272185027)
				return 3;
			if (tc0.f3() != 631416347)
				return 4;
			if (tc0.f4() != 890442452)
				return 5;
			C0B tc1 = new C0B();
			if (tc1.f0() != 1287522347)
				return 6;
			if (tc1.f1() != 2064876628)
				return 7;
			if (tc1.f2() != 1272185027)
				return 8;
			if (tc1.f3() != 631416347)
				return 9;
			if (tc1.f4() != 890442452)
				return 10;
			C0BB tc2 = new C0BB();
			if (tc2.f0() != 1696049367)
				return 11;
			if (tc2.f1() != 2064876628)
				return 12;
			if (tc2.f2() != 1272185027)
				return 13;
			if (tc2.f3() != 631416347)
				return 14;
			if (tc2.f4() != 890442452)
				return 15;
			C0BBB tc3 = new C0BBB();
			if (tc3.f0() != 1402304087)
				return 16;
			if (tc3.f1() != 2064876628)
				return 17;
			if (tc3.f2() != 1842513780)
				return 18;
			if (tc3.f3() != 631416347)
				return 19;
			if (tc3.f4() != 890442452)
				return 20;
			C1 tc4 = new C1();
			if (tc4.f0() != 942409124)
				return 21;
			C1B tc5 = new C1B();
			if (tc5.f0() != 480194461)
				return 22;
			C1BB tc6 = new C1BB();
			if (tc6.f0() != 480194461)
				return 23;
			C5 tc7 = new C5();
			if (tc7.f0() != 1779057140)
				return 24;
			return 0;
	}
}

