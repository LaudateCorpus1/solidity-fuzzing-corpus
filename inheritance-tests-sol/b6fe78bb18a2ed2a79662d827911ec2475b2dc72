pragma solidity >=0.0;
interface C0BBBBBBBB {
	function f0() external view returns (uint);
	function f1() external pure returns (uint);
}
interface C0BBBBBBB is C0BBBBBBBB {
	function f1() override
	external pure returns (uint);
}
interface C0BBBBBB is C0BBBBBBB {
	function f2() external view returns (uint);
	function f3() external view returns (uint);
}
interface C0BBBBB is C0BBBBBB {
}
interface C0BBBBBBBBB is C0BBBBBB {
	function f4() external view returns (uint);
}
interface C0BBBB is C0BBBBB, C0BBBBBBBBB {
	function f1() override
	external pure returns (uint);
	function f4() override
	external view returns (uint);
}
contract C0BBB is C0BBBB {
	function f0() virtual external view
	override
	returns (uint)
	{
		return 1402304087;
	}
	function f1() external pure
	override
	returns (uint)
	{
		return 2064876628;
	}
	function f2() virtual external view
	override
	returns (uint)
	{
		return 1842513780;
	}
	function f3() external view
	override
	returns (uint)
	{
		return 631416347;
	}
	function f4() external view
	override
	returns (uint)
	{
		return 890442452;
	}
}
contract C0BB is C0BBB {
	function f0() virtual external view
	override
	returns (uint)
	{
		return 1696049367;
	}
	function f2() external view
	override
	returns (uint)
	{
		return 1272185027;
	}
}
contract C0B is C0BB {
	function f0() virtual external view
	override
	returns (uint)
	{
		return 1287522347;
	}
}
contract C0 is C0B {
	function f0() external view
	override
	returns (uint)
	{
		return 153892771;
	}
}
contract C1BB {
	function f0() virtual public pure
	
	returns (uint)
	{
		return 412013968;
	}
}
contract C1B is C1BB {
}
interface C1BBB {
}
contract C1BBBBB {
	function f0() virtual public pure
	
	returns (uint)
	{
		return 180318217;
	}
}
contract C1BBBB is C1B, C1BBBBB {
	function f0() virtual public pure
	override(C1BBBBB, C1BB)
	returns (uint)
	{
		return 1324346645;
	}
}
abstract contract C1 is C1B, C1BBB, C1BBBB {
	function f0() public pure
	override(C1BBBB, C1BB)
	returns (uint)
	{
		return 942409124;
	}
}
library L2 {
	function f0(uint) external pure returns (uint)
	{
		return 1714636915;
	}
}
library L3 {
	function f0(uint) external pure returns (uint)
	{
		return 1957747793;
	}
}
interface C4BBBBBBBB {
	function f0() external view returns (uint);
	function f1() external pure returns (uint);
}
interface C4BBBBBBB is C4BBBBBBBB {
	function f1() override
	external pure returns (uint);
}
interface C4BBBBBB is C4BBBBBBB {
	function f2() external view returns (uint);
	function f3() external view returns (uint);
}
interface C4BBBBB is C4BBBBBB {
	function f1() override
	external pure returns (uint);
}
interface C4BBBBBBBBB is C4BBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external pure returns (uint);
	function f2() override
	external view returns (uint);
	function f4() external view returns (uint);
}
interface C4BBBB is C4BBBBB, C4BBBBBBBBB {
	function f0() override(C4BBBBBBBB, C4BBBBBBBBB)
	external view returns (uint);
	function f1() override(C4BBBBB, C4BBBBBBBBB)
	external pure returns (uint);
	function f2() override(C4BBBBBB, C4BBBBBBBBB)
	external view returns (uint);
	function f3() override
	external view returns (uint);
}
contract C4BBB is C4BBBB {
	function f0() external view
	override
	returns (uint)
	{
		return 355190910;
	}
	function f1() external pure
	override
	returns (uint)
	{
		return 2127735996;
	}
	function f2() external view
	override
	returns (uint)
	{
		return 1869683330;
	}
	function f3() virtual external view
	override
	returns (uint)
	{
		return 1444510476;
	}
	function f4() external view
	override
	returns (uint)
	{
		return 1262088783;
	}
}
contract C4BB is C4BBB {
	function f3() external view
	override
	returns (uint)
	{
		return 1273555394;
	}
}
contract C4B is C4BB {
}
contract C4 is C4B {
}
contract C {
	using L3 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1957747793)
			return 1;
		return 0;
	}
}
