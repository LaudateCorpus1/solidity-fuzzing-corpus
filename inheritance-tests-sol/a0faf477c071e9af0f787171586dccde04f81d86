
pragma solidity >=0.0;













interface I0BBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I0BBBBBBBBB is I0BBBBBBBBBB {

	function f0() override
	external view returns (uint);
}

interface I0BBBBBBBBBBB is I0BBBBBBBBBB {

	function f1() external payable returns (uint);
}
interface I0BBBBBBBB is I0BBBBBBBBB, I0BBBBBBBBBBB {

	function f0() override(I0BBBBBBBBB, I0BBBBBBBBBB)
	external view returns (uint);
	function f2() external payable returns (uint);
	function f3() external view returns (uint);
}
interface I0BBBBBBB is I0BBBBBBBB {

	function f2() override
	external payable returns (uint);
}
interface I0BBBBBB is I0BBBBBBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I0BBBBB is I0BBBBBB {

	function f0() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f4() external payable returns (uint);
}
interface I0BBBB is I0BBBBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() external payable returns (uint);
	function f6() external view returns (uint);
}

interface I0BBBBBBBBBBBB is I0BBBB {

	function f1() override
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() override
	external view returns (uint);
	function f7() external payable returns (uint);
}
interface I0BBB is I0BBBB, I0BBBBBBBBBBBB {

	function f1() override(I0BBBB, I0BBBBBBBBBBBB)
	external payable returns (uint);
	function f2() override(I0BBBB, I0BBBBBBBBBBBB)
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f5() override(I0BBBB, I0BBBBBBBBBBBB)
	external payable returns (uint);
	function f6() override(I0BBBB, I0BBBBBBBBBBBB)
	external view returns (uint);
	function f7() override
	external payable returns (uint);
	function f8() external view returns (uint);
}
interface I0BB is I0BBB {

	function f1() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f7() override
	external payable returns (uint);
}
interface I0B is I0BB {

	function f1() override
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override
	external payable returns (uint);
	function f7() override
	external payable returns (uint);
}
interface I0 is I0B {

	function f1() override
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() override
	external view returns (uint);
}


contract C1B {

}
contract C1 is C1B {

	function f0() public view
	
	returns (uint)
	{
		return 2042519933;
	}
}










interface I2BBBBBBBBB {

}
interface I2BBBBBBBB is I2BBBBBBBBB {

	function f0() external view returns (uint);
}
interface I2BBBBBBB is I2BBBBBBBB {

	function f0() override
	external view returns (uint);
}



interface I2BBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I2BBBBBBBBBBB is I2BBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I2BBBBBBBBBB is I2BBBBBBBB, I2BBBBBBBBBBB {

	function f0() override(I2BBBBBBBB, I2BBBBBBBBBBB)
	external view returns (uint);
}
interface I2BBBBBB is I2BBBBBBB, I2BBBBBBBBBB {

	function f0() override(I2BBBBBBB, I2BBBBBBBBBB)
	external view returns (uint);
	function f2() external payable returns (uint);
}
interface I2BBBBB is I2BBBBBB {

	function f3() external view returns (uint);
}
interface I2BBBB is I2BBBBB {

}
interface I2BBB is I2BBBB {

	function f3() override
	external view returns (uint);
	function f4() external payable returns (uint);
}
interface I2BB is I2BBB {

	function f0() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() external view returns (uint);
}
interface I2B is I2BB {

	function f1() override
	external payable returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override
	external view returns (uint);
}

interface I2BBBBBBBBBBBBB is I2BB {

	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override
	external view returns (uint);
}
interface I2 is I2B, I2BBBBBBBBBBBBB {

	function f1() override(I2B, I2BBBBBBBBBBB)
	external payable returns (uint);
	function f3() override(I2BB, I2BBBBBBBBBBBBB)
	external view returns (uint);
	function f4() override(I2B, I2BBBBBBBBBBBBB)
	external payable returns (uint);
	function f5() override(I2B, I2BBBBBBBBBBBBB)
	external view returns (uint);
	function f6() external payable returns (uint);
}
library L3 {

	function f0(uint) public pure returns (uint)
	{
		return 1957747793;
	}
}

contract C4 {

	function f0() public payable
	
	returns (uint)
	{
		return 442457806;
	}
	function f1() internal pure
	
	returns (uint)
	{
		return 1155884011;
	}
}



interface C6BB {

	function f0() external view returns (uint);
}
interface C6B is C6BB {

	function f0() override
	external view returns (uint);
}
contract C6 is C6B {

	function f0() virtual external view
	override
	returns (uint)
	{
		return 564522658;
	}
}
library L7 {

	function f0(uint) private pure returns (uint)
	{
		return 719885386;
	}
}



contract C8BB {

	function f0() virtual public pure
	
	returns (uint)
	{
		return 653227535;
	}
}
contract C8B is C8BB {

	function f0() public pure
	override
	returns (uint)
	{
		return 80154250;
	}
}



contract C8BBBBB {

}
contract C8BBBB is C8BBBBB {

}
abstract contract C8BBB is C8B, C8BBBB {

}
contract C8 is C8B, C8BBB {

	function f1() public view
	
	returns (uint)
	{
		return 441336099;
	}
}

contract C9 {

	function f0() public view
	
	returns (uint)
	{
		return 697056589;
	}
}


contract C {
	using L3 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1957747793)
			return 1;
		return 0;
	}
}

