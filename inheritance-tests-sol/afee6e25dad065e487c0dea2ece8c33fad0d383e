pragma solidity >=0.0;
interface C2BBBBB {
	function f0() external payable returns (uint);
	function f1() external pure returns (uint);
}
interface C2BBBB is C2BBBBB {
	function f1() override
	external pure returns (uint);
}
interface C2BBB is C2BBBB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external pure returns (uint);
	function f2() external view returns (uint);
	function f3() external view returns (uint);
}
interface C2BB is C2BBB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external pure returns (uint);
}
abstract contract C2B is C2BB {
	function f0() virtual external payable
	override
	returns (uint);
	function f1() virtual external pure
	override
	returns (uint);
	function f2() virtual external view
	override
	returns (uint)
	{
		return 1074502796;
	}
	function f3() virtual external view
	override
	returns (uint)
	{
		return 1708215671;
	}
}
interface C2BBBBBBB {
}
abstract contract C2BBBBBB is C2BB, C2BBBBBBB {
	function f0() virtual external payable
	override
	returns (uint)
	{
		return 2019399742;
	}
	function f1() virtual external pure
	override
	returns (uint);
	function f2() virtual external view
	override
	returns (uint)
	{
		return 614044814;
	}
	function f3() virtual external view
	override
	returns (uint)
	{
		return 1461468348;
	}
}
contract C2 is C2B, C2BBBBBB {
	function f0() virtual external payable
	override(C2BBBBBB, C2B)
	returns (uint)
	{
		return 1414639022;
	}
	function f1() virtual external pure
	override(C2BBBBBB, C2B)
	returns (uint)
	{
		return 1491661128;
	}
	function f2() external view
	override(C2BBBBBB, C2B)
	returns (uint)
	{
		return 12838079;
	}
	function f3() external view
	override(C2BBBBBB, C2B)
	returns (uint)
	{
		return 643531235;
	}
	function f4() virtual public pure
	
	returns (uint)
	{
		return 545290830;
	}
}
library L3 {
	function f0(uint) private pure returns (uint)
	{
		return 424238335;
	}
	function f1(uint) private pure returns (uint)
	{
		return 719885386;
	}
}
contract C {
	function test() public returns (uint)
	{
			C2 tc0 = new C2();
			if (tc0.f0() != 1414639022)
				return 1;
			if (tc0.f1() != 1491661128)
				return 2;
			if (tc0.f2() != 12838079)
				return 3;
			if (tc0.f3() != 643531235)
				return 4;
			if (tc0.f4() != 545290830)
				return 5;
			return 0;
	}
}
