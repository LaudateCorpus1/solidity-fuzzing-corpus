
pragma solidity >=0.0;





interface I0BB {

	function f0() external payable returns (uint);
	function f1() external view returns (uint);
}
interface I0B is I0BB {

	function f1() override
	external view returns (uint);
}

interface I0BBB is I0BB {

}
interface I0 is I0B, I0BBB {

	function f1() override(I0B, I0BB)
	external view returns (uint);
}






interface I1BBBBB {

	function f0() external payable returns (uint);
}
interface I1BBBB is I1BBBBB {

}
interface I1BBB is I1BBBB {

	function f1() external view returns (uint);
}
interface I1BB is I1BBB {

}

interface I1BBBBBB is I1BB {

	function f2() external payable returns (uint);
}
interface I1B is I1BB, I1BBBBBB {

	function f0() override
	external payable returns (uint);
}
interface I1 is I1B {

	function f1() override
	external view returns (uint);
}


interface I2B {

	function f0() external payable returns (uint);
}
interface I2 is I2B {

}


interface I3B {

	function f0() external payable returns (uint);
}
interface I3 is I3B {

	function f0() override
	external payable returns (uint);
	function f1() external payable returns (uint);
}





interface C4BBBB {

	function f0() external payable returns (uint);
}
interface C4BBB is C4BBBB {

	function f0() override
	external payable returns (uint);
}
interface C4BB is C4BBB {

}
contract C4B is C4BB {

	function f0() external payable
	override
	returns (uint)
	{
		return 890442452;
	}
}
abstract contract C4 is C4B {

}






interface I6BBBBB {

	function f0() external view returns (uint);
}
interface I6BBBB is I6BBBBB {

	function f0() override
	external view returns (uint);
}
interface I6BBB is I6BBBB {

	function f1() external view returns (uint);
}
interface I6BB is I6BBB {

	function f1() override
	external view returns (uint);
}

interface I6BBBBBB is I6BBB {

	function f0() override
	external view returns (uint);
	function f2() external payable returns (uint);
}
interface I6B is I6BB, I6BBBBBB {

	function f0() override(I6BBBB, I6BBBBBB)
	external view returns (uint);
	function f1() override(I6BB, I6BBB)
	external view returns (uint);
	function f2() override
	external payable returns (uint);
}
interface I6 is I6B {

	function f0() override
	external view returns (uint);
}
library L7 {

	function f0(uint) external pure returns (uint)
	{
		return 1714636915;
	}
}

interface I8 {

	function f0() external payable returns (uint);
}

interface I9 {

	function f0() external payable returns (uint);
}


interface I10B {

	function f0() external payable returns (uint);
}
interface I10 is I10B {

	function f0() override
	external payable returns (uint);
	function f1() external payable returns (uint);
}

interface I11 {

	function f0() external view returns (uint);
}


contract C {
	using L7 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1714636915)
			return 1;
		return 0;
	}
}

