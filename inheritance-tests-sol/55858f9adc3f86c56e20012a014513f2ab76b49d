pragma solidity >=0.0;
interface C0BB {
	function f0() external view returns (uint);
}
interface C0BBB is C0BB {
	function f0() override
	external view returns (uint);
}
interface C0B is C0BB, C0BBB {
	function f0() override(C0BB, C0BBB)
	external view returns (uint);
}
interface C0BBBBB {
	function f0() external view returns (uint);
}
interface C0BBBB is C0B, C0BBBBB {
	function f0() override(C0B, C0BBBBB)
	external view returns (uint);
}
contract C0 is C0B, C0BBBB {
	function f0() virtual external view
	override(C0BBBB, C0B)
	returns (uint)
	{
		return 305269445;
	}
}
interface I1 {
	function f0() external view returns (uint);
}
interface I2BBB {
}
interface I2BB is I2BBB {
	function f0() external view returns (uint);
}
interface I2B is I2BB {
	function f0() override
	external view returns (uint);
}
interface I2BBBBBB {
	function f0() external view returns (uint);
}
interface I2BBBBB is I2BBBBBB {
	function f0() override
	external view returns (uint);
	function f1() external pure returns (uint);
}
interface I2BBBB is I2BB, I2BBBBB {
	function f0() override(I2BB, I2BBBBB)
	external view returns (uint);
	function f1() override
	external pure returns (uint);
}
interface I2 is I2B, I2BBBB {
	function f0() override(I2B, I2BBBB)
	external view returns (uint);
	function f1() override
	external pure returns (uint);
	function f2() external view returns (uint);
}
interface I3BBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I3BBBBBBBBB is I3BBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I3BBBBBBBB is I3BBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I3BBBBBBB is I3BBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I3BBBBBB is I3BBBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() external payable returns (uint);
}
interface I3BBBBB is I3BBBBBB {
}
interface I3BBBBBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I3BBBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBBB {
}
interface I3BBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I3BBBBBBBBBBBBB is I3BBBBBBBBBBBBBB {
}
interface I3BBBBBBBBBBBB is I3BBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I3BBBBBBBBBBB is I3BBBBBB, I3BBBBBBBBBBBB {
	function f0() override(I3BBBBBB, I3BBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I3BBBB is I3BBBBB, I3BBBBBBBBBBB {
	function f0() override(I3BBBBBB, I3BBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I3BBBBBB, I3BBBBBBBBBBB)
	external payable returns (uint);
}
interface I3BBB is I3BBBB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I3BB is I3BBB {
	function f1() override
	external payable returns (uint);
}
interface I3BBBBBBBBBBBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I3BBBBBBBBBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBBBBBBBBB {
}
interface I3BBBBBBBBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I3BBBBBBBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I3BBBBBBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBBBBBB {
}
interface I3BBBBBBBBBBBBBBBBB is I3BBB, I3BBBBBBBBBBBBBBBBBB {
	function f0() override(I3BBB, I3BBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I3B is I3BB, I3BBBBBBBBBBBBBBBBB {
	function f0() override(I3BBB, I3BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I3BB, I3BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
}
interface I3 is I3B {
	function f0() override
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I4BBBBBB {
}
interface I4BBBBB is I4BBBBBB {
	function f0() external view returns (uint);
}
interface I4BBBB is I4BBBBB {
}
interface I4BBB is I4BBBB {
	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I4BB is I4BBB {
	function f0() override
	external view returns (uint);
}
interface I4B is I4BB {
	function f0() override
	external view returns (uint);
}
interface I4 is I4B {
}
contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}
