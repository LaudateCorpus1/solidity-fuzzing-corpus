pragma solidity >=0.0;
abstract contract C0B {
}
contract C0 is C0B {
	function f0() public view
	
	returns (uint)
	{
		return 5889062;
	}
}
interface I1BBB {
	function f0() external payable returns (uint);
}
interface I1BB is I1BBB {
	function f0() override
	external payable returns (uint);
}
interface I1B is I1BB {
	function f0() override
	external payable returns (uint);
}
interface I1BBBB is I1BB {
}
interface I1BBBBB is I1BBBB {
	function f0() override
	external payable returns (uint);
}
interface I1BBBBBB is I1BB {
	function f0() override
	external payable returns (uint);
}
interface I1BBBBBBB is I1BB {
	function f0() override
	external payable returns (uint);
}
interface I1BBBBBBBBBBBB {
	function f0() external payable returns (uint);
	function f1() external payable returns (uint);
}
interface I1BBBBBBBBBBB is I1BBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I1BBBBBBBBBB is I1BBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
	function f2() external payable returns (uint);
}
interface I1BBBBBBBBB is I1BBBBBBBBBB {
	function f1() override
	external payable returns (uint);
	function f3() external view returns (uint);
}
interface I1BBBBBBBB is I1BB, I1BBBBBBBBB {
	function f0() override(I1BB, I1BBBBBBBBBB)
	external payable returns (uint);
}
interface I1BBBBBBBBBBBBB is I1BB {
	function f0() override
	external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBB {
}
interface I1BBBBBBBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBB {
	function f0() override(I1BBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
}
interface I1BBBBBBBBBBBBBB is I1BBBBBBBB, I1BBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBB {
	function f0() override(I1BBBBBBBB, I1BBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBB is I1BB {
	function f0() override
	external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBB is I1BB {
	function f0() override
	external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBBB is I1BBBB {
	function f0() override
	external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBBBBBBBBBB {
}
interface I1BBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I1BBBBBBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBBBB is I1BB, I1BBBBBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I1BB, I1BBBBBBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBBBBBBBBB is I1BB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I1BB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
}
interface I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I1BBBBBBBBBBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB is I1B {
	function f0() override
	external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() external payable returns (uint);
	function f1() external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
}
interface I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f1() override
	external payable returns (uint);
	function f2() external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f1() override
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() external view returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB is I1BBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I1BB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB is I1BBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I1 is I1B, I1BBBB, I1BBBBB, I1BBBBBB, I1BBBBBBB, I1BBBBBBBB, I1BBBBBBBBBBBBB, I1BBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I1B, I1BB, I1BBBBB, I1BBBBBB, I1BBBBBBB, I1BBBBBBBB, I1BBBBBBBBBBBBB, I1BBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I1BBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f2() override(I1BBBBBBBBBB, I1BBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f3() override(I1BBBBBBBBB, I1BBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
}
interface I2BBB {
	function f0() external payable returns (uint);
}
interface I2BB is I2BBB {
	function f0() override
	external payable returns (uint);
}
interface I2BBBBB {
	function f0() external payable returns (uint);
}
interface I2BBBB is I2BB, I2BBBBB {
	function f0() override(I2BB, I2BBBBB)
	external payable returns (uint);
}
interface I2B is I2BB, I2BBBB {
	function f0() override(I2BB, I2BBBB)
	external payable returns (uint);
}
interface I2BBBBBBBBBB {
	function f0() external payable returns (uint);
	function f1() external payable returns (uint);
}
interface I2BBBBBBBBB is I2BBBBBBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I2BBBBBBBB is I2BBBBBBBBB {
	function f0() override
	external payable returns (uint);
	function f2() external payable returns (uint);
}
interface I2BBBBBBB is I2BBBBBBBB {
	function f0() override
	external payable returns (uint);
	function f3() external view returns (uint);
}
interface I2BBBBBB is I2BBBB, I2BBBBBBB {
	function f0() override(I2BBBB, I2BBBBBBB)
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
}
interface I2BBBBBBBBBBB is I2B {
}
interface I2BBBBBBBBBBBB is I2BBBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I2BBBBBBBBBBBBB is I2B {
}
interface I2BBBBBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I2BBBBBBBBBBBBBBB is I2BBBBBBBBBBBBBBBB {
}
interface I2BBBBBBBBBBBBBB is I2BBBBBB, I2BBBBBBBBBBBBBBB {
	function f0() override(I2BBBBBB, I2BBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I2BBBBBBBBBBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I2BBBBBBBBBBBBBBBBBBBB is I2BBBBBBBBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I2BBBBBBBBBBBBBBBBBBB is I2BBBBBBBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() external payable returns (uint);
}
interface I2BBBBBBBBBBBBBBBBBB is I2BBBBBBBBBBBBBBBBBBB {
}
interface I2BBBBBBBBBBBBBBBBB is I2BBBBBB, I2BBBBBBBBBBBBBBBBBB {
	function f0() override(I2BBBBBB, I2BBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I2BBBBBB, I2BBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f3() override
	external view returns (uint);
}
interface I2BBBBBBBBBBBBBBBBBBBBBB is I2BBBBBBBBBBBBBBBBB {
	function f1() override
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
}
interface I2BBBBBBBBBBBBBBBBBBBBBBB is I2BBBBBBB {
	function f0() override
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
}
interface I2BBBBBBBBBBBBBBBBBBBBBBBB is I2BBBB {
}
interface I2 is I2B, I2BBBBBB, I2BBBBBBBBBBB, I2BBBBBBBBBBBB, I2BBBBBBBBBBBBB, I2BBBBBBBBBBBBBB, I2BBBBBBBBBBBBBBBBB, I2BBBBBBBBBBBBBBBBBBBBBB, I2BBBBBBBBBBBBBBBBBBBBBBB, I2BBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I2B, I2BBBBBB, I2BBBBBBBBBBBB, I2BBBBBBBBBBBBBB, I2BBBBBBBBBBBBBBBBB, I2BBBBBBBBBBBBBBBBBBBBBBB, I2BBBB)
	external payable returns (uint);
	function f1() override(I2BBBBBB, I2BBBBBBBBBBBB, I2BBBBBBBBBBBBBB, I2BBBBBBBBBBBBBBBBB, I2BBBBBBBBBBBBBBBBBBBBBB, I2BBBBBBBBB)
	external payable returns (uint);
	function f2() override(I2BBBBBB, I2BBBBBBBB, I2BBBBBBBBBBBBBBBBBBBBBB, I2BBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f3() override(I2BBBBBBB, I2BBBBBBBBBBBBBBBBB)
	external view returns (uint);
}
library L3 {
	function f0(uint) external pure returns (uint)
	{
		return 468703135;
	}
}
library L5 {
	function f0(uint) external pure returns (uint)
	{
		return 1801979802;
	}
}
contract C {
	using L5 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1801979802)
			return 1;
		return 0;
	}
}
