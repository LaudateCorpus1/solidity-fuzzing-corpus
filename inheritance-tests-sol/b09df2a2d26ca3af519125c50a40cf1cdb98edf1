pragma solidity >=0.0;
interface I0BBBBB {
	function f0() external view returns (uint);
}
interface I0BBBBBBBBB {
	function f0() external view returns (uint);
}
interface I0BBBBBBBB is I0BBBBBBBBB {
}
interface I0BBBBBBB is I0BBBBBBBB {
}
interface I0BBBBBB is I0BBBBB, I0BBBBBBB {
	function f0() override(I0BBBBB, I0BBBBBBBBB)
	external view returns (uint);
}
interface I0BBBB is I0BBBBB, I0BBBBBB {
	function f0() override(I0BBBBB, I0BBBBBB)
	external view returns (uint);
}
interface I0BBB is I0BBBB {
	function f0() override
	external view returns (uint);
}
interface I0BB is I0BBB {
}
interface I0B is I0BB {
}
interface I0 is I0B {
	function f1() external payable returns (uint);
}
interface I2BBBBBB {
}
interface I2BBBBB is I2BBBBBB {
}
interface I2BBBB is I2BBBBB {
}
interface I2BBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I2BBBBBBBBB is I2BBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
}
interface I2BBBBBBBB is I2BBBBBBBBB {
}
interface I2BBBBBBB is I2BBBB, I2BBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
}
interface I2BBB is I2BBBB, I2BBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() external payable returns (uint);
}
interface I2BB is I2BBB {
	function f0() override
	external view returns (uint);
	function f3() external view returns (uint);
}
interface I2B is I2BB {
	function f0() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
}
interface I2BBBBBBBBBBBBBB {
}
interface I2BBBBBBBBBBBBB is I2BBBBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I2BBBBBBBBBBBB is I2BBBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface I2BBBBBBBBBBB is I2BB, I2BBBBBBBBBBBB {
	function f0() override(I2BB, I2BBBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external view returns (uint);
}
interface I2 is I2B, I2BBBBBBBBBBB {
	function f0() override(I2B, I2BBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I2BBB, I2BBBBBBBBBBB)
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override(I2B, I2BB)
	external view returns (uint);
	function f4() external payable returns (uint);
}
interface I3B {
	function f0() external view returns (uint);
}
interface I3 is I3B {
	function f0() override
	external view returns (uint);
}
contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}
