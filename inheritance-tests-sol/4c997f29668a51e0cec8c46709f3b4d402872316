
pragma solidity >=0.0;





interface I0BB {

	function f0() external view returns (uint);
}
interface I0B is I0BB {

	function f1() external payable returns (uint);
}
interface I0 is I0B {

	function f0() override
	external view returns (uint);
}


interface I1B {

	function f0() external payable returns (uint);
}
interface I1 is I1B {

}
library L2 {

	function f0(uint) private pure returns (uint)
	{
		return 1804289383;
	}
}



abstract contract C3BB {

}
contract C3B is C3BB {

}




interface C3BBBBBB {

	function f0() external payable returns (uint);
}
interface C3BBBBB is C3BBBBBB {

}

interface C3BBBBBBB is C3BBBBBB {

	function f1() external payable returns (uint);
}
interface C3BBBB is C3BBBBB, C3BBBBBBB {

	function f2() external payable returns (uint);
}
interface C3BBB is C3BBBB {

}
contract C3 is C3B, C3BBB {

	function f0() virtual external payable
	override
	returns (uint)
	{
		return 1559527823;
	}
	function f1() external payable
	override
	returns (uint)
	{
		return 638022372;
	}
	function f2() external payable
	override
	returns (uint)
	{
		return 1931656580;
	}
}


contract C {
	function test() public returns (uint)
	{
			C3 tc0 = new C3();
			if (tc0.f0() != 1559527823)
				return 1;
			if (tc0.f1() != 638022372)
				return 2;
			if (tc0.f2() != 1931656580)
				return 3;
			return 0;
	}
}

