
pragma solidity >=0.0;



interface I0 {

	function f0() external view returns (uint);
}


interface I1B {

	function f0() external view returns (uint);
}
interface I1 is I1B {

	function f0() override
	external view returns (uint);
}




interface I2BBB {

	function f0() external view returns (uint);
	function f1() external payable returns (uint);
}
interface I2BB is I2BBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I2B is I2BB {

}



interface I2BBBBBB {

	function f0() external view returns (uint);
}
interface I2BBBBB is I2BBBBBB {

}
interface I2BBBB is I2BB, I2BBBBB {

	function f0() override(I2BB, I2BBBBBB)
	external view returns (uint);
}
interface I2 is I2B, I2BBBB {

	function f0() override(I2BB, I2BBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}






interface I3BBBBB {

	function f0() external view returns (uint);
}
interface I3BBBB is I3BBBBB {

	function f0() override
	external view returns (uint);
}
interface I3BBB is I3BBBB {

	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
}
interface I3BB is I3BBB {

}

interface I3BBBBBB is I3BB {

	function f1() override
	external view returns (uint);
	function f2() external payable returns (uint);
}
interface I3B is I3BB, I3BBBBBB {

	function f1() override(I3BBB, I3BBBBBB)
	external view returns (uint);
}
interface I3 is I3B {

	function f2() override
	external payable returns (uint);
}

interface I4 {

	function f0() external payable returns (uint);
}

interface I5 {

	function f0() external payable returns (uint);
}

interface I6 {

	function f0() external view returns (uint);
}




interface I7BBB {

	function f0() external view returns (uint);
}
interface I7BB is I7BBB {

}
interface I7B is I7BB {

}
interface I7 is I7B {

	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
}


interface I8B {

	function f0() external view returns (uint);
}
interface I8 is I8B {

	function f0() override
	external view returns (uint);
}




interface I9BBB {

	function f0() external view returns (uint);
}
interface I9BB is I9BBB {

}
interface I9B is I9BB {

}
interface I9 is I9B {

	function f0() override
	external view returns (uint);
}


contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}

