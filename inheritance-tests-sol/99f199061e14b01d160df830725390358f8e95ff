
pragma solidity >=0.0;






interface I0BBB {

	function f0() external pure returns (uint);
}
interface I0BB is I0BBB {

}
interface I0B is I0BB {

	function f0() override
	external pure returns (uint);
	function f1() external payable returns (uint);
}
interface I0 is I0B {

}


interface I1B {

	function f0() external view returns (uint);
}
interface I1 is I1B {

}
library L2 {

	function f0(uint) private pure returns (uint)
	{
		return 1804289383;
	}
}



interface I4BB {

	function f0() external payable returns (uint);
}




interface I4BBBBBB {

	function f0() external payable returns (uint);
	function f1() external view returns (uint);
}
interface I4BBBBB is I4BBBBBB {

}
interface I4BBBB is I4BBBBB {

	function f2() external view returns (uint);
}
interface I4BBB is I4BB, I4BBBB {

	function f0() override(I4BB, I4BBBBBB)
	external payable returns (uint);
	function f1() override
	external view returns (uint);
}

interface I4BBBBBBB is I4BBB {

	function f0() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
	function f3() external payable returns (uint);
	function f4() external view returns (uint);
}
interface I4B is I4BB, I4BBB, I4BBBBBBB {

	function f0() override(I4BB, I4BBB, I4BBBBBBB)
	external payable returns (uint);
	function f2() override(I4BBBB, I4BBBBBBB)
	external view returns (uint);
	function f3() override
	external payable returns (uint);
	function f4() override
	external view returns (uint);
}

interface I4BBBBBBBB is I4BB {

}
interface I4 is I4B, I4BBBBBBBB {

	function f0() override(I4B, I4BB)
	external payable returns (uint);
	function f2() override
	external view returns (uint);
	function f4() override
	external view returns (uint);
}


contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}

