pragma solidity >=0.0;
interface I3 {
	function f0() external pure returns (uint);
}
interface I4BBB {
	function f0() external view returns (uint);
}
interface I4BB is I4BBB {
}
interface I4B is I4BB {
	function f0() override
	external view returns (uint);
}
interface I4 is I4B {
	function f1() external view returns (uint);
}
interface I5BBB {
	function f0() external view returns (uint);
}
interface I5BB is I5BBB {
	function f0() override
	external view returns (uint);
}
interface I5B is I5BB {
}
interface I5 is I5B {
	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
}
interface I6BBB {
	function f0() external view returns (uint);
}
interface I6BB is I6BBB {
	function f0() override
	external view returns (uint);
}
interface I6B is I6BB {
	function f1() external view returns (uint);
}
interface I6 is I6B {
	function f0() override
	external view returns (uint);
	function f2() external view returns (uint);
}
interface I7B {
	function f0() external view returns (uint);
}
interface I7BB is I7B {
	function f0() override
	external view returns (uint);
}
interface I7 is I7B, I7BB {
	function f0() override(I7B, I7BB)
	external view returns (uint);
}
interface I8 {
	function f0() external payable returns (uint);
}
interface I9B {
	function f0() external view returns (uint);
}
interface I9 is I9B {
	function f1() external view returns (uint);
}
interface I10 {
	function f0() external payable returns (uint);
}
interface I12B {
	function f0() external view returns (uint);
}
interface I12 is I12B {
	function f0() override
	external view returns (uint);
}
interface I13 {
	function f0() external payable returns (uint);
}
interface I14 {
	function f0() external view returns (uint);
}
interface I15BBB {
	function f0() external view returns (uint);
}
interface I15BB is I15BBB {
	function f0() override
	external view returns (uint);
}
interface I15B is I15BB {
}
interface I15 is I15B {
	function f1() external view returns (uint);
}
interface I16BBB {
	function f0() external view returns (uint);
}
interface I16BB is I16BBB {
	function f0() override
	external view returns (uint);
}
interface I16B is I16BB {
	function f1() external view returns (uint);
}
interface I16 is I16B {
	function f2() external view returns (uint);
}
interface I17 {
	function f0() external pure returns (uint);
}
interface I18BBB {
	function f0() external view returns (uint);
}
interface I18BB is I18BBB {
}
interface I18B is I18BB {
	function f0() override
	external view returns (uint);
}
interface I18 is I18B {
	function f1() external view returns (uint);
}
interface I19BBB {
	function f0() external view returns (uint);
}
interface I19BB is I19BBB {
	function f0() override
	external view returns (uint);
}
interface I19B is I19BB {
	function f0() override
	external view returns (uint);
}
interface I19 is I19B {
	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
}
interface I20 {
	function f0() external view returns (uint);
}
interface I21B {
	function f0() external view returns (uint);
}
interface I21BB is I21B {
	function f0() override
	external view returns (uint);
}
interface I21 is I21B, I21BB {
	function f0() override(I21B, I21BB)
	external view returns (uint);
}
interface I22BB {
	function f0() external view returns (uint);
}
interface I22BBBBB {
	function f0() external view returns (uint);
}
interface I22BBBB is I22BBBBB {
	function f0() override
	external view returns (uint);
}
interface I22BBB is I22BB, I22BBBB {
	function f0() override(I22BB, I22BBBB)
	external view returns (uint);
}
interface I22B is I22BB, I22BBB {
	function f0() override(I22BB, I22BBB)
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I22 is I22B {
	function f1() override
	external payable returns (uint);
	function f2() external view returns (uint);
	function f3() external payable returns (uint);
}
interface I23BBB {
	function f0() external view returns (uint);
}
interface I23BB is I23BBB {
}
interface I23B is I23BB {
}
interface I23 is I23B {
	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
}
contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}
