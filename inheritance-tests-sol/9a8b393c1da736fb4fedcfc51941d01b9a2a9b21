pragma solidity >=0.0;
interface I0 {
	function f0() external payable returns (uint);
}
interface I1BB {
	function f0() external view returns (uint);
}
interface I1B is I1BB {
}
interface I1BBBBBB {
}
interface I1BBBBB is I1BBBBBB {
	function f0() external view returns (uint);
}
interface I1BBBB is I1BBBBB {
}
interface I1BBB is I1BB, I1BBBB {
	function f0() override(I1BB, I1BBBBB)
	external view returns (uint);
}
interface I1BBBBBBBBBB {
}
interface I1BBBBBBBBB is I1BBBBBBBBBB {
}
interface I1BBBBBBBB is I1BBBBBBBBB {
}
interface I1BBBBBBB is I1BBB, I1BBBBBBBB {
}
interface I1 is I1B, I1BBB, I1BBBBBBB {
	function f0() override(I1BB, I1BBB)
	external view returns (uint);
}
interface I2BBBBBB {
}
interface I2BBBBB is I2BBBBBB {
}
interface I2BBBB is I2BBBBB {
}
interface I2BBBBBBBBBB {
}
interface I2BBBBBBBBB is I2BBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I2BBBBBBBB is I2BBBBBBBBB {
}
interface I2BBBBBBB is I2BBBBB, I2BBBBBBBB {
}
interface I2BBB is I2BBBB, I2BBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I2BB is I2BBB {
	function f1() override
	external payable returns (uint);
	function f2() external view returns (uint);
}
interface I2B is I2BB {
	function f0() override
	external view returns (uint);
}
interface I2BBBBBBBBBBBBBB {
}
interface I2BBBBBBBBBBBBB is I2BBBBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I2BBBBBBBBBBBB is I2BBBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface I2BBBBBBBBBBB is I2BB, I2BBBBBBBBBBBB {
	function f0() override(I2BBB, I2BBBBBBBBBBBB)
	external view returns (uint);
}
interface I2 is I2B, I2BBBBBBBBBBB {
	function f0() override(I2B, I2BBBBBBBBBBB)
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f3() external payable returns (uint);
}
interface I6 {
	function f0() external payable returns (uint);
}
interface C10BB {
	function f0() external view returns (uint);
}
interface C10B is C10BB {
}
contract C10 is C10B {
	function f0() external view
	override
	returns (uint)
	{
		return 942409124;
	}
}
interface I12BBBBBB {
}
interface I12BBBBB is I12BBBBBB {
}
interface I12BBBB is I12BBBBB {
}
interface I12BBBBBBBBBB {
}
interface I12BBBBBBBBB is I12BBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I12BBBBBBBB is I12BBBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface I12BBBBBBB is I12BBBB, I12BBBBBBBB {
}
interface I12BBB is I12BBBB, I12BBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I12BB is I12BBB {
	function f0() override
	external view returns (uint);
	function f2() external view returns (uint);
}
interface I12B is I12BB {
	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
}
interface I12BBBBBBBBBBBBBB {
}
interface I12BBBBBBBBBBBBB is I12BBBBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I12BBBBBBBBBBBB is I12BBBBBBBBBBBBB {
}
interface I12BBBBBBBBBBB is I12B, I12BBBBBBBBBBBB {
	function f0() override(I12B, I12BBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override
	external view returns (uint);
}
interface I12 is I12B, I12BBBBBBBBBBB {
	function f0() override(I12B, I12BBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override(I12B, I12BBBBBBBBBBB)
	external view returns (uint);
	function f3() external payable returns (uint);
}
interface I13 {
	function f0() external payable returns (uint);
}
interface I14 {
	function f0() external payable returns (uint);
	function f1() external payable returns (uint);
}
contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}
