
pragma solidity >=0.0;







interface C0BBBB {

	function f0() external payable returns (uint);
}
interface C0BBB is C0BBBB {

}
contract C0BB is C0BBB {

	function f0() virtual external payable
	override
	returns (uint)
	{
		return 1914720637;
	}
}
abstract contract C0B is C0BB {

}
contract C0 is C0B {

	function f1() public view
	
	returns (uint)
	{
		return 564586691;
	}
}





interface C2BBBB {

	function f0() external payable returns (uint);
}
interface C2BBB is C2BBBB {

}
contract C2BB is C2BBB {

	function f0() external payable
	override
	returns (uint)
	{
		return 1738531149;
	}
}
contract C2B is C2BB {

}
contract C2 is C2B {

	function f1() public view
	
	returns (uint)
	{
		return 1882556969;
	}
}

contract C3 {

	function f0() public view
	
	returns (uint)
	{
		return 2136927794;
	}
}

contract C4 {

	function f0() public view
	
	returns (uint)
	{
		return 1559527823;
	}
	function f1() public view
	
	returns (uint)
	{
		return 2075782095;
	}
}


interface C5B {

	function f0() external view returns (uint);
}
contract C5 is C5B {

	function f0() virtual external view
	override
	returns (uint)
	{
		return 914937185;
	}
	function f1() public view
	
	returns (uint)
	{
		return 1931656580;
	}
	function f2() internal view
	
	returns (uint)
	{
		return 1402304087;
	}
}
library L6 {

	function f0(uint) public pure returns (uint)
	{
		return 1804289383;
	}
}



interface I7BB {

	function f0() external view returns (uint);
}
interface I7B is I7BB {

	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I7 is I7B {

	function f0() override
	external view returns (uint);
	function f2() external view returns (uint);
}


contract C {
	using L6 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1804289383)
			return 1;
		return 0;
	}
}

