pragma solidity >=0.0;
interface I0BBBBBBBBB {
	function f0() external view returns (uint);
}
interface I0BBBBBBBBBB is I0BBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
}
interface I0BBBBBBBB is I0BBBBBBBBB, I0BBBBBBBBBB {
	function f0() override(I0BBBBBBBBB, I0BBBBBBBBBB)
	external view returns (uint);
	function f2() external payable returns (uint);
	function f3() external view returns (uint);
}
interface I0BBBBBBB is I0BBBBBBBB {
	function f0() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
}
interface I0BBBBBB is I0BBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
}
interface I0BBBBB is I0BBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f4() external payable returns (uint);
}
interface I0BBBB is I0BBBBB {
	function f1() override
	external view returns (uint);
}
interface I0BBBBBBBBBBB is I0BBBB {
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f5() external payable returns (uint);
}
interface I0BBB is I0BBBB, I0BBBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override(I0BBBB, I0BBBBBBBBBBB)
	external view returns (uint);
	function f2() override(I0BBBBB, I0BBBBBBBBBBB)
	external payable returns (uint);
	function f3() override(I0BBBBBBB, I0BBBBBBBBBBB)
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() external view returns (uint);
	function f7() external payable returns (uint);
	function f8() external view returns (uint);
	function f9() external payable returns (uint);
}
interface I0BB is I0BBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() override
	external view returns (uint);
	function f9() override
	external payable returns (uint);
}
interface I0B is I0BB {
	function f0() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override
	external payable returns (uint);
	function f7() override
	external payable returns (uint);
	function f8() override
	external view returns (uint);
	function f9() override
	external payable returns (uint);
}
interface I0BBBBBBBBBBBB is I0BB {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f6() override
	external view returns (uint);
	function f10() external payable returns (uint);
}
interface I0 is I0B, I0BBBBBBBBBBBB {
	function f0() override(I0B, I0BBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I0BB, I0BBBBBBBBBBBB)
	external view returns (uint);
	function f3() override(I0BB, I0BBBBBBBBBBBB)
	external view returns (uint);
	function f4() override(I0B, I0BBBBB)
	external payable returns (uint);
	function f5() override(I0B, I0BB)
	external payable returns (uint);
	function f6() override(I0BB, I0BBBBBBBBBBBB)
	external view returns (uint);
	function f7() override(I0B, I0BBB)
	external payable returns (uint);
	function f8() override(I0B, I0BBB)
	external view returns (uint);
	function f9() override(I0B, I0BB)
	external payable returns (uint);
	function f10() override
	external payable returns (uint);
}
interface I1BB {
}
interface I1B is I1BB {
	function f0() external view returns (uint);
}
interface I1 is I1B {
}
interface I2BBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I2BBBBBBBBB is I2BBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
}
interface I2BBBBBBBBBBB is I2BBBBBBBBBB {
	function f1() external view returns (uint);
}
interface I2BBBBBBBB is I2BBBBBBBBB, I2BBBBBBBBBBB {
	function f0() override(I2BBBBBBBBB, I2BBBBBBBBBB)
	external view returns (uint);
	function f1() override(I2BBBBBBBBB, I2BBBBBBBBBBB)
	external view returns (uint);
	function f2() external payable returns (uint);
	function f3() external view returns (uint);
}
interface I2BBBBBBB is I2BBBBBBBB {
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
}
interface I2BBBBBB is I2BBBBBBB {
	function f1() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
}
interface I2BBBBB is I2BBBBBB {
	function f1() override
	external view returns (uint);
	function f4() external payable returns (uint);
	function f5() external payable returns (uint);
}
interface I2BBBB is I2BBBBB {
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
}
interface I2BBBBBBBBBBBB is I2BBBBB {
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f6() external payable returns (uint);
}
interface I2BBB is I2BBBB, I2BBBBBBBBBBBB {
	function f2() override(I2BBBB, I2BBBBBBBBBBBB)
	external payable returns (uint);
	function f3() override(I2BBBB, I2BBBBBBBBBBBB)
	external view returns (uint);
	function f4() override(I2BBBB, I2BBBBB)
	external payable returns (uint);
	function f6() override
	external payable returns (uint);
	function f7() external payable returns (uint);
}
interface I2BB is I2BBB {
	function f3() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
}
interface I2B is I2BB {
	function f2() override
	external payable returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() override
	external payable returns (uint);
}
interface I2BBBBBBBBBBBBB is I2BB {
	function f0() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f4() override
	external payable returns (uint);
	function f6() override
	external payable returns (uint);
	function f7() override
	external payable returns (uint);
	function f8() external payable returns (uint);
}
interface I2 is I2B, I2BBBBBBBBBBBBB {
	function f0() override(I2BBBBBBBB, I2BBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override(I2B, I2BBBBBBBBBBBBB)
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override(I2BBB, I2BBBBBBBBBBBBB)
	external payable returns (uint);
	function f5() override(I2B, I2BB)
	external payable returns (uint);
	function f6() override(I2B, I2BBBBBBBBBBBBB)
	external payable returns (uint);
	function f7() override(I2BBB, I2BBBBBBBBBBBBB)
	external payable returns (uint);
}
interface I3BB {
	function f0() external view returns (uint);
}
interface I3B is I3BB {
	function f1() external payable returns (uint);
}
interface I3BBBB {
	function f0() external view returns (uint);
}
interface I3BBB is I3B, I3BBBB {
	function f0() override(I3BB, I3BBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() external payable returns (uint);
}
interface I3 is I3B, I3BBB {
	function f0() override(I3BB, I3BBB)
	external view returns (uint);
	function f1() override(I3B, I3BBB)
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
}
contract C4 {
	function f0() public view
	
	returns (uint)
	{
		return 809207309;
	}
}
interface I5B {
	function f0() external pure returns (uint);
}
interface I5 is I5B {
	function f0() override
	external pure returns (uint);
}
contract C6 {
	function f0() public view
	
	returns (uint)
	{
		return 749646633;
	}
}
interface I7B {
	function f0() external view returns (uint);
}
interface I7 is I7B {
}
interface I8B {
	function f0() external view returns (uint);
}
interface I8 is I8B {
}
interface I9BBB {
	function f0() external payable returns (uint);
}
interface I9BB is I9BBB {
	function f1() external payable returns (uint);
}
interface I9B is I9BB {
	function f2() external view returns (uint);
}
interface I9BBBBB {
	function f0() external payable returns (uint);
}
interface I9BBBB is I9B, I9BBBBB {
	function f0() override(I9BBB, I9BBBBB)
	external payable returns (uint);
	function f2() override
	external view returns (uint);
}
interface I9 is I9B, I9BBBB {
	function f0() override(I9BBB, I9BBBB)
	external payable returns (uint);
	function f2() override(I9B, I9BBBB)
	external view returns (uint);
}
contract C {
	function test() public returns (uint)
	{
			C4 tc0 = new C4();
			if (tc0.f0() != 809207309)
				return 1;
			C6 tc1 = new C6();
			if (tc1.f0() != 749646633)
				return 2;
			return 0;
	}
}
