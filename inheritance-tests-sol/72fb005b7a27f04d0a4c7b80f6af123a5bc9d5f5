
pragma solidity >=0.0;





interface I0BB {

	function f0() external view returns (uint);
}
interface I0B is I0BB {

	function f1() external view returns (uint);
}
interface I0 is I0B {

	function f0() override
	external view returns (uint);
}





interface I1BBBB {

	function f0() external view returns (uint);
}
interface I1BBB is I1BBBB {

	function f1() external payable returns (uint);
}

interface I1BBBBB is I1BBBB {

	function f1() external payable returns (uint);
}
interface I1BB is I1BBB, I1BBBBB {

	function f1() override(I1BBB, I1BBBBB)
	external payable returns (uint);
}
interface I1B is I1BB {

	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() external payable returns (uint);
}


interface I1BBBBBBB {

	function f0() external view returns (uint);
}
interface I1BBBBBB is I1B, I1BBBBBBB {

	function f0() override(I1B, I1BBBBBBB)
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() external payable returns (uint);
}
interface I1 is I1B, I1BBBBBB {

	function f0() override(I1B, I1BBBBBB)
	external view returns (uint);
	function f2() override(I1B, I1BBBBBB)
	external payable returns (uint);
	function f3() override
	external payable returns (uint);
}








interface I2BBBBBBB {

	function f0() external payable returns (uint);
}
interface I2BBBBBB is I2BBBBBBB {

}
interface I2BBBBB is I2BBBBBB {

	function f0() override
	external payable returns (uint);
}
interface I2BBBB is I2BBBBB {

}
interface I2BBB is I2BBBB {

}
interface I2BB is I2BBB {

	function f0() override
	external payable returns (uint);
}
interface I2B is I2BB {

}

interface I2BBBBBBBB is I2BB {

	function f0() override
	external payable returns (uint);
	function f1() external payable returns (uint);
}
interface I2 is I2B, I2BBBBBBBB {

	function f0() override(I2BB, I2BBBBBBBB)
	external payable returns (uint);
}


interface C3B {

	function f0() external view returns (uint);
}

interface C3BB is C3B {

	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
}
contract C3 is C3B, C3BB {

	function f0() external view
	override(C3BB, C3B)
	returns (uint)
	{
		return 588214593;
	}
	function f1() virtual external view
	override
	returns (uint)
	{
		return 998000273;
	}
	function f2() virtual public pure
	
	returns (uint)
	{
		return 2118008479;
	}
}
library L4 {

	function f0(uint) internal pure returns (uint)
	{
		return 1957747793;
	}
	function f1(uint) internal view returns (uint)
	{
		return 424238335;
	}
}





interface C6BBBB {

	function f0() external payable returns (uint);
}
interface C6BBB is C6BBBB {

}
contract C6BB is C6BBB {

	function f0() external payable
	override
	returns (uint)
	{
		return 1917240315;
	}
}
contract C6B is C6BB {

}
contract C6 is C6B {

	function f1() public view
	
	returns (uint)
	{
		return 955279764;
	}
}


interface C8B {

	function f0() external view returns (uint);
}

interface C8BB is C8B {

	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
}
contract C8 is C8B, C8BB {

	function f0() external view
	override(C8BB, C8B)
	returns (uint)
	{
		return 294452547;
	}
	function f1() external view
	override
	returns (uint)
	{
		return 489514731;
	}
	function f2() virtual public pure
	
	returns (uint)
	{
		return 603012160;
	}
}

contract C9 {

	function f0() external pure
	
	returns (uint)
	{
		return 1006623922;
	}
}


contract C {
	function test() public returns (uint)
	{
			C3 tc0 = new C3();
			if (tc0.f0() != 588214593)
				return 1;
			if (tc0.f1() != 998000273)
				return 2;
			if (tc0.f2() != 2118008479)
				return 3;
			C6 tc1 = new C6();
			if (tc1.f0() != 1917240315)
				return 4;
			if (tc1.f1() != 955279764)
				return 5;
			C6B tc2 = new C6B();
			if (tc2.f0() != 1917240315)
				return 6;
			C6BB tc3 = new C6BB();
			if (tc3.f0() != 1917240315)
				return 7;
			C8 tc4 = new C8();
			if (tc4.f0() != 294452547)
				return 8;
			if (tc4.f1() != 489514731)
				return 9;
			if (tc4.f2() != 603012160)
				return 10;
			C9 tc5 = new C9();
			if (tc5.f0() != 1006623922)
				return 11;
			return 0;
	}
}

