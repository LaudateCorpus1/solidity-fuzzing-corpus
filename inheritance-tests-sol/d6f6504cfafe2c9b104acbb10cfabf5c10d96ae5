pragma solidity >=0.0;
interface I0B {
	function f0() external view returns (uint);
}
interface I0 is I0B {
}
interface I1BBBB {
	function f0() external view returns (uint);
}
interface I1BBB is I1BBBB {
	function f1() external payable returns (uint);
}
interface I1BBBBBB {
	function f0() external view returns (uint);
}
interface I1BBBBB is I1BBBB, I1BBBBBB {
	function f0() override(I1BBBB, I1BBBBBB)
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I1BB is I1BBB, I1BBBBB {
	function f0() override(I1BBBB, I1BBBBB)
	external view returns (uint);
	function f1() override(I1BBB, I1BBBBB)
	external payable returns (uint);
}
interface I1B is I1BB {
	function f0() override
	external view returns (uint);
	function f2() external payable returns (uint);
}
interface I1BBBBBBBB {
	function f0() external view returns (uint);
}
interface I1BBBBBBB is I1B, I1BBBBBBBB {
	function f0() override(I1B, I1BBBBBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f3() external payable returns (uint);
}
interface I1 is I1B, I1BBBBBBB {
	function f0() override(I1B, I1BBBBBBB)
	external view returns (uint);
	function f1() override(I1BB, I1BBBBBBB)
	external payable returns (uint);
}
interface I3BBBB {
	function f0() external view returns (uint);
}
interface I3BBB is I3BBBB {
	function f1() external payable returns (uint);
}
interface I3BBBBBB {
	function f0() external view returns (uint);
}
interface I3BBBBB is I3BBBB, I3BBBBBB {
	function f0() override(I3BBBB, I3BBBBBB)
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I3BB is I3BBB, I3BBBBB {
	function f0() override(I3BBBB, I3BBBBB)
	external view returns (uint);
	function f1() override(I3BBB, I3BBBBB)
	external payable returns (uint);
}
interface I3B is I3BB {
	function f1() override
	external payable returns (uint);
	function f2() external payable returns (uint);
}
interface I3BBBBBBBB {
	function f0() external view returns (uint);
}
interface I3BBBBBBB is I3BB, I3BBBBBBBB {
	function f0() override(I3BB, I3BBBBBBBB)
	external view returns (uint);
	function f2() external payable returns (uint);
}
interface I3 is I3B, I3BBBBBBB {
	function f0() override(I3BB, I3BBBBBBB)
	external view returns (uint);
	function f1() override(I3B, I3BB)
	external payable returns (uint);
	function f2() override(I3B, I3BBBBBBB)
	external payable returns (uint);
}
interface I4BB {
	function f0() external view returns (uint);
}
interface I4B is I4BB {
	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I4 is I4B {
}
interface I5BB {
	function f0() external view returns (uint);
}
interface I5B is I5BB {
	function f1() external payable returns (uint);
}
interface I5BBBB {
	function f0() external view returns (uint);
}
interface I5BBB is I5BB, I5BBBB {
	function f0() override(I5BB, I5BBBB)
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I5 is I5B, I5BBB {
	function f0() override(I5BB, I5BBB)
	external view returns (uint);
	function f1() override(I5B, I5BBB)
	external payable returns (uint);
}
interface I6BB {
	function f0() external view returns (uint);
}
interface I6B is I6BB {
	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
}
interface I6 is I6B {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
}
contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}
