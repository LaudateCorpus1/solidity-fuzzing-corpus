pragma solidity >=0.0;
interface I0B {
	function f0() external payable returns (uint);
}
interface I0 is I0B {
	function f1() external payable returns (uint);
}
interface I1BB {
	function f0() external payable returns (uint);
	function f1() external payable returns (uint);
}
interface I1B is I1BB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I1BBBBB {
	function f0() external payable returns (uint);
}
interface I1BBBB is I1BBBBB {
}
interface I1BBB is I1BB, I1BBBB {
	function f0() override(I1BB, I1BBBBB)
	external payable returns (uint);
}
interface I1BBBBBB is I1BBB {
	function f2() external view returns (uint);
}
interface I1 is I1B, I1BBB, I1BBBBBB {
	function f0() override(I1B, I1BBB)
	external payable returns (uint);
	function f1() override(I1B, I1BB)
	external payable returns (uint);
	function f3() external payable returns (uint);
}
interface I3BBB {
	function f0() external payable returns (uint);
}
interface I3BB is I3BBB {
}
interface I3B is I3BB {
	function f1() external view returns (uint);
}
interface I3 is I3B {
	function f1() override
	external view returns (uint);
}
interface C4BBBB {
	function f0() external payable returns (uint);
}
interface C4BBB is C4BBBB {
}
interface C4BB is C4BBB {
	function f0() override
	external payable returns (uint);
}
contract C4B is C4BB {
	function f0() virtual external payable
	override
	returns (uint)
	{
		return 1402304087;
	}
}
abstract contract C4 is C4B {
	function f0() virtual external payable
	override
	returns (uint)
	{
		return 1842513780;
	}
}
interface I5BBB {
}
interface I5BB is I5BBB {
	function f0() external view returns (uint);
}
interface I5B is I5BB {
}
interface I5BBBBBB {
	function f0() external view returns (uint);
}
interface I5BBBBB is I5BBBBBB {
	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I5BBBB is I5BB, I5BBBBB {
	function f0() override(I5BB, I5BBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I5 is I5B, I5BBBB {
	function f0() override(I5BB, I5BBBB)
	external view returns (uint);
	function f2() external payable returns (uint);
}
interface C6BBBB {
	function f0() external payable returns (uint);
}
interface C6BBB is C6BBBB {
	function f0() override
	external payable returns (uint);
}
interface C6BB is C6BBB {
}
interface C6B is C6BB {
	function f0() override
	external payable returns (uint);
}
contract C6 is C6B {
	function f0() external payable
	override
	returns (uint)
	{
		return 1814467857;
	}
}
interface I7 {
	function f0() external view returns (uint);
}
interface I8BBB {
	function f0() external payable returns (uint);
}
interface I8BB is I8BBB {
	function f0() override
	external payable returns (uint);
}
interface I8B is I8BB {
	function f1() external view returns (uint);
}
interface I8 is I8B {
	function f1() override
	external view returns (uint);
	function f2() external view returns (uint);
}
interface I9 {
	function f0() external view returns (uint);
}
contract C11 {
	function f0() virtual public pure
	
	returns (uint)
	{
		return 942409124;
	}
}
interface I12B {
	function f0() external payable returns (uint);
	function f1() external payable returns (uint);
}
interface I12 is I12B {
}
library L13 {
	function f0(uint) external pure returns (uint)
	{
		return 1957747793;
	}
}
contract C {
	using L13 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1957747793)
			return 1;
		return 0;
	}
}
