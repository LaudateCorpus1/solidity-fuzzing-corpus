
pragma solidity >=0.0;






interface C2BBB {

	function f0() external view returns (uint);
}
interface C2BB is C2BBB {

	function f0() override
	external view returns (uint);
}
interface C2B is C2BB {

	function f0() override
	external view returns (uint);
}
contract C2 is C2B {

	function f0() virtual external view
	override
	returns (uint)
	{
		return 971846536;
	}
}



interface I3BB {

	function f0() external view returns (uint);
}
interface I3B is I3BB {

}
interface I3 is I3B {

	function f0() override
	external view returns (uint);
}
library L4 {

	function f0(uint) public pure returns (uint)
	{
		return 846930886;
	}
}




interface C5BBB {

	function f0() external view returns (uint);
}
interface C5BB is C5BBB {

}
interface C5B is C5BB {

	function f0() override
	external view returns (uint);
}
contract C5 is C5B {

	function f0() virtual external view
	override
	returns (uint)
	{
		return 1055691416;
	}
}


abstract contract C6B {

}

contract C6BB is C6B {

}









interface C6BBBBBBBBBBB {

	function f0() external payable returns (uint);
	function f1() external pure returns (uint);
}
interface C6BBBBBBBBBB is C6BBBBBBBBBBB {

	function f0() override
	external payable returns (uint);
}

interface C6BBBBBBBBBBBB is C6BBBBBBBBBBB {

	function f2() external payable returns (uint);
}
interface C6BBBBBBBBB is C6BBBBBBBBBB, C6BBBBBBBBBBBB {

	function f0() override(C6BBBBBBBBBB, C6BBBBBBBBBBB)
	external payable returns (uint);
	function f1() override
	external pure returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() external view returns (uint);
	function f4() external view returns (uint);
}
interface C6BBBBBBBB is C6BBBBBBBBB {

	function f1() override
	external pure returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
}

interface C6BBBBBBBBBBBBB is C6BBBBBBBBB {

	function f3() override
	external view returns (uint);
	function f4() override
	external view returns (uint);
	function f5() external payable returns (uint);
}
interface C6BBBBBBB is C6BBBBBBBB, C6BBBBBBBBBBBBB {

	function f0() override
	external payable returns (uint);
	function f1() override(C6BBBBBBBB, C6BBBBBBBBB)
	external pure returns (uint);
	function f2() override(C6BBBBBBBB, C6BBBBBBBBB)
	external payable returns (uint);
	function f3() override(C6BBBBBBBB, C6BBBBBBBBBBBBB)
	external view returns (uint);
	function f4() override(C6BBBBBBBBB, C6BBBBBBBBBBBBB)
	external view returns (uint);
	function f5() override
	external payable returns (uint);
}
abstract contract C6BBBBBB is C6BBBBBBB {

	function f0() virtual external payable
	override
	returns (uint);
	function f1() virtual external pure
	override
	returns (uint);
	function f2() external payable
	override
	returns (uint)
	{
		return 518008164;
	}
	function f3() virtual external view
	override
	returns (uint);
	function f4() virtual external view
	override
	returns (uint)
	{
		return 930476062;
	}
	function f5() virtual external payable
	override
	returns (uint);
}
contract C6BBBBB is C6BBBBBB {

	function f0() external payable
	override
	returns (uint)
	{
		return 1912448569;
	}
	function f1() virtual external pure
	override
	returns (uint)
	{
		return 1466794091;
	}
	function f3() external view
	override
	returns (uint)
	{
		return 2033509083;
	}
	function f4() external view
	override
	returns (uint)
	{
		return 2144655890;
	}
	function f5() external payable
	override
	returns (uint)
	{
		return 1925664386;
	}
}
contract C6BBBB is C6BBBBB {

	function f1() external pure
	override
	returns (uint)
	{
		return 901706828;
	}
}
contract C6BBB is C6BB, C6BBBB {

}
abstract contract C6 is C6B, C6BB, C6BBB {

}







interface C7BBBBBB {

	function f0() external payable returns (uint);
	function f1() external pure returns (uint);
}
interface C7BBBBB is C7BBBBBB {

	function f0() override
	external payable returns (uint);
	function f1() override
	external pure returns (uint);
}

interface C7BBBBBBB is C7BBBBB {

	function f0() override
	external payable returns (uint);
	function f1() override
	external pure returns (uint);
	function f2() external payable returns (uint);
}
interface C7BBBB is C7BBBBB, C7BBBBBBB {

	function f0() override(C7BBBBB, C7BBBBBBB)
	external payable returns (uint);
	function f1() override(C7BBBBB, C7BBBBBBB)
	external pure returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() external view returns (uint);
	function f4() external view returns (uint);
}
interface C7BBB is C7BBBB {

	function f1() override
	external pure returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external view returns (uint);
}

interface C7BBBBBBBB is C7BBB {

	function f3() override
	external view returns (uint);
	function f5() external payable returns (uint);
}
interface C7BB is C7BBB, C7BBBBBBBB {

	function f0() override
	external payable returns (uint);
	function f1() override
	external pure returns (uint);
	function f3() override(C7BBB, C7BBBBBBBB)
	external view returns (uint);
	function f5() override
	external payable returns (uint);
}
abstract contract C7B is C7BB {

	function f0() virtual external payable
	override
	returns (uint)
	{
		return 1281201943;
	}
	function f1() virtual external pure
	override
	returns (uint);
	function f2() virtual external payable
	override
	returns (uint);
	function f3() virtual external view
	override
	returns (uint);
	function f4() external view
	override
	returns (uint)
	{
		return 2136380593;
	}
	function f5() virtual external payable
	override
	returns (uint)
	{
		return 1181373753;
	}
}
contract C7 is C7B {

	function f1() virtual external pure
	override
	returns (uint)
	{
		return 1321935141;
	}
	function f2() external payable
	override
	returns (uint)
	{
		return 1391724800;
	}
	function f3() external view
	override
	returns (uint)
	{
		return 596423304;
	}
	function f5() virtual external payable
	override
	returns (uint)
	{
		return 1572864915;
	}
}
library L8 {

	function f0(uint) internal pure returns (uint)
	{
		return 596516649;
	}
}


contract C {
	using L4 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 846930886)
			return 1;
		return 0;
	}
}

