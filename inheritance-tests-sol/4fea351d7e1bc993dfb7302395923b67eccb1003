
pragma solidity >=0.0;







interface I0BBBB {

}
interface I0BBB is I0BBBB {

}
interface I0BB is I0BBB {

}
interface I0B is I0BB {

}

interface I0BBBBB is I0BB {

	function f0() external payable returns (uint);
}
interface I0 is I0B, I0BBBBB {

}

contract C1 {

	function f0() external pure
	
	returns (uint)
	{
		return 1669237718;
	}
}


interface C2B {

	function f0() external view returns (uint);
}

interface C2BB is C2B {

	function f1() external view returns (uint);
}
contract C2 is C2B, C2BB {

	function f0() virtual external view
	override
	returns (uint)
	{
		return 1048498435;
	}
	function f1() external view
	override
	returns (uint)
	{
		return 1827861707;
	}
	function f2() virtual public pure
	
	returns (uint)
	{
		return 1199337955;
	}
}



interface I3BB {

	function f0() external view returns (uint);
}
interface I3B is I3BB {

	function f1() external payable returns (uint);
}


interface I3BBBB {

	function f0() external view returns (uint);
}
interface I3BBB is I3BB, I3BBBB {

	function f0() override(I3BB, I3BBBB)
	external view returns (uint);
	function f1() external payable returns (uint);
}


interface I3BBBBBB {

	function f0() external view returns (uint);
}
interface I3BBBBB is I3BBBB, I3BBBBBB {

	function f0() override(I3BBBB, I3BBBBBB)
	external view returns (uint);
}
interface I3 is I3B, I3BBB, I3BBBBB {

	function f0() override(I3BB, I3BBB, I3BBBBB)
	external view returns (uint);
	function f1() override(I3B, I3BBB)
	external payable returns (uint);
}



interface I4BB {

	function f0() external view returns (uint);
}
interface I4B is I4BB {

	function f1() external view returns (uint);
}
interface I4 is I4B {

	function f0() override
	external view returns (uint);
}





interface I5BBBB {

	function f0() external view returns (uint);
}
interface I5BBB is I5BBBB {

	function f1() external payable returns (uint);
}

interface I5BBBBB is I5BBBB {

	function f1() external payable returns (uint);
}
interface I5BB is I5BBB, I5BBBBB {

	function f1() override(I5BBB, I5BBBBB)
	external payable returns (uint);
}
interface I5B is I5BB {

	function f2() external payable returns (uint);
}


interface I5BBBBBBB {

	function f0() external view returns (uint);
}
interface I5BBBBBB is I5BB, I5BBBBBBB {

	function f0() override(I5BBBB, I5BBBBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() external payable returns (uint);
}
interface I5 is I5B, I5BBBBBB {

	function f0() override(I5BBBB, I5BBBBBB)
	external view returns (uint);
	function f1() override(I5BB, I5BBBBBB)
	external payable returns (uint);
	function f2() override(I5B, I5BBBBBB)
	external payable returns (uint);
}


contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}

