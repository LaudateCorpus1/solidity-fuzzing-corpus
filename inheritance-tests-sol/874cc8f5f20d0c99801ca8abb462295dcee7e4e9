
pragma solidity >=0.0;












interface C0BBBBBBBBB {

	function f0() external payable returns (uint);
}
interface C0BBBBBBBB is C0BBBBBBBBB {

}
interface C0BBBBBBB is C0BBBBBBBB {

	function f0() override
	external payable returns (uint);
}
interface C0BBBBBB is C0BBBBBBB {

}
interface C0BBBBB is C0BBBBBB {

	function f1() external view returns (uint);
}
interface C0BBBB is C0BBBBB {

}
interface C0BBB is C0BBBB {

}
interface C0BB is C0BBB {

	function f2() external view returns (uint);
}
interface C0B is C0BB {

	function f0() override
	external payable returns (uint);
	function f3() external payable returns (uint);
}
contract C0 is C0B {

	function f0() external payable
	override
	returns (uint)
	{
		return 1931656580;
	}
	function f1() external view
	override
	returns (uint)
	{
		return 1936030137;
	}
	function f2() virtual external view
	override
	returns (uint)
	{
		return 353718330;
	}
	function f3() virtual external payable
	override
	returns (uint)
	{
		return 1947433875;
	}
}
library L3 {

	function f0(uint) private pure returns (uint)
	{
		return 846930886;
	}
}
library L4 {

	function f0(uint) public pure returns (uint)
	{
		return 1681692777;
	}
}
library L5 {

	function f0(uint) private pure returns (uint)
	{
		return 1714636915;
	}
	function f1(uint) public view returns (uint)
	{
		return 1957747793;
	}
}




interface C7BBB {

	function f0() external payable returns (uint);
}
interface C7BB is C7BBB {

}
contract C7B is C7BB {

	function f0() external payable
	override
	returns (uint)
	{
		return 153892771;
	}
}
contract C7 is C7B {

}
library L9 {

	function f0(uint) public pure returns (uint)
	{
		return 424238335;
	}
}


contract C {
	using L5 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f1() != 1957747793)
			return 1;
		return 0;
	}
}

