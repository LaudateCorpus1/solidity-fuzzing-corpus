
pragma solidity >=0.0;











interface C0BBBBBBBB {

	function f0() external view returns (uint);
}
interface C0BBBBBBB is C0BBBBBBBB {

}
interface C0BBBBBB is C0BBBBBBB {

	function f0() override
	external view returns (uint);
}
interface C0BBBBB is C0BBBBBB {

}
interface C0BBBB is C0BBBBB {

}
interface C0BBB is C0BBBB {

	function f1() external payable returns (uint);
}
interface C0BB is C0BBB {

}
contract C0B is C0BB {

	function f0() external view
	override
	returns (uint)
	{
		return 1271135913;
	}
	function f1() external payable
	override
	returns (uint)
	{
		return 1882556969;
	}
}
contract C0 is C0B {

}



interface C1BB {

	function f0() external view returns (uint);
}
interface C1B is C1BB {

}
contract C1 is C1B {

	function f0() virtual external view
	override
	returns (uint)
	{
		return 914937185;
	}
}



interface C2BB {

	function f0() external view returns (uint);
}
interface C2B is C2BB {

	function f0() override
	external view returns (uint);
}
contract C2 is C2B {

	function f0() external view
	override
	returns (uint)
	{
		return 2064876628;
	}
}
library L3 {

	function f0(uint) private pure returns (uint)
	{
		return 1804289383;
	}
}




contract C4BBB {

	function f0() external pure
	
	returns (uint)
	{
		return 353718330;
	}
}
contract C4BB is C4BBB {

}
contract C4B is C4BB {

}
contract C4 is C4B {

}




interface I5BBB {

	function f0() external payable returns (uint);
}
interface I5BB is I5BBB {

}
interface I5B is I5BB {

	function f0() override
	external payable returns (uint);
}
interface I5 is I5B {

	function f0() override
	external payable returns (uint);
}
library L6 {

	function f0(uint) private pure returns (uint)
	{
		return 846930886;
	}
	function f1(uint) external pure returns (uint)
	{
		return 1681692777;
	}
}


contract C {
	using L6 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f1() != 1681692777)
			return 1;
		return 0;
	}
}

