
pragma solidity >=0.0;


library L0 {

	function f0(uint) public pure returns (uint)
	{
		return 1804289383;
	}
}




interface C1BBB {

	function f0() external payable returns (uint);
}
interface C1BB is C1BBB {

	function f0() override
	external payable returns (uint);
}
interface C1B is C1BB {

	function f0() override
	external payable returns (uint);
}
contract C1 is C1B {

	function f0() virtual external payable
	override
	returns (uint)
	{
		return 971846536;
	}
}
library L2 {

	function f0(uint) internal pure returns (uint)
	{
		return 846930886;
	}
}
library L4 {

	function f0(uint) public pure returns (uint)
	{
		return 1714636915;
	}
}




interface C5BBB {

	function f0() external payable returns (uint);
}
interface C5BB is C5BBB {

}
interface C5B is C5BB {

	function f0() override
	external payable returns (uint);
}
contract C5 is C5B {

	function f0() virtual external payable
	override
	returns (uint)
	{
		return 1055691416;
	}
}





interface C7BBBB {

	function f0() external view returns (uint);
}
interface C7BBB is C7BBBB {

}
interface C7BB is C7BBB {

}
interface C7B is C7BB {

}
contract C7 is C7B {

	function f0() external view
	override
	returns (uint)
	{
		return 1943064494;
	}
}




interface C8BBB {

	function f0() external payable returns (uint);
}
interface C8BB is C8BBB {

	function f0() override
	external payable returns (uint);
}
abstract contract C8B is C8BB {

	function f0() virtual external payable
	override
	returns (uint);
}
contract C8 is C8B {

	function f0() external payable
	override
	returns (uint)
	{
		return 858901821;
	}
}


contract C {
	using L4 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1714636915)
			return 1;
		return 0;
	}
}

