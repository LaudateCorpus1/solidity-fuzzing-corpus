
pragma solidity >=0.0;



contract C0 {

	function f0() public view
	
	returns (uint)
	{
		return 48271;
	}
}











interface I1BBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I1BBBBBBBBB is I1BBBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
}

interface I1BBBBBBBBBBB is I1BBBBBBBBBB {

	function f1() external view returns (uint);
}
interface I1BBBBBBBB is I1BBBBBBBBB, I1BBBBBBBBBBB {

	function f0() override(I1BBBBBBBBB, I1BBBBBBBBBB)
	external view returns (uint);
	function f1() override(I1BBBBBBBBB, I1BBBBBBBBBBB)
	external view returns (uint);
	function f2() external payable returns (uint);
	function f3() external view returns (uint);
}
interface I1BBBBBBB is I1BBBBBBBB {

}
interface I1BBBBBB is I1BBBBBBB {

}
interface I1BBBBB is I1BBBBBB {

	function f1() override
	external view returns (uint);
	function f4() external payable returns (uint);
}
interface I1BBBB is I1BBBBB {

	function f1() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
}

interface I1BBBBBBBBBBBB is I1BBBB {

	function f0() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() external payable returns (uint);
}
interface I1BBB is I1BBBB, I1BBBBBBBBBBBB {

	function f0() override(I1BBBBBBBB, I1BBBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f4() override(I1BBBB, I1BBBBBBBBBBBB)
	external payable returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() external payable returns (uint);
	function f7() external view returns (uint);
	function f8() external payable returns (uint);
}
interface I1BB is I1BBB {

	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f6() override
	external payable returns (uint);
}
interface I1B is I1BB {

	function f1() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f6() override
	external payable returns (uint);
	function f8() override
	external payable returns (uint);
}

interface I1BBBBBBBBBBBBB is I1BB {

	function f2() override
	external payable returns (uint);
	function f6() override
	external payable returns (uint);
	function f8() override
	external payable returns (uint);
	function f9() external payable returns (uint);
}
interface I1 is I1B, I1BBBBBBBBBBBBB {

	function f1() override(I1B, I1BBB)
	external view returns (uint);
	function f2() override(I1BB, I1BBBBBBBBBBBBB)
	external payable returns (uint);
	function f3() override(I1B, I1BB)
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() override(I1B, I1BBBBBBBBBBBBB)
	external payable returns (uint);
	function f7() override
	external view returns (uint);
	function f8() override(I1B, I1BBBBBBBBBBBBB)
	external payable returns (uint);
	function f9() override
	external payable returns (uint);
}

contract C2 {

	function f0() public view
	
	returns (uint)
	{
		return 1447645967;
	}
	function f1() virtual public pure
	
	returns (uint)
	{
		return 200599677;
	}
}
library L3 {

	function f0(uint) external pure returns (uint)
	{
		return 1714636915;
	}
}




contract C4BBB {

	function f0() virtual public pure
	
	returns (uint)
	{
		return 1788215331;
	}
}
contract C4BB is C4BBB {

	function f0() public pure
	override
	returns (uint)
	{
		return 355190910;
	}
}
contract C4B is C4BB {

}
contract C4 is C4B {

}
library L5 {

	function f0(uint) public pure returns (uint)
	{
		return 1957747793;
	}
	function f1(uint) public pure returns (uint)
	{
		return 424238335;
	}
}











interface I6BBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I6BBBBBBBBB is I6BBBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
}

interface I6BBBBBBBBBBB is I6BBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f2() external view returns (uint);
}
interface I6BBBBBBBB is I6BBBBBBBBB, I6BBBBBBBBBBB {

	function f0() override(I6BBBBBBBBB, I6BBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f3() external payable returns (uint);
	function f4() external view returns (uint);
}
interface I6BBBBBBB is I6BBBBBBBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override
	external payable returns (uint);
}
interface I6BBBBBB is I6BBBBBBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
}
interface I6BBBBB is I6BBBBBB {

	function f2() override
	external view returns (uint);
	function f3() override
	external payable returns (uint);
	function f5() external payable returns (uint);
}
interface I6BBBB is I6BBBBB {

}

interface I6BBBBBBBBBBBB is I6BBBB {

	function f2() override
	external view returns (uint);
	function f4() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() external payable returns (uint);
}
interface I6BBB is I6BBBB, I6BBBBBBBBBBBB {

	function f1() override
	external view returns (uint);
	function f2() override(I6BBBBB, I6BBBBBBBBBBBB)
	external view returns (uint);
	function f3() override
	external payable returns (uint);
	function f4() override(I6BBBBBBBB, I6BBBBBBBBBBBB)
	external view returns (uint);
	function f5() override(I6BBBBB, I6BBBBBBBBBBBB)
	external payable returns (uint);
	function f7() external view returns (uint);
}
interface I6BB is I6BBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() override
	external payable returns (uint);
	function f7() override
	external view returns (uint);
}
interface I6B is I6BB {

	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f6() override
	external payable returns (uint);
	function f7() override
	external view returns (uint);
}

interface I6BBBBBBBBBBBBB is I6BB {

	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f3() override
	external payable returns (uint);
	function f4() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() override
	external payable returns (uint);
	function f8() external payable returns (uint);
}
interface I6 is I6B, I6BBBBBBBBBBBBB {

	function f0() override(I6B, I6BBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I6B, I6BBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override(I6B, I6BB)
	external view returns (uint);
	function f3() override(I6BBB, I6BBBBBBBBBBBBB)
	external payable returns (uint);
	function f4() override(I6BBB, I6BBBBBBBBBBBBB)
	external view returns (uint);
	function f5() override(I6BB, I6BBBBBBBBBBBBB)
	external payable returns (uint);
	function f6() override(I6B, I6BBBBBBBBBBBBB)
	external payable returns (uint);
	function f7() override(I6B, I6BB)
	external view returns (uint);
	function f8() override
	external payable returns (uint);
}






interface C7BBBBB {

	function f0() external payable returns (uint);
}
interface C7BBBB is C7BBBBB {

}
interface C7BBB is C7BBBB {

}
interface C7BB is C7BBB {

}
contract C7B is C7BB {

	function f0() virtual external payable
	override
	returns (uint)
	{
		return 1722108130;
	}
}
contract C7 is C7B {

}


contract C {
	using L3 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1714636915)
			return 1;
		return 0;
	}
}

