pragma solidity >=0.0;
interface I0BB {
	function f0() external payable returns (uint);
}
interface I0B is I0BB {
}
interface I0 is I0B {
	function f0() override
	external payable returns (uint);
}
interface I2BBBB {
	function f0() external payable returns (uint);
}
interface I2BBB is I2BBBB {
}
interface I2BB is I2BBB {
}
interface I2B is I2BB {
}
interface I2 is I2B {
}
interface I3BBBBB {
	function f0() external view returns (uint);
}
interface I3BBBB is I3BBBBB {
}
interface I3BBB is I3BBBB {
	function f1() external view returns (uint);
}
interface I3BB is I3BBB {
}
interface I3BBBBBB is I3BBB {
	function f0() override
	external view returns (uint);
	function f2() external payable returns (uint);
}
interface I3B is I3BB, I3BBBBBB {
	function f0() override(I3BBBBB, I3BBBBBB)
	external view returns (uint);
	function f1() override
	external view returns (uint);
}
interface I3 is I3B {
	function f2() override
	external payable returns (uint);
}
interface I4B {
	function f0() external view returns (uint);
}
interface I4 is I4B {
	function f0() override
	external view returns (uint);
}
library L7 {
	function f0(uint) external pure returns (uint)
	{
		return 1957747793;
	}
}
interface I8BBBB {
	function f0() external view returns (uint);
}
interface I8BBB is I8BBBB {
}
interface I8BB is I8BBB {
}
interface I8B is I8BB {
	function f0() override
	external view returns (uint);
}
interface I8 is I8B {
	function f0() override
	external view returns (uint);
}
interface I10 {
	function f0() external view returns (uint);
}
contract C {
	using L7 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1957747793)
			return 1;
		return 0;
	}
}
