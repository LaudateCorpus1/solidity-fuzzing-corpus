
pragma solidity >=0.0;




abstract contract C1B {

}







interface C1BBBBBBBB {

}
interface C1BBBBBBB is C1BBBBBBBB {

}
interface C1BBBBBB is C1BBBBBBB {

}
interface C1BBBBB is C1BBBBBB {

}
interface C1BBBB is C1BBBBB {

}








interface C1BBBBBBBBBBBBBBBB {

}
interface C1BBBBBBBBBBBBBBB is C1BBBBBBBBBBBBBBBB {

}
interface C1BBBBBBBBBBBBBB is C1BBBBBBBBBBBBBBB {

}
interface C1BBBBBBBBBBBBB is C1BBBBBBBBBBBBBB {

}
interface C1BBBBBBBBBBBB is C1BBBBBBBBBBBBB {

}
interface C1BBBBBBBBBBB is C1BBBBBBBBBBBB {

}
interface C1BBBBBBBBBB is C1BBBBBBBBBBB {

}
interface C1BBBBBBBBB is C1BBBB, C1BBBBBBBBBB {

}
interface C1BBB is C1BBBB, C1BBBBBBBBB {

}
contract C1BB is C1B, C1BBB {

}


interface C1BBBBBBBBBBBBBBBBBB {

}
contract C1BBBBBBBBBBBBBBBBB is C1B, C1BBBBBBBBBBBBBBBBBB {

}



interface C1BBBBBBBBBBBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface C1BBBBBBBBBBBBBBBBBBBB is C1BBBBBBBBBBBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface C1BBBBBBBBBBBBBBBBBBB is C1BBBBBBBBBBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
}

contract C1BBBBBBBBBBBBBBBBBBBBBB is C1BB {

}







interface C1BBBBBBBBBBBBBBBBBBBBBBBBBBBBB {

}
interface C1BBBBBBBBBBBBBBBBBBBBBBBBBBBB is C1BBBBBBBBBBBBBBBBBBBBBBBBBBBBB {

}
interface C1BBBBBBBBBBBBBBBBBBBBBBBBBBB is C1BBBBBBBBBBBBBBBBBBBBBBBBBBBB {

}
interface C1BBBBBBBBBBBBBBBBBBBBBBBBBB is C1BBBBBBBBBBBBBBBBBBBBBBBBBBB {

}
interface C1BBBBBBBBBBBBBBBBBBBBBBBBB is C1BBBBBBBBBBBBBBBBBBBBBBBBBB {

}
interface C1BBBBBBBBBBBBBBBBBBBBBBBB is C1BBBBBBBBBBBBBBBBBBBBBBBBB {

}
contract C1BBBBBBBBBBBBBBBBBBBBBBB is C1BBBBBBBBBBBBBBBBBBBBBB, C1BBBBBBBBBBBBBBBBBBBBBBBB {

}
contract C1 is C1B, C1BB, C1BBBBBBBBBBBBBBBBB, C1BBBBBBBBBBBBBBBBBBB, C1BBBBBBBBBBBBBBBBBBBBBB, C1BBBBBBBBBBBBBBBBBBBBBBB {

	function f0() virtual external view
	override
	returns (uint)
	{
		return 1363731580;
	}
}



interface I2BB {

	function f0() external view returns (uint);
}
interface I2B is I2BB {

	function f1() external view returns (uint);
	function f2() external payable returns (uint);
}
interface I2 is I2B {

	function f0() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
}

contract C3 {

	function f0() external pure
	
	returns (uint)
	{
		return 520615136;
	}
}


contract C {
	function test() public returns (uint)
	{
			C1 tc0 = new C1();
			if (tc0.f0() != 1363731580)
				return 1;
			C3 tc1 = new C3();
			if (tc1.f0() != 520615136)
				return 2;
			return 0;
	}
}

