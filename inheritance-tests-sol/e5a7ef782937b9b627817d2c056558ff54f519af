
pragma solidity >=0.0;


library L0 {

	function f0(uint) public view returns (uint)
	{
		return 1804289383;
	}
}


interface I1B {

	function f0() external view returns (uint);
}
interface I1 is I1B {

}


interface I2B {

	function f0() external view returns (uint);
}
interface I2 is I2B {

}






interface I3BBBBB {

	function f0() external view returns (uint);
}

interface I3BBBBBB is I3BBBBB {

	function f1() external view returns (uint);
}
interface I3BBBB is I3BBBBB, I3BBBBBB {

	function f0() override
	external view returns (uint);
}
interface I3BBB is I3BBBB {

	function f0() override
	external view returns (uint);
}
interface I3BB is I3BBB {

}


interface I3BBBBBBBB {

	function f0() external view returns (uint);
}
interface I3BBBBBBB is I3BBB, I3BBBBBBBB {

	function f0() override(I3BBB, I3BBBBBBBB)
	external view returns (uint);
}
interface I3B is I3BB, I3BBBBBBB {

	function f0() override(I3BBB, I3BBBBBBB)
	external view returns (uint);
	function f1() override
	external view returns (uint);
}

interface I3BBBBBBBBB is I3BBBBBBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() external payable returns (uint);
}
interface I3 is I3B, I3BBBBBBBBB {

	function f0() override(I3B, I3BBBBBBBBB)
	external view returns (uint);
	function f1() override(I3B, I3BBBBBBBBB)
	external view returns (uint);
}




interface I4BBB {

	function f0() external view returns (uint);
}
interface I4BB is I4BBB {

	function f0() override
	external view returns (uint);
}
interface I4B is I4BB {

}

interface I4BBBB is I4BB {

	function f1() external payable returns (uint);
}
interface I4 is I4B, I4BBBB {

	function f1() override
	external payable returns (uint);
}





interface I5BBBB {

	function f0() external view returns (uint);
}


interface I5BBBBBB {

	function f0() external view returns (uint);
}
interface I5BBBBB is I5BBBB, I5BBBBBB {

	function f0() override(I5BBBB, I5BBBBBB)
	external view returns (uint);
}
interface I5BBB is I5BBBB, I5BBBBB {

	function f0() override(I5BBBB, I5BBBBB)
	external view returns (uint);
	function f1() external view returns (uint);
}
interface I5BB is I5BBB {

	function f0() override
	external view returns (uint);
}
interface I5B is I5BB {

	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
}

interface I5BBBBBBB is I5B {

	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() external view returns (uint);
}

interface I5BBBBBBBB is I5B {

	function f2() external view returns (uint);
}
interface I5 is I5B, I5BBBBBBB, I5BBBBBBBB {

	function f0() override(I5B, I5BBBBBBB)
	external view returns (uint);
	function f1() override(I5B, I5BBBBBBB)
	external view returns (uint);
	function f2() override(I5BBBBBBB, I5BBBBBBBB)
	external view returns (uint);
}



interface I6BB {

	function f0() external view returns (uint);
}
interface I6B is I6BB {

	function f1() external payable returns (uint);
}
interface I6 is I6B {

	function f0() override
	external view returns (uint);
}






interface I7BBBBB {

	function f0() external view returns (uint);
}

interface I7BBBBBB is I7BBBBB {

	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
}
interface I7BBBB is I7BBBBB, I7BBBBBB {

	function f0() override(I7BBBBB, I7BBBBBB)
	external view returns (uint);
}
interface I7BBB is I7BBBB {

	function f0() override
	external view returns (uint);
}
interface I7BB is I7BBB {

	function f0() override
	external view returns (uint);
}


interface I7BBBBBBBB {

	function f0() external view returns (uint);
}
interface I7BBBBBBB is I7BBB, I7BBBBBBBB {

	function f0() override(I7BBB, I7BBBBBBBB)
	external view returns (uint);
	function f1() override
	external view returns (uint);
}
interface I7B is I7BB, I7BBBBBBB {

	function f0() override(I7BB, I7BBBBBBB)
	external view returns (uint);
	function f1() override(I7BBBBBB, I7BBBBBBB)
	external view returns (uint);
}

interface I7BBBBBBBBB is I7B {

	function f1() override
	external view returns (uint);
	function f2() external payable returns (uint);
}
interface I7 is I7B, I7BBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f1() override(I7B, I7BBBBBBBBB)
	external view returns (uint);
	function f2() override
	external payable returns (uint);
}




interface I8BBB {

}
interface I8BB is I8BBB {

	function f0() external view returns (uint);
}
interface I8B is I8BB {

}



interface I8BBBBBB {

	function f0() external view returns (uint);
}
interface I8BBBBB is I8BBBBBB {

	function f1() external payable returns (uint);
}
interface I8BBBB is I8BB, I8BBBBB {

	function f0() override(I8BB, I8BBBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I8 is I8B, I8BBBB {

	function f0() override(I8BB, I8BBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() external payable returns (uint);
	function f3() external payable returns (uint);
}




interface I9BBB {

}
interface I9BB is I9BBB {

	function f0() external view returns (uint);
}
interface I9B is I9BB {

}


interface I9BBBBB {

	function f0() external view returns (uint);
}
interface I9BBBB is I9B, I9BBBBB {

	function f0() override(I9BB, I9BBBBB)
	external view returns (uint);
	function f1() external payable returns (uint);
}



interface I9BBBBBBBB {

	function f0() external view returns (uint);
}
interface I9BBBBBBB is I9BBBBBBBB {

	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I9BBBBBB is I9B, I9BBBBBBB {

	function f0() override(I9BB, I9BBBBBBB)
	external view returns (uint);
}
interface I9 is I9B, I9BBBB, I9BBBBBB {

	function f0() override(I9BB, I9BBBB, I9BBBBBB)
	external view returns (uint);
	function f1() override(I9BBBB, I9BBBBBBB)
	external payable returns (uint);
}

contract C10 {

	function f0() external pure
	
	returns (uint)
	{
		return 2022343286;
	}
}




interface I11BBB {

	function f0() external view returns (uint);
}
interface I11BB is I11BBB {

	function f0() override
	external view returns (uint);
}
interface I11B is I11BB {

}
interface I11 is I11B {

}
library L12 {

	function f0(uint) internal pure returns (uint)
	{
		return 2044897763;
	}
}
library L13 {

	function f0(uint) public view returns (uint)
	{
		return 1967513926;
	}
}


contract C {
	using L0 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1804289383)
			return 1;
		return 0;
	}
}

