
pragma solidity >=0.0;







interface C0BBBB {

	function f0() external view returns (uint);
}
interface C0BBB is C0BBBB {

	function f1() external payable returns (uint);
}
interface C0BB is C0BBB {

	function f0() override
	external view returns (uint);
}
abstract contract C0B is C0BB {

	function f0() virtual external view
	override
	returns (uint);
	function f1() virtual external payable
	override
	returns (uint);
}

abstract contract C0BBBBB is C0BB {

	function f0() virtual external view
	override
	returns (uint);
	function f1() virtual external payable
	override
	returns (uint);
}
contract C0 is C0B, C0BBBBB {

	function f0() external view
	override(C0BBBBB, C0B)
	returns (uint)
	{
		return 638022372;
	}
	function f1() external payable
	override(C0BBBBB, C0B)
	returns (uint)
	{
		return 1931656580;
	}
	function f2() virtual public pure
	
	returns (uint)
	{
		return 1402304087;
	}
}

contract C2 {

	function f0() virtual public pure
	
	returns (uint)
	{
		return 1936030137;
	}
}
library L3 {

	function f0(uint) external pure returns (uint)
	{
		return 846930886;
	}
	function f1(uint) internal pure returns (uint)
	{
		return 1681692777;
	}
	function f2(uint) external pure returns (uint)
	{
		return 1714636915;
	}
	function f3(uint) internal view returns (uint)
	{
		return 1957747793;
	}
}


interface I5B {

	function f0() external view returns (uint);
}
interface I5 is I5B {

}



interface C6BB {

	function f0() external view returns (uint);
}
interface C6B is C6BB {

	function f1() external payable returns (uint);
	function f2() external view returns (uint);
}
contract C6 is C6B {

	function f0() virtual external view
	override
	returns (uint)
	{
		return 1287522347;
	}
	function f1() external payable
	override
	returns (uint)
	{
		return 1057382352;
	}
	function f2() external view
	override
	returns (uint)
	{
		return 153892771;
	}
}


contract C {
	using L3 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 846930886)
			return 1;
		return 0;
	}
}

