pragma solidity >=0.0;
interface I1BBBBBBB {
	function f0() external payable returns (uint);
}
interface I1BBBBBB is I1BBBBBBB {
}
interface I1BBBBB is I1BBBBBB {
}
interface I1BBBB is I1BBBBB {
}
interface I1BBB is I1BBBB {
	function f0() override
	external payable returns (uint);
}
interface I1BB is I1BBB {
}
interface I1B is I1BB {
}
interface I1BBBBBBBB is I1B {
	function f1() external payable returns (uint);
}
interface I1 is I1B, I1BBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I2BBBBBBB {
	function f0() external payable returns (uint);
}
interface I2BBBBBB is I2BBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I2BBBBB is I2BBBBBB {
}
interface I2BBBB is I2BBBBB {
	function f0() override
	external payable returns (uint);
}
interface I2BBB is I2BBBB {
}
interface I2BB is I2BBB {
}
interface I2B is I2BB {
}
interface I2BBBBBBBB is I2BB {
	function f0() override
	external payable returns (uint);
	function f1() external payable returns (uint);
}
interface I2 is I2B, I2BBBBBBBB {
	function f0() override(I2BBBB, I2BBBBBBBB)
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I3BBBB {
	function f0() external view returns (uint);
}
interface I3BBB is I3BBBB {
	function f1() external payable returns (uint);
}
interface I3BBBBB is I3BBBB {
	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I3BB is I3BBB, I3BBBBB {
	function f0() override(I3BBBB, I3BBBBB)
	external view returns (uint);
	function f1() override(I3BBB, I3BBBBB)
	external payable returns (uint);
}
interface I3B is I3BB {
	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() external payable returns (uint);
}
interface I3BBBBBBB {
	function f0() external view returns (uint);
}
interface I3BBBBBB is I3BB, I3BBBBBBB {
	function f0() override(I3BB, I3BBBBBBB)
	external view returns (uint);
	function f2() external payable returns (uint);
}
interface I3 is I3B, I3BBBBBB {
	function f0() override(I3B, I3BBBBBB)
	external view returns (uint);
	function f1() override(I3B, I3BB)
	external payable returns (uint);
	function f2() override(I3B, I3BBBBBB)
	external payable returns (uint);
}
interface I4BB {
	function f0() external view returns (uint);
}
interface I4B is I4BB {
	function f1() external view returns (uint);
}
interface I4 is I4B {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
}
interface C5B {
	function f0() external view returns (uint);
}
interface C5BB is C5B {
	function f1() external view returns (uint);
}
contract C5 is C5B, C5BB {
	function f0() external view
	override
	returns (uint)
	{
		return 1857504539;
	}
	function f1() external view
	override
	returns (uint)
	{
		return 528959446;
	}
	function f2() virtual public pure
	
	returns (uint)
	{
		return 1968338683;
	}
}
interface I7BB {
	function f0() external view returns (uint);
}
interface I7B is I7BB {
	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
}
interface I7 is I7B {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
}
contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}
