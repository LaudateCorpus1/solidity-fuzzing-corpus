pragma solidity >=0.0;
interface I0BB {
	function f0() external view returns (uint);
	function f1() external payable returns (uint);
}
interface I0B is I0BB {
	function f2() external payable returns (uint);
}
interface I0 is I0B {
	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}
interface C1BBBBBBB {
	function f0() external payable returns (uint);
}
interface C1BBBBBB is C1BBBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() external view returns (uint);
}
interface C1BBBBB is C1BBBBBB {
}
interface C1BBBB is C1BBBBB {
}
interface C1BBB is C1BBBB {
	function f0() override
	external payable returns (uint);
}
interface C1BBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface C1BBBBBBBBB is C1BBBBBBBBBB {
}
interface C1BBBBBBBB is C1BBBB, C1BBBBBBBBB {
	function f0() override(C1BBBBBB, C1BBBBBBBBBB)
	external payable returns (uint);
}
interface C1BB is C1BBB, C1BBBBBBBB {
	function f0() override(C1BBB, C1BBBBBBBB)
	external payable returns (uint);
	function f1() override
	external view returns (uint);
}
interface C1B is C1BB {
	function f1() override
	external view returns (uint);
}
contract C1 is C1B {
	function f0() external payable
	override
	returns (uint)
	{
		return 921256890;
	}
	function f1() external view
	override
	returns (uint)
	{
		return 1389449997;
	}
}
interface C2BBB {
	function f0() external payable returns (uint);
}
interface C2BB is C2BBB {
	function f0() override
	external payable returns (uint);
}
interface C2B is C2BB {
}
interface C2BBBBBB {
	function f0() external payable returns (uint);
}
interface C2BBBBB is C2BBBBBB {
	function f0() override
	external payable returns (uint);
}
abstract contract C2BBBB is C2B, C2BBBBB {
	function f0() virtual external payable
	override(C2BBBBB, C2BB)
	returns (uint)
	{
		return 1709834337;
	}
}
contract C2 is C2B, C2BBBB {
	function f0() external payable
	override(C2BBBB, C2BB)
	returns (uint)
	{
		return 464135131;
	}
}
library L3 {
	function f0(uint) public pure returns (uint)
	{
		return 1681692777;
	}
}
library L4 {
	function f0(uint) public view returns (uint)
	{
		return 1714636915;
	}
}
interface C5BBB {
	function f0() external payable returns (uint);
}
interface C5BB is C5BBB {
	function f0() override
	external payable returns (uint);
}
abstract contract C5B is C5BB {
	function f0() virtual external payable
	override
	returns (uint);
}
contract C5 is C5B {
	function f0() virtual external payable
	override
	returns (uint)
	{
		return 194715758;
	}
}
contract C6 {
	function f0() virtual public pure
	
	returns (uint)
	{
		return 1735915146;
	}
}
abstract contract C7BB {
}
contract C7B is C7BB {
}
interface C7BBBBB {
	function f0() external payable returns (uint);
}
interface C7BBBB is C7BBBBB {
	function f0() override
	external payable returns (uint);
}
interface C7BBB is C7BBBB {
	function f0() override
	external payable returns (uint);
}
contract C7 is C7B, C7BBB {
	function f0() external payable
	override
	returns (uint)
	{
		return 2139221702;
	}
}
contract C {
	function test() public returns (uint)
	{
			C1 tc0 = new C1();
			if (tc0.f0() != 921256890)
				return 1;
			if (tc0.f1() != 1389449997)
				return 2;
			C2 tc1 = new C2();
			if (tc1.f0() != 464135131)
				return 3;
			C5 tc2 = new C5();
			if (tc2.f0() != 194715758)
				return 4;
			C6 tc3 = new C6();
			if (tc3.f0() != 1735915146)
				return 5;
			C7 tc4 = new C7();
			if (tc4.f0() != 2139221702)
				return 6;
			return 0;
	}
}
