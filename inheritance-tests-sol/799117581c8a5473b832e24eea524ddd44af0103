pragma solidity >=0.0;
interface C0BBB {
	function f0() external payable returns (uint);
}
interface C0BB is C0BBB {
}
contract C0B is C0BB {
	function f0() virtual external payable
	override
	returns (uint)
	{
		return 1914720637;
	}
}
contract C0 is C0B {
	function f1() virtual public pure
	
	returns (uint)
	{
		return 1105902161;
	}
}
interface C1BBB {
	function f0() external payable returns (uint);
}
interface C1BB is C1BBB {
}
interface C1B is C1BB {
}
contract C1 is C1B {
	function f0() external payable
	override
	returns (uint)
	{
		return 1250328747;
	}
}
contract C2B {
}
contract C2 is C2B {
	function f0() public view
	
	returns (uint)
	{
		return 1738531149;
	}
}
interface C3BBBBBBBB {
	function f0() external view returns (uint);
}
interface C3BBBBBBB is C3BBBBBBBB {
}
interface C3BBBBBB is C3BBBBBBB {
}
interface C3BBBBB is C3BBBBBB {
}
interface C3BBBB is C3BBBBB {
	function f0() override
	external view returns (uint);
}
interface C3BBB is C3BBBB {
	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface C3BB is C3BBB {
	function f1() override
	external payable returns (uint);
}
contract C3B is C3BB {
	function f0() virtual external view
	override
	returns (uint)
	{
		return 1947433875;
	}
	function f1() external payable
	override
	returns (uint)
	{
		return 2010567813;
	}
}
contract C3 is C3B {
}
contract C {
	function test() public returns (uint)
	{
			C0 tc0 = new C0();
			if (tc0.f0() != 1914720637)
				return 1;
			if (tc0.f1() != 1105902161)
				return 2;
			C0B tc1 = new C0B();
			if (tc1.f0() != 1914720637)
				return 3;
			C1 tc2 = new C1();
			if (tc2.f0() != 1250328747)
				return 4;
			C2 tc3 = new C2();
			if (tc3.f0() != 1738531149)
				return 5;
			C3 tc4 = new C3();
			if (tc4.f0() != 1947433875)
				return 6;
			if (tc4.f1() != 2010567813)
				return 7;
			C3B tc5 = new C3B();
			if (tc5.f0() != 1947433875)
				return 8;
			if (tc5.f1() != 2010567813)
				return 9;
			return 0;
	}
}
