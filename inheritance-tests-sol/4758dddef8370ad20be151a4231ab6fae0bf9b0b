pragma solidity >=0.0;
interface I0BB {
	function f0() external view returns (uint);
}
interface I0BBBBBBB {
	function f0() external view returns (uint);
}
interface I0BBBBBB is I0BBBBBBB {
}
interface I0BBBBB is I0BBBBBB {
	function f0() override
	external view returns (uint);
}
interface I0BBBB is I0BBBBB {
	function f1() external view returns (uint);
}
interface I0BBB is I0BB, I0BBBB {
	function f0() override(I0BB, I0BBBBB)
	external view returns (uint);
	function f2() external payable returns (uint);
}
interface I0B is I0BB, I0BBB {
	function f0() override(I0BB, I0BBB)
	external view returns (uint);
}
interface I0BBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I0BBBBBBBBBBB is I0BBBBBBBBBBBB {
}
interface I0BBBBBBBBBB is I0BBBBBBBBBBB {
}
interface I0BBBBBBBBB is I0BBBBBBBBBB {
	function f1() external view returns (uint);
}
interface I0BBBBBBBB is I0B, I0BBBBBBBBB {
	function f0() override(I0B, I0BBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I0BBBB, I0BBBBBBBBB)
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() external payable returns (uint);
}
interface I0 is I0B, I0BBBBBBBB {
	function f0() override(I0B, I0BBBBBBBB)
	external view returns (uint);
	function f1() override(I0BBBB, I0BBBBBBBB)
	external view returns (uint);
	function f2() override(I0BBB, I0BBBBBBBB)
	external payable returns (uint);
}
contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}
