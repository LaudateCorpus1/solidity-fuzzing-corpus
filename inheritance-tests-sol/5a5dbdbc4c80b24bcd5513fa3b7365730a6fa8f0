
pragma solidity >=0.0;




interface C0B {

}

abstract contract C0BB is C0B {

}


interface C0BBBB {

	function f0() external payable returns (uint);
	function f1() external view returns (uint);
}
interface C0BBB is C0BBBB {

	function f0() override
	external payable returns (uint);
}

contract C0BBBBB is C0B {

}
contract C0 is C0B, C0BB, C0BBB, C0BBBBB {

	function f0() virtual external payable
	override
	returns (uint)
	{
		return 971846536;
	}
	function f1() external view
	override
	returns (uint)
	{
		return 317172907;
	}
	function f2() public view
	
	returns (uint)
	{
		return 842474334;
	}
	function f3() virtual public pure
	
	returns (uint)
	{
		return 180753275;
	}
}


interface C1B {

}

abstract contract C1BB is C1B {

}





interface C1BBBBBBB {

	function f0() external view returns (uint);
}
interface C1BBBBBB is C1BBBBBBB {

}
interface C1BBBBB is C1BBBBBB {

}
interface C1BBBB is C1BBBBB {

	function f0() override
	external view returns (uint);
}
contract C1BBB is C1B, C1BBBB {

	function f0() virtual external view
	override
	returns (uint)
	{
		return 908028975;
	}
}
contract C1 is C1B, C1BB, C1BBB {

}


abstract contract C3B {

}





interface C3BBBBBB {

	function f0() external view returns (uint);
}
interface C3BBBBB is C3BBBBBB {

}
interface C3BBBB is C3BBBBB {

	function f0() override
	external view returns (uint);
}
interface C3BBB is C3BBBB {

	function f0() override
	external view returns (uint);
}
contract C3BB is C3B, C3BBB {

	function f0() virtual external view
	override
	returns (uint)
	{
		return 562351922;
	}
}
abstract contract C3 is C3B, C3BB {

}


contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}

