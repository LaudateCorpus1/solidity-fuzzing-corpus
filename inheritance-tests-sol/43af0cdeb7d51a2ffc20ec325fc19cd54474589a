
pragma solidity >=0.0;




interface I0B {

	function f0() external payable returns (uint);
	function f1() external view returns (uint);
}




interface I0BBBBB {

	function f0() external payable returns (uint);
}
interface I0BBBB is I0BBBBB {

	function f0() override
	external payable returns (uint);
}
interface I0BBB is I0BBBB {

}
interface I0BB is I0B, I0BBB {

	function f0() override(I0B, I0BBBB)
	external payable returns (uint);
}
interface I0 is I0B, I0BB {

	function f0() override(I0B, I0BB)
	external payable returns (uint);
}


contract C1B {

	function f0() public view
	
	returns (uint)
	{
		return 2077369900;
	}
}
contract C1 is C1B {

}


contract C3B {

}
contract C3 is C3B {

	function f0() public view
	
	returns (uint)
	{
		return 1728509667;
	}
}




interface I4BBB {

	function f0() external view returns (uint);
}
interface I4BB is I4BBB {

	function f0() override
	external view returns (uint);
}
interface I4B is I4BB {

}
interface I4 is I4B {

}


interface I6B {

	function f0() external view returns (uint);
}



interface I6BBBB {

}
interface I6BBB is I6BBBB {

}
interface I6BB is I6B, I6BBB {

}
interface I6 is I6B, I6BB {

}


interface I7B {

	function f0() external payable returns (uint);
	function f1() external view returns (uint);
}
interface I7 is I7B {

	function f1() override
	external view returns (uint);
}



contract C8BB {

	function f0() private pure
	
	returns (uint)
	{
		return 820216093;
	}
	function f1() virtual internal pure
	
	returns (uint)
	{
		return 1642509111;
	}
}
contract C8B is C8BB {

}
contract C8 is C8B {

	function f2() virtual public pure
	
	returns (uint)
	{
		return 142874745;
	}
}


interface I9B {

	function f0() external view returns (uint);
}
interface I9 is I9B {

	function f0() override
	external view returns (uint);
}

contract C10 {

	function f0() public view
	
	returns (uint)
	{
		return 1048189647;
	}
}


interface I11B {

}




interface I11BBBBB {

	function f0() external view returns (uint);
}
interface I11BBBB is I11BBBBB {

	function f0() override
	external view returns (uint);
}
interface I11BBB is I11BBBB {

}
interface I11BB is I11B, I11BBB {

	function f0() override
	external view returns (uint);
}
interface I11 is I11B, I11BB {

	function f0() override
	external view returns (uint);
}

contract C13 {

	function f0() external pure
	
	returns (uint)
	{
		return 1968319398;
	}
}


contract C {
	function test() public returns (uint)
	{
			C1 tc0 = new C1();
			if (tc0.f0() != 2077369900)
				return 1;
			C10 tc1 = new C10();
			if (tc1.f0() != 1048189647)
				return 2;
			C13 tc2 = new C13();
			if (tc2.f0() != 1968319398)
				return 3;
			C1B tc3 = new C1B();
			if (tc3.f0() != 2077369900)
				return 4;
			C3 tc4 = new C3();
			if (tc4.f0() != 1728509667)
				return 5;
			C8 tc5 = new C8();
			if (tc5.f2() != 142874745)
				return 6;
			return 0;
	}
}

