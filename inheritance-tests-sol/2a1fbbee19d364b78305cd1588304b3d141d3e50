pragma solidity >=0.0;
interface I1BBB {
	function f0() external payable returns (uint);
}
interface I1BB is I1BBB {
	function f1() external view returns (uint);
	function f2() external view returns (uint);
}
interface I1BBBBB {
}
interface I1BBBB is I1BBB, I1BBBBB {
	function f1() external view returns (uint);
}
interface I1B is I1BB, I1BBBB {
	function f0() override
	external payable returns (uint);
	function f1() override(I1BB, I1BBBB)
	external view returns (uint);
}
interface I1 is I1B {
	function f2() override
	external view returns (uint);
	function f3() external view returns (uint);
}
interface C2BBBBBBB {
	function f0() external view returns (uint);
}
interface C2BBBBBB is C2BBBBBBB {
	function f1() external view returns (uint);
	function f2() external payable returns (uint);
}
interface C2BBBBB is C2BBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
}
interface C2BBBB is C2BBBBB {
}
interface C2BBB is C2BBBB {
	function f0() override
	external view returns (uint);
	function f3() external payable returns (uint);
}
interface C2BB is C2BBB {
	function f3() override
	external payable returns (uint);
	function f4() external payable returns (uint);
}
contract C2B is C2BB {
	function f0() external view
	override
	returns (uint)
	{
		return 330934347;
	}
	function f1() external view
	override
	returns (uint)
	{
		return 66810292;
	}
	function f2() external payable
	override
	returns (uint)
	{
		return 1625111674;
	}
	function f3() external payable
	override
	returns (uint)
	{
		return 1657629581;
	}
	function f4() external payable
	override
	returns (uint)
	{
		return 96903273;
	}
	function f5() virtual public pure
	
	returns (uint)
	{
		return 398507817;
	}
}
abstract contract C2 is C2B {
	function f6() virtual public pure
	
	returns (uint);
}
interface C3BB {
	function f0() external payable returns (uint);
}
interface C3B is C3BB {
	function f0() override
	external payable returns (uint);
}
interface C3BBB is C3B {
	function f0() override
	external payable returns (uint);
	function f1() external view returns (uint);
}
contract C3 is C3B, C3BBB {
	function f0() external payable
	override(C3BBB, C3B)
	returns (uint)
	{
		return 2085743546;
	}
	function f1() external view
	override
	returns (uint)
	{
		return 3443870;
	}
}
contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}
