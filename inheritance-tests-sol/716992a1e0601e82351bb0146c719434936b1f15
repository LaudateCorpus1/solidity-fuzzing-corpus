pragma solidity >=0.0;
abstract contract C0BB {
	function f0() public pure
	
	returns (uint)
	{
		return 390736094;
	}
}
contract C0B is C0BB {
	function f1() public view
	
	returns (uint)
	{
		return 2020605520;
	}
}
contract C0 is C0B {
}
library L1 {
	function f0(uint) external view returns (uint)
	{
		return 1804289383;
	}
}
contract C3BB {
	function f0() public pure
	
	returns (uint)
	{
		return 1106242122;
	}
}
contract C3B is C3BB {
	function f1() public view
	
	returns (uint)
	{
		return 85104760;
	}
}
contract C3 is C3B {
}
contract C4 {
	function f0() public view
	
	returns (uint)
	{
		return 379178538;
	}
}
interface I5BBBBB {
	function f0() external payable returns (uint);
}
interface I5BBBB is I5BBBBB {
}
interface I5BBB is I5BBBB {
	function f1() external payable returns (uint);
}
interface I5BB is I5BBB {
	function f1() override
	external payable returns (uint);
}
interface I5BBBBBB is I5BB {
	function f0() override
	external payable returns (uint);
	function f2() external payable returns (uint);
	function f3() external view returns (uint);
}
interface I5B is I5BB, I5BBBBBB {
	function f0() override(I5BBBBB, I5BBBBBB)
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
}
interface I5BBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I5BBBBBBBB is I5BBBBBBBBB {
}
interface I5BBBBBBB is I5BBBBBB, I5BBBBBBBB {
	function f0() override(I5BBBBBB, I5BBBBBBBBB)
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
}
interface I5BBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I5BBBBBBBBBBB is I5BBBBBBBBBBBB {
}
interface I5BBBBBBBBBB is I5BBBBBBBB, I5BBBBBBBBBBB {
	function f0() override(I5BBBBBBBBB, I5BBBBBBBBBBBB)
	external payable returns (uint);
}
interface I5BBBBBBBBBBBBB is I5BBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I5BBBBBBBBBBBBBB is I5BBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I5BBBBBBBBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I5BBBBBBBBBBBBBBBBBB is I5BBBBBBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I5BBBBBBBBBBBBBBBBB is I5BBBBBBBBBBBBBBBBBB {
	function f1() external payable returns (uint);
}
interface I5BBBBBBBBBBBBBBBB is I5BBBBBBBBBBBBBBBBB {
	function f1() override
	external payable returns (uint);
}
interface I5BBBBBBBBBBBBBBB is I5BBBBBBBBBBBBB, I5BBBBBBBBBBBBBBBB {
	function f0() override(I5BBBBBBBBBBBBB, I5BBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
}
interface I5BBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I5BBBBBBBBBBBBBBBBBBBBBBB is I5BBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I5BBBBBBBBBBBBBBBBBBBBBB is I5BBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() external payable returns (uint);
}
interface I5BBBBBBBBBBBBBBBBBBBBB is I5BBBBBBBBBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I5BBBBBBBBBBBBBBBBBBBB is I5B, I5BBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I5B, I5BBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I5B, I5BBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
}
interface I5BBBBBBBBBBBBBBBBBBBBBBBBB is I5BBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I5BBBBBBBBBBBBBBBBBBBBBBBBBB is I5B {
	function f0() override
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
}
interface I5BBBBBBBBBBBBBBBBBBBBBBBBBBB is I5BBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I5 is I5B, I5BBBBBBB, I5BBBBBBBBBB, I5BBBBBBBBBBBBB, I5BBBBBBBBBBBBBB, I5BBBBBBBBBBBBBBB, I5BBBBBBBBBBBBBBBBBBBB, I5BBBBBBBBBBBBBBBBBBBBBBBBB, I5BBBBBBBBBBBBBBBBBBBBBBBBBB, I5BBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I5B, I5BBBBBBB, I5BBBBBBBBBB, I5BBBBBBBBBBBBB, I5BBBBBBBBBBBBBB, I5BBBBBBBBBBBBBBB, I5BBBBBBBBBBBBBBBBBBBB, I5BBBBBBBBBBBBBBBBBBBBBBBBB, I5BBBBBBBBBBBBBBBBBBBBBBBBBB, I5BBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I5B, I5BB, I5BBBBBBBBBBBBBBBB, I5BBBBBBBBBBBBBBBBBBBB, I5BBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f2() override(I5BBBBBB, I5BBBBBBB, I5BBBBBBBBBBBBBBBBBBBB, I5BBBBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f3() override(I5B, I5BBBBBB, I5BBBBBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
}
interface I6B {
}
interface I6BBB {
	function f0() external view returns (uint);
}
interface I6BB is I6B, I6BBB {
	function f0() override
	external view returns (uint);
}
interface I6 is I6B, I6BB {
}
interface I7BBBBB {
	function f0() external payable returns (uint);
}
interface I7BBBB is I7BBBBB {
}
interface I7BBB is I7BBBB {
	function f0() override
	external payable returns (uint);
	function f1() external payable returns (uint);
}
interface I7BB is I7BBB {
	function f1() override
	external payable returns (uint);
}
interface I7BBBBBB is I7BB {
	function f0() override
	external payable returns (uint);
	function f2() external payable returns (uint);
	function f3() external view returns (uint);
}
interface I7B is I7BB, I7BBBBBB {
	function f0() override(I7BBB, I7BBBBBB)
	external payable returns (uint);
	function f3() override
	external view returns (uint);
}
interface I7BBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I7BBBBBBBB is I7BBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I7BBBBBBB is I7BB, I7BBBBBBBB {
	function f0() override(I7BBB, I7BBBBBBBB)
	external payable returns (uint);
}
interface I7BBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I7BBBBBBBBBBB is I7BBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I7BBBBBBBBBB is I7BBBBBBBB, I7BBBBBBBBBBB {
	function f0() override(I7BBBBBBBB, I7BBBBBBBBBBB)
	external payable returns (uint);
}
interface I7BBBBBBBBBBBBB is I7BBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I7BBBBBBBBBBBBBB is I7BBBBBBBBBB {
}
interface I7BBBBBBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I7BBBBBBBBBBBBBBBB is I7BBBBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I7BBBBBBBBBBBBBBB is I7BBBBBBBBBBBBB, I7BBBBBBBBBBBBBBBB {
	function f0() override(I7BBBBBBBBBBBBB, I7BBBBBBBBBBBBBBBB)
	external payable returns (uint);
}
interface I7BBBBBBBBBBBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I7BBBBBBBBBBBBBBBBBBBBB is I7BBBBBBBBBBBBBBBBBBBBBB {
}
interface I7BBBBBBBBBBBBBBBBBBBB is I7BBBBBBBBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() external payable returns (uint);
}
interface I7BBBBBBBBBBBBBBBBBBB is I7BBBBBBBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I7BBBBBBBBBBBBBBBBBB is I7BBBBBBBBBB, I7BBBBBBBBBBBBBBBBBBB {
	function f0() override(I7BBBBBBBBBB, I7BBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I7BBBBBBBBBBBBBBBBBBBBBBB is I7BBBBBBB {
	function f1() override
	external payable returns (uint);
}
interface I7BBBBBBBBBBBBBBBBBBBBBBBB is I7BBBBBBBBBBBBB {
}
interface I7BBBBBBBBBBBBBBBBBBBBBBBBB is I7BBBBBBBBBBBBBB {
}
interface I7 is I7B, I7BBBBBBB, I7BBBBBBBBBB, I7BBBBBBBBBBBBB, I7BBBBBBBBBBBBBB, I7BBBBBBBBBBBBBBB, I7BBBBBBBBBBBBBBBBBB, I7BBBBBBBBBBBBBBBBBBBBBBB, I7BBBBBBBBBBBBBBBBBBBBBBBB, I7BBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I7B, I7BBBBBBB, I7BBBBBBBBBB, I7BBBBBBBBBBBBB, I7BBBBBBBBBBBBBBB, I7BBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I7BB, I7BBBBBBBBBBBBBBBBBB, I7BBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
}
contract C {
	using L1 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1804289383)
			return 1;
		return 0;
	}
}
