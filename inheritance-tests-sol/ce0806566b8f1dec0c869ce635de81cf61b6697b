pragma solidity >=0.0;
interface I0BB {
	function f0() external view returns (uint);
}
interface I0B is I0BB {
	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I0 is I0B {
}
contract C1 {
	function f0() public view
	
	returns (uint)
	{
		return 830813507;
	}
}
contract C2 {
	function f0() public view
	
	returns (uint)
	{
		return 2089172319;
	}
}
interface C4BB {
	function f0() external view returns (uint);
}
interface C4BBB is C4BB {
	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
}
interface C4B is C4BB, C4BBB {
	function f0() override(C4BB, C4BBB)
	external view returns (uint);
	function f2() external payable returns (uint);
}
interface C4BBBBBB {
	function f0() external view returns (uint);
}
interface C4BBBBB is C4BBBBBB {
}
interface C4BBBB is C4B, C4BBBBB {
	function f0() override(C4B, C4BBBBBB)
	external view returns (uint);
	function f1() override
	external view returns (uint);
}
contract C4 is C4B, C4BBBB {
	function f0() external view
	override(C4BBBB, C4B)
	returns (uint)
	{
		return 714404773;
	}
	function f1() external view
	override(C4BBBB, C4BBB)
	returns (uint)
	{
		return 1133844973;
	}
	function f2() external payable
	override
	returns (uint)
	{
		return 6919657;
	}
}
interface I5B {
	function f0() external view returns (uint);
}
interface I5 is I5B {
	function f0() override
	external view returns (uint);
}
contract C6 {
	function f0() public view
	
	returns (uint)
	{
		return 820216093;
	}
	function f1() virtual public pure
	
	returns (uint)
	{
		return 1642509111;
	}
}
abstract contract C7B {
}
contract C7BB is C7B {
	function f0() virtual public pure
	
	returns (uint)
	{
		return 461049841;
	}
}
abstract contract C7 is C7B, C7BB {
}
contract C8 {
	function f0() public view
	
	returns (uint)
	{
		return 142874745;
	}
}
interface I9B {
	function f0() external payable returns (uint);
	function f1() external view returns (uint);
}
interface I9 is I9B {
	function f0() override
	external payable returns (uint);
}
interface I10B {
	function f0() external view returns (uint);
}
interface I10 is I10B {
	function f0() override
	external view returns (uint);
}
contract C11 {
	function f0() virtual public pure
	
	returns (uint)
	{
		return 1828063314;
	}
	function f1() public view
	
	returns (uint)
	{
		return 193691217;
	}
}
interface I12 {
	function f0() external payable returns (uint);
}
interface I15B {
	function f0() external view returns (uint);
}
interface I15 is I15B {
	function f0() override
	external view returns (uint);
}
contract C {
	function test() public returns (uint)
	{
			C1 tc0 = new C1();
			if (tc0.f0() != 830813507)
				return 1;
			C11 tc1 = new C11();
			if (tc1.f0() != 1828063314)
				return 2;
			if (tc1.f1() != 193691217)
				return 3;
			C2 tc2 = new C2();
			if (tc2.f0() != 2089172319)
				return 4;
			C4 tc3 = new C4();
			if (tc3.f0() != 714404773)
				return 5;
			if (tc3.f1() != 1133844973)
				return 6;
			if (tc3.f2() != 6919657)
				return 7;
			C6 tc4 = new C6();
			if (tc4.f0() != 820216093)
				return 8;
			if (tc4.f1() != 1642509111)
				return 9;
			C7BB tc5 = new C7BB();
			if (tc5.f0() != 461049841)
				return 10;
			C8 tc6 = new C8();
			if (tc6.f0() != 142874745)
				return 11;
			return 0;
	}
}
