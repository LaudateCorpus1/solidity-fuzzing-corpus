
pragma solidity >=0.0;



contract C1 {

	function f0() virtual public pure
	
	returns (uint)
	{
		return 48271;
	}
}

interface I2 {

	function f0() external payable returns (uint);
}










interface I3BBBBBBBBB {

}
interface I3BBBBBBBB is I3BBBBBBBBB {

}
interface I3BBBBBBB is I3BBBBBBBB {

}
interface I3BBBBBB is I3BBBBBBB {

}
interface I3BBBBB is I3BBBBBB {

}
interface I3BBBB is I3BBBBB {

}




interface I3BBBBBBBBBBBBB {

}
interface I3BBBBBBBBBBBB is I3BBBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I3BBBBBBBBBBB is I3BBBBBBBBBBBB {

}
interface I3BBBBBBBBBB is I3BBBBB, I3BBBBBBBBBBB {

}
interface I3BBB is I3BBBB, I3BBBBBBBBBB {

	function f1() external payable returns (uint);
}
interface I3BB is I3BBB {

	function f2() external view returns (uint);
}
interface I3B is I3BB {

	function f1() override
	external payable returns (uint);
}




interface I3BBBBBBBBBBBBBBBBB {

}
interface I3BBBBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I3BBBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBBB {

}
interface I3BBBBBBBBBBBBBB is I3B, I3BBBBBBBBBBBBBBB {

	function f0() override(I3BBBBBBBBBBBB, I3BBBBBBBBBBBBBBBB)
	external view returns (uint);
}
interface I3 is I3B, I3BBBBBBBBBBBBBB {

	function f0() override(I3BBBBBBBBBBBB, I3BBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
	function f3() external payable returns (uint);
}

interface I4 {

	function f0() external payable returns (uint);
}


interface I5B {

	function f0() external view returns (uint);
}
interface I5 is I5B {

}


interface I6B {

	function f0() external view returns (uint);
}




interface I6BBBBB {

	function f0() external view returns (uint);
}
interface I6BBBB is I6BBBBB {

}

interface I6BBBBBB is I6BBBBB {

	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I6BBB is I6BBBB, I6BBBBBB {

	function f0() override(I6BBBBB, I6BBBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I6BB is I6B, I6BBB {

	function f0() override(I6B, I6BBB)
	external view returns (uint);
}
interface I6 is I6B, I6BB {

	function f0() override(I6B, I6BB)
	external view returns (uint);
}
library L8 {

	function f0(uint) public view returns (uint)
	{
		return 1957747793;
	}
}


contract C {
	using L8 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1957747793)
			return 1;
		return 0;
	}
}

