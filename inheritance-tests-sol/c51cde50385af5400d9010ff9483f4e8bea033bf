
pragma solidity >=0.0;











interface C0BBBBBBBB {

	function f0() external view returns (uint);
}
interface C0BBBBBBB is C0BBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface C0BBBBBB is C0BBBBBBB {

}
interface C0BBBBB is C0BBBBBB {

}
interface C0BBBB is C0BBBBB {

	function f0() override
	external view returns (uint);
}
interface C0BBB is C0BBBB {

	function f1() external payable returns (uint);
}
interface C0BB is C0BBB {

}
contract C0B is C0BB {

	function f0() virtual external view
	override
	returns (uint)
	{
		return 769429449;
	}
	function f1() virtual external payable
	override
	returns (uint)
	{
		return 1055691416;
	}
}
contract C0 is C0B {

	function f0() external view
	override
	returns (uint)
	{
		return 1325416955;
	}
}


interface C1B {

}
contract C1 is C1B {

	function f0() public view
	
	returns (uint)
	{
		return 1760838767;
	}
	function f1() virtual public pure
	
	returns (uint)
	{
		return 45373597;
	}
}



interface C2BB {

	function f0() external view returns (uint);
	function f1() external view returns (uint);
}
interface C2B is C2BB {

	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
}
contract C2 is C2B {

	function f0() external view
	override
	returns (uint)
	{
		return 2007936220;
	}
	function f1() virtual external view
	override
	returns (uint)
	{
		return 1096328782;
	}
}
library L3 {

	function f0(uint) external pure returns (uint)
	{
		return 1804289383;
	}
}






interface I4BBBBB {

	function f0() external payable returns (uint);
}
interface I4BBBB is I4BBBBB {

}





interface I4BBBBBBBBBB {

	function f0() external payable returns (uint);
}

interface I4BBBBBBBBBBB is I4BBBBBBBBBB {

	function f1() external payable returns (uint);
}
interface I4BBBBBBBBB is I4BBBBBBBBBB, I4BBBBBBBBBBB {

	function f0() override
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I4BBBBBBBB is I4BBBBBBBBB {

	function f0() override
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I4BBBBBBB is I4BBBBBBBB {

}
interface I4BBBBBB is I4BBBB, I4BBBBBBB {

	function f0() override(I4BBBBB, I4BBBBBBBB)
	external payable returns (uint);
}
interface I4BBB is I4BBBB, I4BBBBBB {

	function f0() override(I4BBBBB, I4BBBBBB)
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I4BB is I4BBB {

	function f1() override
	external payable returns (uint);
}
interface I4B is I4BB {

	function f0() override
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I4 is I4B {

	function f0() override
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() external payable returns (uint);
}
library L7 {

	function f0(uint) private pure returns (uint)
	{
		return 1714636915;
	}
}


contract C {
	using L3 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1804289383)
			return 1;
		return 0;
	}
}

