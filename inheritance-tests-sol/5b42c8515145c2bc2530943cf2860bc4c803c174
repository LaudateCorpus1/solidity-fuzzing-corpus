
pragma solidity >=0.0;







interface I0BBBB {

	function f0() external pure returns (uint);
	function f1() external view returns (uint);
}
interface I0BBB is I0BBBB {

	function f1() override
	external view returns (uint);
}
interface I0BB is I0BBB {

}
interface I0B is I0BB {

}
interface I0 is I0B {

}
library L2 {

	function f0(uint) public pure returns (uint)
	{
		return 1681692777;
	}
}

interface I3 {

	function f0() external payable returns (uint);
}
library L4 {

	function f0(uint) external pure returns (uint)
	{
		return 1714636915;
	}
}





interface I6BBBB {

	function f0() external view returns (uint);
}
interface I6BBB is I6BBBB {

}
interface I6BB is I6BBB {

	function f0() override
	external view returns (uint);
}
interface I6B is I6BB {

	function f0() override
	external view returns (uint);
}
interface I6 is I6B {

	function f0() override
	external view returns (uint);
}


interface I7B {

	function f0() external payable returns (uint);
}

interface I7BB is I7B {

	function f0() override
	external payable returns (uint);
}
interface I7 is I7B, I7BB {

	function f0() override(I7B, I7BB)
	external payable returns (uint);
	function f1() external payable returns (uint);
}




interface C8BBB {

}


interface C8BBBBB {

	function f0() external payable returns (uint);
	function f1() external view returns (uint);
	function f2() external payable returns (uint);
}
interface C8BBBB is C8BBB, C8BBBBB {

	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
}
interface C8BB is C8BBB, C8BBBB {

}
interface C8B is C8BB {

	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
}
contract C8 is C8B {

	function f0() virtual external payable
	override
	returns (uint)
	{
		return 999647265;
	}
	function f1() external view
	override
	returns (uint)
	{
		return 477900025;
	}
	function f2() external payable
	override
	returns (uint)
	{
		return 1227253027;
	}
}




interface C9BBB {

	function f0() external payable returns (uint);
}
interface C9BB is C9BBB {

}
interface C9B is C9BB {

}
contract C9 is C9B {

	function f0() virtual external payable
	override
	returns (uint)
	{
		return 1427401579;
	}
}

interface I10 {

	function f0() external payable returns (uint);
}




interface C11BBB {

	function f0() external payable returns (uint);
}
interface C11BB is C11BBB {

	function f0() override
	external payable returns (uint);
}
interface C11B is C11BB {

	function f0() override
	external payable returns (uint);
}
contract C11 is C11B {

	function f0() virtual external payable
	override
	returns (uint)
	{
		return 1771495544;
	}
}




interface C12BBB {

	function f0() external view returns (uint);
}
interface C12BB is C12BBB {

}
interface C12B is C12BB {

	function f0() override
	external view returns (uint);
}
contract C12 is C12B {

	function f0() virtual external view
	override
	returns (uint)
	{
		return 1143645057;
	}
}


contract C {
	function test() public returns (uint)
	{
			C11 tc0 = new C11();
			if (tc0.f0() != 1771495544)
				return 1;
			C12 tc1 = new C12();
			if (tc1.f0() != 1143645057)
				return 2;
			C8 tc2 = new C8();
			if (tc2.f0() != 999647265)
				return 3;
			if (tc2.f1() != 477900025)
				return 4;
			if (tc2.f2() != 1227253027)
				return 5;
			C9 tc3 = new C9();
			if (tc3.f0() != 1427401579)
				return 6;
			return 0;
	}
}

