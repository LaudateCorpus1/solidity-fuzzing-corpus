pragma solidity >=0.0;
library L0 {
	function f0(uint) private pure returns (uint)
	{
		return 1804289383;
	}
}
library L1 {
	function f0(uint) private pure returns (uint)
	{
		return 846930886;
	}
}
library L3 {
	function f0(uint) private view returns (uint)
	{
		return 1681692777;
	}
	function f1(uint) public view returns (uint)
	{
		return 1714636915;
	}
}
library L4 {
	function f0(uint) private pure returns (uint)
	{
		return 1957747793;
	}
}
interface I6BBBB {
	function f0() external payable returns (uint);
}
interface I6BBB is I6BBBB {
	function f0() override
	external payable returns (uint);
}
interface I6BB is I6BBB {
}
interface I6B is I6BB {
}
interface I6 is I6B {
}
library L7 {
	function f0(uint) public view returns (uint)
	{
		return 424238335;
	}
	function f1(uint) public view returns (uint)
	{
		return 719885386;
	}
}
interface C9BB {
	function f0() external view returns (uint);
}
interface C9B is C9BB {
}
interface C9BBBB {
	function f0() external view returns (uint);
}
interface C9BBB is C9B, C9BBBB {
	function f0() override(C9BB, C9BBBB)
	external view returns (uint);
}
contract C9 is C9B, C9BBB {
	function f0() external view
	override(C9BBB, C9BB)
	returns (uint)
	{
		return 1738531149;
	}
}
library L10 {
	function f0(uint) private pure returns (uint)
	{
		return 596516649;
	}
}
interface C11BB {
	function f0() external view returns (uint);
}
interface C11B is C11BB {
}
contract C11 is C11B {
	function f0() external view
	override
	returns (uint)
	{
		return 2136927794;
	}
}
interface C12BB {
	function f0() external view returns (uint);
}
interface C12B is C12BB {
}
interface C12BBBB {
	function f0() external view returns (uint);
}
interface C12BBB is C12BB, C12BBBB {
	function f0() override(C12BB, C12BBBB)
	external view returns (uint);
}
contract C12 is C12B, C12BBB {
	function f0() external view
	override(C12BBB, C12BB)
	returns (uint)
	{
		return 1931656580;
	}
}
contract C {
	using L7 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f1() != 719885386)
			return 1;
		return 0;
	}
}
