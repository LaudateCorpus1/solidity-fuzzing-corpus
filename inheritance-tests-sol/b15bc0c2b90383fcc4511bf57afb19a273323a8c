
pragma solidity >=0.0;




interface I0B {

	function f0() external payable returns (uint);
}
interface I0 is I0B {

}


interface I2B {

	function f0() external payable returns (uint);
	function f1() external payable returns (uint);
	function f2() external view returns (uint);
	function f3() external view returns (uint);
	function f4() external view returns (uint);
	function f5() external payable returns (uint);
	function f6() external view returns (uint);
	function f7() external payable returns (uint);
}

interface I2BB is I2B {

	function f8() external payable returns (uint);
	function f9() external view returns (uint);
	function f10() external payable returns (uint);
	function f11() external view returns (uint);
	function f12() external payable returns (uint);
}
interface I2 is I2B, I2BB {

	function f2() override
	external view returns (uint);
	function f4() override
	external view returns (uint);
	function f7() override
	external payable returns (uint);
	function f8() override
	external payable returns (uint);
	function f9() override
	external view returns (uint);
	function f13() external view returns (uint);
	function f14() external view returns (uint);
}

interface I3 {

	function f0() external payable returns (uint);
}


interface I4B {

	function f0() external payable returns (uint);
	function f1() external payable returns (uint);
	function f2() external view returns (uint);
	function f3() external view returns (uint);
	function f4() external view returns (uint);
	function f5() external payable returns (uint);
	function f6() external view returns (uint);
	function f7() external payable returns (uint);
}

interface I4BB is I4B {

	function f0() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f8() external payable returns (uint);
	function f9() external view returns (uint);
	function f10() external payable returns (uint);
	function f11() external view returns (uint);
	function f12() external payable returns (uint);
}
interface I4 is I4B, I4BB {

	function f0() override(I4B, I4BB)
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override(I4B, I4BB)
	external view returns (uint);
	function f3() override(I4B, I4BB)
	external view returns (uint);
	function f4() override
	external view returns (uint);
	function f5() override(I4B, I4BB)
	external payable returns (uint);
	function f8() override
	external payable returns (uint);
	function f11() override
	external view returns (uint);
	function f13() external view returns (uint);
	function f14() external view returns (uint);
}

interface I5 {

	function f0() external payable returns (uint);
}


interface C7B {

	function f0() external view returns (uint);
}

interface C7BB is C7B {

	function f1() external view returns (uint);
	function f2() external view returns (uint);
	function f3() external view returns (uint);
}


interface C7BBBB {

	function f0() external view returns (uint);
}
interface C7BBB is C7B, C7BBBB {

	function f0() override(C7B, C7BBBB)
	external view returns (uint);
}
contract C7 is C7B, C7BB, C7BBB {

	function f0() external view
	override(C7BBB, C7B)
	returns (uint)
	{
		return 719080959;
	}
	function f1() virtual external view
	override
	returns (uint)
	{
		return 163677341;
	}
	function f2() virtual external view
	override
	returns (uint)
	{
		return 374787159;
	}
	function f3() external view
	override
	returns (uint)
	{
		return 80100956;
	}
}



interface C8BB {

	function f0() external view returns (uint);
}
interface C8B is C8BB {

	function f0() override
	external view returns (uint);
}

interface C8BBB is C8BB {

	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
	function f2() external view returns (uint);
	function f3() external view returns (uint);
}

interface C8BBBB is C8BB {

	function f1() external view returns (uint);
	function f2() external view returns (uint);
}

interface C8BBBBB is C8BBB {

	function f1() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() external view returns (uint);
}
contract C8 is C8B, C8BBB, C8BBBB, C8BBBBB {

	function f0() virtual external view
	override(C8BBB, C8B, C8BB)
	returns (uint)
	{
		return 1336273608;
	}
	function f1() virtual external view
	override(C8BBBB, C8BBB, C8BBBBB)
	returns (uint)
	{
		return 1715708819;
	}
	function f2() external view
	override(C8BBBB, C8BBB)
	returns (uint)
	{
		return 324062450;
	}
	function f3() virtual external view
	override(C8BBBBB, C8BBB)
	returns (uint)
	{
		return 1925544752;
	}
	function f4() virtual external view
	override
	returns (uint)
	{
		return 425095546;
	}
}


contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}

