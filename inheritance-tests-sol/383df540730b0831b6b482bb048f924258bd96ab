
pragma solidity >=0.0;






interface C0BBB {

	function f0() external payable returns (uint);
}
interface C0BB is C0BBB {

}
contract C0B is C0BB {

	function f0() virtual external payable
	override
	returns (uint)
	{
		return 1914720637;
	}
}
contract C0 is C0B {

}
library L1 {

	function f0(uint) internal view returns (uint)
	{
		return 1804289383;
	}
}
library L2 {

	function f0(uint) internal view returns (uint)
	{
		return 846930886;
	}
}








interface C3BBBBBBB {

	function f0() external view returns (uint);
}
interface C3BBBBBB is C3BBBBBBB {

}
interface C3BBBBB is C3BBBBBB {

}
interface C3BBBB is C3BBBBB {

}
interface C3BBB is C3BBBB {

}
interface C3BB is C3BBB {

}
contract C3B is C3BB {

	function f0() external view
	override
	returns (uint)
	{
		return 2136927794;
	}
}
contract C3 is C3B {

}
library L5 {

	function f0(uint) public pure returns (uint)
	{
		return 1681692777;
	}
	function f1(uint) public pure returns (uint)
	{
		return 1714636915;
	}
}


interface I6B {

	function f0() external pure returns (uint);
}
interface I6 is I6B {

}


interface I7B {

	function f0() external payable returns (uint);
}

interface I7BB is I7B {

	function f0() override
	external payable returns (uint);
	function f1() external view returns (uint);
}
interface I7 is I7B, I7BB {

	function f0() override(I7B, I7BB)
	external payable returns (uint);
}
library L8 {

	function f0(uint) internal pure returns (uint)
	{
		return 424238335;
	}
}
library L9 {

	function f0(uint) internal view returns (uint)
	{
		return 719885386;
	}
	function f1(uint) internal view returns (uint)
	{
		return 1649760492;
	}
	function f2(uint) private view returns (uint)
	{
		return 596516649;
	}
	function f3(uint) internal view returns (uint)
	{
		return 1189641421;
	}
}
library L10 {

	function f0(uint) internal pure returns (uint)
	{
		return 1025202362;
	}
}
library L11 {

	function f0(uint) internal view returns (uint)
	{
		return 1350490027;
	}
}


interface I12B {

	function f0() external view returns (uint);
}
interface I12 is I12B {

	function f0() override
	external view returns (uint);
}


interface I13B {

	function f0() external view returns (uint);
}
interface I13 is I13B {

	function f0() override
	external view returns (uint);
}


contract C {
	using L5 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1681692777)
			return 1;
		return 0;
	}
}

