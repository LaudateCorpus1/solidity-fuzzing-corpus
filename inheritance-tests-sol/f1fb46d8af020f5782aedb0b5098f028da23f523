
pragma solidity >=0.0;









interface I0BBBBBB {

}
interface I0BBBBB is I0BBBBBB {

}
interface I0BBBB is I0BBBBB {

}




interface I0BBBBBBBBBB {

}
interface I0BBBBBBBBB is I0BBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I0BBBBBBBB is I0BBBBBBBBB {

}
interface I0BBBBBBB is I0BBBBB, I0BBBBBBBB {

}
interface I0BBB is I0BBBB, I0BBBBBBB {

	function f1() external payable returns (uint);
}
interface I0BB is I0BBB {

	function f2() external view returns (uint);
}
interface I0B is I0BB {

}




interface I0BBBBBBBBBBBBBB {

}
interface I0BBBBBBBBBBBBB is I0BBBBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I0BBBBBBBBBBBB is I0BBBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I0BBBBBBBBBBB is I0B, I0BBBBBBBBBBBB {

	function f0() override(I0BBBBBBBBB, I0BBBBBBBBBBBB)
	external view returns (uint);
	function f2() override
	external view returns (uint);
}
interface I0 is I0B, I0BBBBBBBBBBB {

	function f0() override(I0BBBBBBBBB, I0BBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override(I0BB, I0BBBBBBBBBBB)
	external view returns (uint);
	function f3() external payable returns (uint);
}


interface I1B {

	function f0() external view returns (uint);
}
interface I1 is I1B {

}





interface I2BBBB {

	function f0() external view returns (uint);
}
interface I2BBB is I2BBBB {

}
interface I2BB is I2BBB {

	function f0() override
	external view returns (uint);
}
interface I2B is I2BB {

}

interface I2BBBBB is I2BB {

	function f1() external view returns (uint);
}
interface I2 is I2B, I2BBBBB {

	function f1() override
	external view returns (uint);
}


interface I3B {

	function f0() external view returns (uint);
}




interface I3BBBBB {

	function f0() external view returns (uint);
}
interface I3BBBB is I3BBBBB {

	function f0() override
	external view returns (uint);
}

interface I3BBBBBB is I3BBBBB {

	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I3BBB is I3BBBB, I3BBBBBB {

	function f0() override(I3BBBB, I3BBBBBB)
	external view returns (uint);
}
interface I3BB is I3B, I3BBB {

	function f0() override(I3B, I3BBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I3 is I3B, I3BB {

	function f0() override(I3B, I3BB)
	external view returns (uint);
}


interface I4B {

	function f0() external view returns (uint);
}
interface I4 is I4B {

}

contract C5 {

	function f0() public view
	
	returns (uint)
	{
		return 1057382352;
	}
}


contract C {
	function test() public returns (uint)
	{
			C5 tc0 = new C5();
			if (tc0.f0() != 1057382352)
				return 1;
			return 0;
	}
}

