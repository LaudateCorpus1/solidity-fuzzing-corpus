
pragma solidity >=0.0;







interface I0BBBB {

	function f0() external view returns (uint);
}


interface I0BBBBBB {

	function f0() external view returns (uint);
}
interface I0BBBBB is I0BBBB, I0BBBBBB {

	function f0() override(I0BBBB, I0BBBBBB)
	external view returns (uint);
}
interface I0BBB is I0BBBB, I0BBBBB {

	function f0() override(I0BBBB, I0BBBBB)
	external view returns (uint);
	function f1() external view returns (uint);
}
interface I0BB is I0BBB {

	function f0() override
	external view returns (uint);
}
interface I0B is I0BB {

}
interface I0 is I0B {

}




interface I2BBB {

	function f0() external view returns (uint);
}
interface I2BB is I2BBB {

}
interface I2B is I2BB {

	function f0() override
	external view returns (uint);
}
interface I2 is I2B {

	function f0() override
	external view returns (uint);
}





interface I3BBBB {

	function f0() external view returns (uint);
}
interface I3BBB is I3BBBB {

}
interface I3BB is I3BBB {

}
interface I3B is I3BB {

	function f0() override
	external view returns (uint);
}
interface I3 is I3B {

}


interface I4B {

	function f0() external view returns (uint);
}
interface I4 is I4B {

	function f0() override
	external view returns (uint);
}





interface I5BBBB {

	function f0() external payable returns (uint);
}
interface I5BBB is I5BBBB {

}
interface I5BB is I5BBB {

	function f0() override
	external payable returns (uint);
}




interface I5BBBBBBBB {

	function f0() external payable returns (uint);
}
interface I5BBBBBBB is I5BBBBBBBB {

	function f0() override
	external payable returns (uint);
	function f1() external view returns (uint);
}
interface I5BBBBBB is I5BBBBBBB {

	function f0() override
	external payable returns (uint);
}
interface I5BBBBB is I5BBB, I5BBBBBB {

	function f0() override(I5BBBB, I5BBBBBB)
	external payable returns (uint);
	function f1() override
	external view returns (uint);
}
interface I5B is I5BB, I5BBBBB {

	function f0() override(I5BB, I5BBBBB)
	external payable returns (uint);
	function f1() override
	external view returns (uint);
}
interface I5 is I5B {

}
library L6 {

	function f0(uint) internal pure returns (uint)
	{
		return 1957747793;
	}
}
library L7 {

	function f0(uint) public view returns (uint)
	{
		return 424238335;
	}
}




interface I8BBB {

}
interface I8BB is I8BBB {

	function f0() external view returns (uint);
}
interface I8B is I8BB {

}



interface I8BBBBBB {

	function f0() external view returns (uint);
}
interface I8BBBBB is I8BBBBBB {

	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I8BBBB is I8B, I8BBBBB {

	function f0() override(I8BB, I8BBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I8 is I8B, I8BBBB {

	function f0() override(I8BB, I8BBBB)
	external view returns (uint);
	function f2() external view returns (uint);
}




interface I9BBB {

	function f0() external payable returns (uint);
	function f1() external payable returns (uint);
}
interface I9BB is I9BBB {

	function f0() override
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I9B is I9BB {

	function f0() override
	external payable returns (uint);
}


interface I9BBBBB {

	function f0() external payable returns (uint);
}
interface I9BBBB is I9B, I9BBBBB {

	function f0() override(I9B, I9BBBBB)
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I9 is I9B, I9BBBB {

	function f0() override(I9B, I9BBBB)
	external payable returns (uint);
	function f1() override(I9BB, I9BBBB)
	external payable returns (uint);
}






interface I10BBBBB {

	function f0() external view returns (uint);
}

interface I10BBBBBB is I10BBBBB {

	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
}
interface I10BBBB is I10BBBBB, I10BBBBBB {

	function f0() override(I10BBBBB, I10BBBBBB)
	external view returns (uint);
	function f1() override
	external view returns (uint);
}
interface I10BBB is I10BBBB {

	function f0() override
	external view returns (uint);
}
interface I10BB is I10BBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
}


interface I10BBBBBBBB {

	function f0() external view returns (uint);
}
interface I10BBBBBBB is I10BBB, I10BBBBBBBB {

	function f0() override(I10BBB, I10BBBBBBBB)
	external view returns (uint);
}
interface I10B is I10BB, I10BBBBBBB {

	function f0() override(I10BB, I10BBBBBBB)
	external view returns (uint);
	function f1() override(I10BB, I10BBBB)
	external view returns (uint);
}

interface I10BBBBBBBBB is I10B {

	function f1() override
	external view returns (uint);
	function f2() external payable returns (uint);
}
interface I10 is I10B, I10BBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f1() override(I10B, I10BBBBBBBBB)
	external view returns (uint);
	function f2() override
	external payable returns (uint);
}





interface I11BBBB {

	function f0() external payable returns (uint);
}
interface I11BBB is I11BBBB {

}
interface I11BB is I11BBB {

	function f0() override
	external payable returns (uint);
}




interface I11BBBBBBBB {

	function f0() external payable returns (uint);
}
interface I11BBBBBBB is I11BBBBBBBB {

}
interface I11BBBBBB is I11BBBBBBB {

}
interface I11BBBBB is I11BBB, I11BBBBBB {

	function f0() override(I11BBBB, I11BBBBBBBB)
	external payable returns (uint);
}
interface I11B is I11BB, I11BBBBB {

	function f0() override(I11BB, I11BBBBB)
	external payable returns (uint);
	function f1() external view returns (uint);
}
interface I11 is I11B {

	function f0() override
	external payable returns (uint);
	function f1() override
	external view returns (uint);
}


contract C {
	using L7 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 424238335)
			return 1;
		return 0;
	}
}

