
pragma solidity >=0.0;





interface I0BB {

	function f0() external view returns (uint);
}
interface I0B is I0BB {

	function f1() external payable returns (uint);
}


interface I0BBBB {

	function f0() external view returns (uint);
}
interface I0BBB is I0BB, I0BBBB {

	function f0() override(I0BB, I0BBBB)
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I0 is I0B, I0BBB {

	function f0() override(I0BB, I0BBB)
	external view returns (uint);
	function f1() override(I0B, I0BBB)
	external payable returns (uint);
}
library L1 {

	function f0(uint) public view returns (uint)
	{
		return 846930886;
	}
	function f1(uint) external pure returns (uint)
	{
		return 1681692777;
	}
}



interface I2BB {

	function f0() external payable returns (uint);
}
interface I2B is I2BB {

	function f1() external payable returns (uint);
}
interface I2 is I2B {

}



interface I3BB {

	function f0() external view returns (uint);
}
interface I3B is I3BB {

	function f1() external payable returns (uint);
}
interface I3 is I3B {

}
library L4 {

	function f0(uint) private pure returns (uint)
	{
		return 1714636915;
	}
}



interface I5BB {

	function f0() external view returns (uint);
}
interface I5B is I5BB {

	function f1() external payable returns (uint);
}


interface I5BBBB {

	function f0() external view returns (uint);
}
interface I5BBB is I5BB, I5BBBB {

	function f0() override(I5BB, I5BBBB)
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I5 is I5B, I5BBB {

	function f0() override(I5BB, I5BBB)
	external view returns (uint);
	function f1() override(I5B, I5BBB)
	external payable returns (uint);
}


interface I8B {

	function f0() external pure returns (uint);
}
interface I8 is I8B {

}
library L9 {

	function f0(uint) private pure returns (uint)
	{
		return 1649760492;
	}
}


interface I10B {

	function f0() external payable returns (uint);
}

interface I10BB is I10B {

	function f1() external view returns (uint);
}
interface I10 is I10B, I10BB {

	function f0() override
	external payable returns (uint);
	function f1() override
	external view returns (uint);
}



interface I11BB {

	function f0() external view returns (uint);
}
interface I11B is I11BB {

	function f1() external payable returns (uint);
}


interface I11BBBB {

	function f0() external view returns (uint);
}
interface I11BBB is I11BB, I11BBBB {

	function f0() override(I11BB, I11BBBB)
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I11 is I11B, I11BBB {

	function f0() override(I11BB, I11BBB)
	external view returns (uint);
	function f1() override(I11B, I11BBB)
	external payable returns (uint);
}



interface I12BB {

	function f0() external view returns (uint);
}
interface I12B is I12BB {

	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}


interface I12BBBB {

	function f0() external view returns (uint);
}
interface I12BBB is I12B, I12BBBB {

	function f0() override(I12B, I12BBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() external payable returns (uint);
}
interface I12 is I12B, I12BBB {

	function f0() override(I12B, I12BBB)
	external view returns (uint);
	function f1() override(I12B, I12BBB)
	external payable returns (uint);
}


contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}

