
pragma solidity >=0.0;






interface I0BBB {

	function f0() external payable returns (uint);
}
interface I0BB is I0BBB {

	function f0() override
	external payable returns (uint);
	function f1() external payable returns (uint);
}
interface I0B is I0BB {

	function f2() external view returns (uint);
}


interface I0BBBBB {

	function f0() external payable returns (uint);
}
interface I0BBBB is I0BB, I0BBBBB {

	function f0() override(I0BB, I0BBBBB)
	external payable returns (uint);
}

interface I0BBBBBB is I0BBBB {

	function f0() override
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() external view returns (uint);
}
interface I0 is I0B, I0BBBB, I0BBBBBB {

	function f0() override(I0BB, I0BBBB, I0BBBBBB)
	external payable returns (uint);
	function f1() override(I0BB, I0BBBBBB)
	external payable returns (uint);
	function f2() override(I0B, I0BBBBBB)
	external view returns (uint);
}
library L1 {

	function f0(uint) public view returns (uint)
	{
		return 1681692777;
	}
	function f1(uint) internal pure returns (uint)
	{
		return 1714636915;
	}
	function f2(uint) public view returns (uint)
	{
		return 1957747793;
	}
	function f3(uint) internal pure returns (uint)
	{
		return 424238335;
	}
	function f4(uint) public pure returns (uint)
	{
		return 719885386;
	}
	function f5(uint) internal view returns (uint)
	{
		return 1649760492;
	}
	function f6(uint) internal pure returns (uint)
	{
		return 596516649;
	}
}


interface I2B {

	function f0() external payable returns (uint);
}

interface I2BB is I2B {

	function f1() external payable returns (uint);
}
interface I2 is I2B, I2BB {

	function f0() override
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}




interface I3BBB {

	function f0() external payable returns (uint);
}
interface I3BB is I3BBB {

	function f1() external payable returns (uint);
}
interface I3B is I3BB {

	function f2() external view returns (uint);
}


interface I3BBBBB {

	function f0() external payable returns (uint);
}
interface I3BBBB is I3B, I3BBBBB {

	function f0() override(I3BBB, I3BBBBB)
	external payable returns (uint);
}
interface I3 is I3B, I3BBBB {

	function f0() override(I3BBB, I3BBBB)
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}


contract C {
	using L1 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f4() != 719885386)
			return 1;
		return 0;
	}
}

