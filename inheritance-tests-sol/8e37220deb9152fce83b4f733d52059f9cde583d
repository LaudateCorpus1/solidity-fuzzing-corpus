pragma solidity >=0.0;
interface I0 {
	function f0() external payable returns (uint);
}
library L1 {
	function f0(uint) public pure returns (uint)
	{
		return 1804289383;
	}
}
abstract contract C2B {
}
contract C2BB is C2B {
}
interface C2BBBBBBBBBBB {
	function f0() external payable returns (uint);
	function f1() external pure returns (uint);
}
interface C2BBBBBBBBBB is C2BBBBBBBBBBB {
	function f1() override
	external pure returns (uint);
}
interface C2BBBBBBBBBBBB is C2BBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external pure returns (uint);
	function f2() external payable returns (uint);
	function f3() external payable returns (uint);
}
interface C2BBBBBBBBB is C2BBBBBBBBBB, C2BBBBBBBBBBBB {
	function f0() override(C2BBBBBBBBBBB, C2BBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(C2BBBBBBBBBB, C2BBBBBBBBBBBB)
	external pure returns (uint);
	function f3() override
	external payable returns (uint);
	function f4() external view returns (uint);
	function f5() external view returns (uint);
}
interface C2BBBBBBBB is C2BBBBBBBBB {
	function f2() override
	external payable returns (uint);
	function f4() override
	external view returns (uint);
	function f5() override
	external view returns (uint);
}
interface C2BBBBBBBBBBBBB is C2BBBBBBBBB {
	function f0() override
	external payable returns (uint);
	function f6() external view returns (uint);
}
interface C2BBBBBBB is C2BBBBBBBB, C2BBBBBBBBBBBBB {
	function f0() override(C2BBBBBBBBB, C2BBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override
	external pure returns (uint);
	function f2() override(C2BBBBBBBB, C2BBBBBBBBBBBB)
	external payable returns (uint);
	function f3() override
	external payable returns (uint);
	function f4() override(C2BBBBBBBB, C2BBBBBBBBB)
	external view returns (uint);
	function f5() override(C2BBBBBBBB, C2BBBBBBBBB)
	external view returns (uint);
}
abstract contract C2BBBBBB is C2BBBBBBB {
	function f0() virtual external payable
	override
	returns (uint)
	{
		return 447122901;
	}
	function f1() virtual external pure
	override
	returns (uint);
	function f2() virtual external payable
	override
	returns (uint);
	function f3() virtual external payable
	override
	returns (uint);
	function f4() virtual external view
	override
	returns (uint);
	function f5() external view
	override
	returns (uint)
	{
		return 1488084345;
	}
	function f6() virtual external view
	override
	returns (uint)
	{
		return 1713290811;
	}
}
contract C2BBBBB is C2BBBBBB {
	function f1() virtual external pure
	override
	returns (uint)
	{
		return 2141239278;
	}
	function f2() virtual external payable
	override
	returns (uint)
	{
		return 22708192;
	}
	function f3() virtual external payable
	override
	returns (uint)
	{
		return 389511797;
	}
	function f4() virtual external view
	override
	returns (uint)
	{
		return 148586944;
	}
}
contract C2BBBB is C2BBBBB {
	function f1() external pure
	override
	returns (uint)
	{
		return 1081725071;
	}
	function f3() external payable
	override
	returns (uint)
	{
		return 2144655890;
	}
	function f6() virtual external view
	override
	returns (uint)
	{
		return 2082997658;
	}
}
contract C2BBB is C2B, C2BBBB {
	function f0() virtual external payable
	override
	returns (uint)
	{
		return 2135127099;
	}
	function f2() virtual external payable
	override
	returns (uint)
	{
		return 1433381493;
	}
	function f4() virtual external view
	override
	returns (uint)
	{
		return 492461133;
	}
	function f6() virtual external view
	override
	returns (uint)
	{
		return 745428943;
	}
}
abstract contract C2 is C2B, C2BB, C2BBB {
	function f0() virtual external payable
	override
	returns (uint)
	{
		return 1797709094;
	}
	function f2() external payable
	override
	returns (uint)
	{
		return 600682875;
	}
	function f6() external view
	override
	returns (uint)
	{
		return 635687000;
	}
}
library L3 {
	function f0(uint) internal pure returns (uint)
	{
		return 424238335;
	}
}
interface C4BBBBBB {
	function f0() external payable returns (uint);
	function f1() external pure returns (uint);
}
interface C4BBBBB is C4BBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external pure returns (uint);
}
interface C4BBBBBBB is C4BBBBB {
	function f1() override
	external pure returns (uint);
	function f2() external payable returns (uint);
}
interface C4BBBB is C4BBBBB, C4BBBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() override(C4BBBBB, C4BBBBBBB)
	external pure returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() external view returns (uint);
	function f4() external view returns (uint);
}
interface C4BBB is C4BBBB {
	function f2() override
	external payable returns (uint);
}
interface C4BBBBBBBB is C4BBB {
	function f3() override
	external view returns (uint);
	function f5() external payable returns (uint);
}
interface C4BB is C4BBB, C4BBBBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external pure returns (uint);
	function f3() override(C4BBBB, C4BBBBBBBB)
	external view returns (uint);
	function f6() external payable returns (uint);
}
abstract contract C4B is C4BB {
	function f0() virtual external payable
	override
	returns (uint);
	function f1() virtual external pure
	override
	returns (uint);
	function f2() external payable
	override
	returns (uint)
	{
		return 1625455927;
	}
	function f3() virtual external view
	override
	returns (uint);
	function f4() virtual external view
	override
	returns (uint);
	function f5() virtual external payable
	override
	returns (uint)
	{
		return 1881273109;
	}
	function f6() external payable
	override
	returns (uint)
	{
		return 882075779;
	}
}
contract C4 is C4B {
	function f0() external payable
	override
	returns (uint)
	{
		return 1694452345;
	}
	function f1() virtual external pure
	override
	returns (uint)
	{
		return 1830250426;
	}
	function f3() virtual external view
	override
	returns (uint)
	{
		return 577012872;
	}
	function f4() virtual external view
	override
	returns (uint)
	{
		return 1489232769;
	}
}
contract C {
	using L1 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1804289383)
			return 1;
		return 0;
	}
}
