pragma solidity >=0.0;
interface I1 {
	function f0() external payable returns (uint);
}
interface I2BB {
	function f0() external view returns (uint);
}
interface I2B is I2BB {
	function f0() override
	external view returns (uint);
}
interface I2 is I2B {
	function f1() external payable returns (uint);
	function f2() external payable returns (uint);
}
interface I3BBBBBB {
}
interface I3BBBBB is I3BBBBBB {
}
interface I3BBBB is I3BBBBB {
}
interface I3BBBBBBBBBB {
}
interface I3BBBBBBBBB is I3BBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I3BBBBBBBB is I3BBBBBBBBB {
}
interface I3BBBBBBB is I3BBBB, I3BBBBBBBB {
}
interface I3BBB is I3BBBB, I3BBBBBBB {
	function f1() external payable returns (uint);
}
interface I3BB is I3BBB {
	function f2() external view returns (uint);
}
interface I3B is I3BB {
	function f0() override
	external view returns (uint);
}
interface I3BBBBBBBBBBBBBB {
}
interface I3BBBBBBBBBBBBB is I3BBBBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I3BBBBBBBBBBBB is I3BBBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface I3BBBBBBBBBBB is I3BB, I3BBBBBBBBBBBB {
	function f0() override(I3BBBBBBBBB, I3BBBBBBBBBBBB)
	external view returns (uint);
	function f2() override
	external view returns (uint);
}
interface I3 is I3B, I3BBBBBBBBBBB {
	function f0() override(I3B, I3BBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override(I3BB, I3BBBBBBBBBBB)
	external view returns (uint);
	function f3() external payable returns (uint);
}
interface I4B {
	function f0() external view returns (uint);
}
interface I4 is I4B {
}
interface C6B {
	function f0() external view returns (uint);
}
contract C6 is C6B {
	function f0() virtual external view
	override
	returns (uint)
	{
		return 662405787;
	}
}
interface I8 {
	function f0() external payable returns (uint);
	function f1() external payable returns (uint);
}
interface I9BBBB {
	function f0() external view returns (uint);
}
interface I9BBB is I9BBBB {
}
interface I9BB is I9BBB {
}
interface I9B is I9BB {
	function f0() override
	external view returns (uint);
}
interface I9BBBBB is I9BB {
	function f1() external view returns (uint);
}
interface I9 is I9B, I9BBBBB {
	function f0() override(I9B, I9BBBB)
	external view returns (uint);
}
library L10 {
	function f0(uint) external pure returns (uint)
	{
		return 424238335;
	}
}
contract C {
	function test() public returns (uint)
	{
			C6 tc0 = new C6();
			if (tc0.f0() != 662405787)
				return 1;
			return 0;
	}
}
