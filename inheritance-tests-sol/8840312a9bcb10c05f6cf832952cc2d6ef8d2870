pragma solidity >=0.0;
interface I0BBBB {
	function f0() external payable returns (uint);
}
interface I0BBB is I0BBBB {
	function f0() override
	external payable returns (uint);
}
interface I0BB is I0BBB {
}
interface I0BBBBBBBB {
	function f0() external payable returns (uint);
}
interface I0BBBBBBB is I0BBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I0BBBBBB is I0BBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I0BBBBB is I0BBB, I0BBBBBB {
	function f0() override(I0BBB, I0BBBBBB)
	external payable returns (uint);
}
interface I0B is I0BB, I0BBBBB {
	function f0() override(I0BBB, I0BBBBB)
	external payable returns (uint);
}
interface I0 is I0B {
	function f0() override
	external payable returns (uint);
}
interface I1BBBB {
	function f0() external payable returns (uint);
}
interface I1BBB is I1BBBB {
	function f0() override
	external payable returns (uint);
}
interface I1BB is I1BBB {
	function f0() override
	external payable returns (uint);
}
interface I1BBBBBBBB {
	function f0() external payable returns (uint);
}
interface I1BBBBBBB is I1BBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I1BBBBBB is I1BBBBBBB {
}
interface I1BBBBB is I1BB, I1BBBBBB {
	function f0() override(I1BB, I1BBBBBBB)
	external payable returns (uint);
}
interface I1B is I1BB, I1BBBBB {
	function f0() override(I1BB, I1BBBBB)
	external payable returns (uint);
}
interface I1 is I1B {
}
library L2 {
	function f0(uint) public view returns (uint)
	{
		return 1681692777;
	}
}
contract C {
	using L2 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1681692777)
			return 1;
		return 0;
	}
}
