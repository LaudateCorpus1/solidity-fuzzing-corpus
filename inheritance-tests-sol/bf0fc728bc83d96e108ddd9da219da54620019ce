pragma solidity >=0.0;
interface I0BB {
	function f0() external view returns (uint);
}
interface I0B is I0BB {
	function f1() external payable returns (uint);
}
interface I0 is I0B {
	function f1() override
	external payable returns (uint);
}
interface I1BBBB {
	function f0() external payable returns (uint);
}
interface I1BBB is I1BBBB {
	function f0() override
	external payable returns (uint);
}
interface I1BBBBB is I1BBBB {
	function f0() override
	external payable returns (uint);
	function f1() external payable returns (uint);
}
interface I1BB is I1BBB, I1BBBBB {
	function f0() override(I1BBB, I1BBBBB)
	external payable returns (uint);
}
interface I1B is I1BB {
}
interface I1 is I1B {
	function f0() override
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface C2BBBB {
	function f0() external payable returns (uint);
}
interface C2BBB is C2BBBB {
}
contract C2BB is C2BBB {
	function f0() external payable
	override
	returns (uint)
	{
		return 1853505735;
	}
}
abstract contract C2B is C2BB {
}
contract C2 is C2B {
	function f1() public view
	
	returns (uint)
	{
		return 1531210416;
	}
}
interface I3BBBB {
	function f0() external payable returns (uint);
}
interface I3BBB is I3BBBB {
	function f0() override
	external payable returns (uint);
}
interface I3BBBBB is I3BBB {
	function f0() override
	external payable returns (uint);
	function f1() external payable returns (uint);
}
interface I3BB is I3BBB, I3BBBBB {
	function f0() override(I3BBB, I3BBBBB)
	external payable returns (uint);
}
interface I3B is I3BB {
}
interface I3 is I3B {
	function f0() override
	external payable returns (uint);
}
interface I4BBB {
}
interface I4BB is I4BBB {
	function f0() external view returns (uint);
}
interface I4B is I4BB {
	function f0() override
	external view returns (uint);
}
interface I4BBBBBB {
	function f0() external view returns (uint);
}
interface I4BBBBB is I4BBBBBB {
	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I4BBBB is I4BB, I4BBBBB {
	function f0() override(I4BB, I4BBBBB)
	external view returns (uint);
}
interface I4 is I4B, I4BBBB {
	function f0() override(I4B, I4BBBB)
	external view returns (uint);
	function f2() external payable returns (uint);
}
interface I5BBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I5BBBBBBBBB is I5BBBBBBBBBB {
}
interface I5BBBBBBBBBBB is I5BBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I5BBBBBBBB is I5BBBBBBBBB, I5BBBBBBBBBBB {
	function f0() override(I5BBBBBBBBBB, I5BBBBBBBBBBB)
	external view returns (uint);
	function f2() external payable returns (uint);
	function f3() external view returns (uint);
}
interface I5BBBBBBB is I5BBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
}
interface I5BBBBBB is I5BBBBBBB {
	function f0() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
}
interface I5BBBBB is I5BBBBBB {
	function f2() override
	external payable returns (uint);
	function f4() external payable returns (uint);
}
interface I5BBBB is I5BBBBB {
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
}
interface I5BBBBBBBBBBBB is I5BBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f5() external payable returns (uint);
}
interface I5BBB is I5BBBB, I5BBBBBBBBBBBB {
	function f0() override(I5BBBBBB, I5BBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I5BBBBBBB, I5BBBBBBBBBBBB)
	external payable returns (uint);
	function f2() override(I5BBBB, I5BBBBBBBBBBBB)
	external payable returns (uint);
	function f3() override(I5BBBB, I5BBBBBBBBBBBB)
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() external view returns (uint);
}
interface I5BB is I5BBB {
	function f0() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
}
interface I5B is I5BB {
	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I5 is I5B {
	function f2() override
	external payable returns (uint);
	function f5() override
	external payable returns (uint);
}
contract C8 {
	function f0() public view
	
	returns (uint)
	{
		return 590528754;
	}
}
contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}
