
pragma solidity >=0.0;


library L0 {

	function f0(uint) internal pure returns (uint)
	{
		return 1804289383;
	}
	function f1(uint) private pure returns (uint)
	{
		return 846930886;
	}
}





interface I1BBBB {

	function f0() external payable returns (uint);
}
interface I1BBB is I1BBBB {

	function f0() override
	external payable returns (uint);
}
interface I1BB is I1BBB {

}




interface I1BBBBBBBB {

	function f0() external payable returns (uint);
}
interface I1BBBBBBB is I1BBBBBBBB {

	function f0() override
	external payable returns (uint);
}
interface I1BBBBBB is I1BBBBBBB {

	function f0() override
	external payable returns (uint);
}
interface I1BBBBB is I1BBB, I1BBBBBB {

	function f0() override(I1BBB, I1BBBBBB)
	external payable returns (uint);
}
interface I1B is I1BB, I1BBBBB {

	function f0() override(I1BBB, I1BBBBB)
	external payable returns (uint);
}
interface I1 is I1B {

	function f0() override
	external payable returns (uint);
}
library L2 {

	function f0(uint) external pure returns (uint)
	{
		return 1714636915;
	}
}




interface I3BBB {

	function f0() external payable returns (uint);
	function f1() external payable returns (uint);
}
interface I3BB is I3BBB {

	function f1() override
	external payable returns (uint);
}
interface I3B is I3BB {

	function f0() override
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}


interface I3BBBBB {

	function f0() external payable returns (uint);
}
interface I3BBBB is I3BB, I3BBBBB {

	function f0() override(I3BBB, I3BBBBB)
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I3 is I3B, I3BBBB {

	function f0() override(I3B, I3BBBB)
	external payable returns (uint);
	function f1() override(I3B, I3BBBB)
	external payable returns (uint);
}






interface I4BBBBB {

	function f0() external view returns (uint);
}

interface I4BBBBBB is I4BBBBB {

	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
}
interface I4BBBB is I4BBBBB, I4BBBBBB {

	function f0() override(I4BBBBB, I4BBBBBB)
	external view returns (uint);
}
interface I4BBB is I4BBBB {

}
interface I4BB is I4BBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
}


interface I4BBBBBBBB {

	function f0() external view returns (uint);
}
interface I4BBBBBBB is I4BB, I4BBBBBBBB {

	function f0() override(I4BB, I4BBBBBBBB)
	external view returns (uint);
	function f1() override
	external view returns (uint);
}
interface I4B is I4BB, I4BBBBBBB {

	function f0() override(I4BB, I4BBBBBBB)
	external view returns (uint);
	function f1() override(I4BB, I4BBBBBBB)
	external view returns (uint);
}

interface I4BBBBBBBBB is I4B {

	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() external view returns (uint);
	function f3() external payable returns (uint);
}
interface I4 is I4B, I4BBBBBBBBB {

	function f0() override(I4B, I4BBBBBBBBB)
	external view returns (uint);
	function f1() override(I4B, I4BBBBBBBBB)
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override
	external payable returns (uint);
}
library L5 {

	function f0(uint) external pure returns (uint)
	{
		return 596516649;
	}
}

interface I6 {

	function f0() external view returns (uint);
}


interface I7B {

	function f0() external view returns (uint);
}
interface I7 is I7B {

}


interface C9B {

	function f0() external view returns (uint);
}
contract C9 is C9B {

	function f0() virtual external view
	override
	returns (uint)
	{
		return 311420103;
	}
}


contract C {
	function test() public returns (uint)
	{
			C9 tc0 = new C9();
			if (tc0.f0() != 311420103)
				return 1;
			return 0;
	}
}

