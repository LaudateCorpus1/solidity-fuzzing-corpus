
pragma solidity >=0.0;













contract C0BBBBBBBBBB {

	function f0() virtual public pure
	
	returns (uint)
	{
		return 1575004944;
	}
}
contract C0BBBBBBBBB is C0BBBBBBBBBB {

	function f0() public pure
	override
	returns (uint)
	{
		return 992596462;
	}
}
contract C0BBBBBBBB is C0BBBBBBBBB {

}
contract C0BBBBBBB is C0BBBBBBBB {

}
contract C0BBBBBB is C0BBBBBBB {

}
contract C0BBBBB is C0BBBBBB {

}
contract C0BBBB is C0BBBBB {

}
contract C0BBB is C0BBBB {

}
contract C0BB is C0BBB {

}
contract C0B is C0BB {

}
contract C0 is C0B {

}


interface I1B {

}
interface I1 is I1B {

}


contract C2B {

	function f0() public view
	
	returns (uint)
	{
		return 1805831206;
	}
	function f1() private pure
	
	returns (uint)
	{
		return 769429449;
	}
}

contract C2BB is C2B {

	function f2() public view
	
	returns (uint)
	{
		return 399257814;
	}
	function f3() private pure
	
	returns (uint)
	{
		return 1055691416;
	}
}

contract C2BBB is C2BB {

}

contract C2BBBB is C2B {

}

contract C2BBBBB is C2BBBB {

}

contract C2BBBBBB is C2BBBB {

}
abstract contract C2 is C2B, C2BB, C2BBB, C2BBBB, C2BBBBB, C2BBBBBB {

}
library L3 {

	function f0(uint) public pure returns (uint)
	{
		return 424238335;
	}
	function f1(uint) public pure returns (uint)
	{
		return 719885386;
	}
}


contract C4B {

	function f0() public view
	
	returns (uint)
	{
		return 45373597;
	}
	function f1() private pure
	
	returns (uint)
	{
		return 1943064494;
	}
}

contract C4BB is C4B {

	function f2() public view
	
	returns (uint)
	{
		return 170423502;
	}
	function f3() private pure
	
	returns (uint)
	{
		return 1650497032;
	}
}

contract C4BBB is C4B {

}

contract C4BBBB is C4BB {

}

contract C4BBBBB is C4B {

}

contract C4BBBBBB is C4B {

}
abstract contract C4 is C4B, C4BB, C4BBB, C4BBBB, C4BBBBB, C4BBBBBB {

}


contract C {
	using L3 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f1() != 719885386)
			return 1;
		return 0;
	}
}

