
pragma solidity >=0.0;






interface I0BBB {

	function f0() external payable returns (uint);
}
interface I0BB is I0BBB {

	function f1() external payable returns (uint);
}
interface I0B is I0BB {

	function f0() override
	external payable returns (uint);
}




interface I0BBBBBBB {

	function f0() external payable returns (uint);
}
interface I0BBBBBB is I0BBBBBBB {

}
interface I0BBBBB is I0BBBBBB {

}
interface I0BBBB is I0BB, I0BBBBB {

	function f0() override(I0BBB, I0BBBBBBB)
	external payable returns (uint);
}

interface I0BBBBBBBB is I0BBBB {

	function f2() external view returns (uint);
}




interface I0BBBBBBBBBBBB {

	function f0() external payable returns (uint);
}
interface I0BBBBBBBBBBB is I0BBBBBBBBBBBB {

}
interface I0BBBBBBBBBB is I0BBBBBBBBBBB {

}
interface I0BBBBBBBBB is I0BBBBB, I0BBBBBBBBBB {

	function f0() override(I0BBBBBBB, I0BBBBBBBBBBBB)
	external payable returns (uint);
}
interface I0 is I0B, I0BBBB, I0BBBBBBBB, I0BBBBBBBBB {

	function f0() override(I0B, I0BBBB, I0BBBBBBBBB)
	external payable returns (uint);
	function f2() override
	external view returns (uint);
}




interface I1BBB {

	function f0() external payable returns (uint);
}
interface I1BB is I1BBB {

	function f1() external payable returns (uint);
}
interface I1B is I1BB {

}




interface I1BBBBBBB {

	function f0() external payable returns (uint);
}
interface I1BBBBBB is I1BBBBBBB {

	function f0() override
	external payable returns (uint);
}
interface I1BBBBB is I1BBBBBB {

}
interface I1BBBB is I1BB, I1BBBBB {

	function f0() override(I1BBB, I1BBBBBB)
	external payable returns (uint);
}

interface I1BBBBBBBB is I1BB {

	function f1() override
	external payable returns (uint);
	function f2() external view returns (uint);
}




interface I1BBBBBBBBBBBB {

	function f0() external payable returns (uint);
}
interface I1BBBBBBBBBBB is I1BBBBBBBBBBBB {

}
interface I1BBBBBBBBBB is I1BBBBBBBBBBB {

}
interface I1BBBBBBBBB is I1BB, I1BBBBBBBBBB {

	function f0() override(I1BBB, I1BBBBBBBBBBBB)
	external payable returns (uint);
}
interface I1 is I1B, I1BBBB, I1BBBBBBBB, I1BBBBBBBBB {

	function f0() override(I1BBB, I1BBBB, I1BBBBBBBBB)
	external payable returns (uint);
	function f1() override(I1BB, I1BBBBBBBB)
	external payable returns (uint);
	function f2() override
	external view returns (uint);
}


interface I2B {

}



interface I2BBBB {

	function f0() external view returns (uint);
}
interface I2BBB is I2BBBB {

	function f1() external pure returns (uint);
}
interface I2BB is I2B, I2BBB {

	function f0() override
	external view returns (uint);
}
interface I2 is I2B, I2BB {

	function f0() override
	external view returns (uint);
	function f2() external view returns (uint);
}


interface I3B {

}




interface I3BBBBB {

	function f0() external view returns (uint);
}
interface I3BBBB is I3BBBBB {

	function f0() override
	external view returns (uint);
}
interface I3BBB is I3BBBB {

	function f0() override
	external view returns (uint);
}
interface I3BB is I3B, I3BBB {

}



interface I3BBBBBBBB {

	function f0() external view returns (uint);
}
interface I3BBBBBBB is I3BBBBBBBB {

}
interface I3BBBBBB is I3B, I3BBBBBBB {

}

interface I3BBBBBBBBB is I3BB {

	function f1() external view returns (uint);
}

interface I3BBBBBBBBBB is I3B {

	function f0() external view returns (uint);
}



interface I3BBBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I3BBBBBBBBBBBB is I3BBBBBBBBBBBBB {

	function f1() external view returns (uint);
	function f2() external payable returns (uint);
}


interface I3BBBBBBBBBBBBBBB {

}
interface I3BBBBBBBBBBBBBB is I3BBBBBBBBBBBB, I3BBBBBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() external view returns (uint);
}
interface I3BBBBBBBBBBB is I3BBBBBBB, I3BBBBBBBBBBBB, I3BBBBBBBBBBBBBB {

	function f0() override(I3BBBBBBBB, I3BBBBBBBBBBBBB, I3BBBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override(I3BBBBBBBBBBBB, I3BBBBBBBBBBBBBB)
	external payable returns (uint);
	function f3() override
	external view returns (uint);
}




interface I3BBBBBBBBBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I3BBBBBBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I3BBBBBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBBBBB {

}
interface I3BBBBBBBBBBBBBBBB is I3BBBBBB, I3BBBBBBBBBBBBBBBBB {

	function f0() override(I3BBBBBBBB, I3BBBBBBBBBBBBBBBBBB)
	external view returns (uint);
}
interface I3 is I3B, I3BB, I3BBBBBB, I3BBBBBBBBB, I3BBBBBBBBBB, I3BBBBBBBBBBB, I3BBBBBBBBBBBBBBBB {

	function f0() override(I3BBB, I3BBBBBBBB, I3BBBBBBBBBB, I3BBBBBBBBBBB, I3BBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I3BBBBBBBBB, I3BBBBBBBBBBBB)
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() external view returns (uint);
	function f5() external view returns (uint);
	function f6() external payable returns (uint);
}


interface I4B {

}




interface I4BBBBB {

	function f0() external view returns (uint);
}
interface I4BBBB is I4BBBBB {

}
interface I4BBB is I4BBBB {

}
interface I4BB is I4B, I4BBB {

}



interface I4BBBBBBBB {

	function f0() external view returns (uint);
}
interface I4BBBBBBB is I4BBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I4BBBBBB is I4BB, I4BBBBBBB {

	function f0() override(I4BBBBB, I4BBBBBBB)
	external view returns (uint);
}

interface I4BBBBBBBBB is I4B {

	function f0() external view returns (uint);
}

interface I4BBBBBBBBBB is I4BB {

	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
}



interface I4BBBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I4BBBBBBBBBBBB is I4BBBBBBBBBBBBB {

	function f1() external view returns (uint);
	function f2() external payable returns (uint);
}


interface I4BBBBBBBBBBBBBBB {

}
interface I4BBBBBBBBBBBBBB is I4BBBBBBBBBBBB, I4BBBBBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() external view returns (uint);
}
interface I4BBBBBBBBBBB is I4BBBBBBBBBB, I4BBBBBBBBBBBB, I4BBBBBBBBBBBBBB {

	function f0() override(I4BBBBBBBBBB, I4BBBBBBBBBBBBB, I4BBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I4BBBBBBBBBB, I4BBBBBBBBBBBB, I4BBBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override(I4BBBBBBBBBBBB, I4BBBBBBBBBBBBBB)
	external payable returns (uint);
}




interface I4BBBBBBBBBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I4BBBBBBBBBBBBBBBBBB is I4BBBBBBBBBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I4BBBBBBBBBBBBBBBBB is I4BBBBBBBBBBBBBBBBBB {

}
interface I4BBBBBBBBBBBBBBBB is I4BBBBBBBBBBBBBB, I4BBBBBBBBBBBBBBBBB {

	function f0() override(I4BBBBBBBBBBBBBB, I4BBBBBBBBBBBBBBBBBB)
	external view returns (uint);
}
interface I4 is I4B, I4BB, I4BBBBBB, I4BBBBBBBBB, I4BBBBBBBBBB, I4BBBBBBBBBBB, I4BBBBBBBBBBBBBBBB {

	function f0() override(I4BBBBB, I4BBBBBB, I4BBBBBBBBB, I4BBBBBBBBBB, I4BBBBBBBBBBB, I4BBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I4BBBBBBBBBB, I4BBBBBBBBBBB, I4BBBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override(I4BBBBBBBBBBB, I4BBBBBBBBBBBBBB)
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f4() external view returns (uint);
	function f5() external view returns (uint);
	function f6() external payable returns (uint);
}


contract C5B {

	function f0() public view
	
	returns (uint)
	{
		return 1578591759;
	}
}
contract C5 is C5B {

}


contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}

