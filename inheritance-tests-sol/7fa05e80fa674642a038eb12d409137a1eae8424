
pragma solidity >=0.0;


library L0 {

	function f0(uint) external pure returns (uint)
	{
		return 1804289383;
	}
}

contract C1 {

	function f0() virtual public pure
	
	returns (uint)
	{
		return 182605794;
	}
}





interface C2BBBB {

	function f0() external payable returns (uint);
}
interface C2BBB is C2BBBB {

	function f0() override
	external payable returns (uint);
}
interface C2BB is C2BBB {

	function f1() external payable returns (uint);
}
interface C2B is C2BB {

}
contract C2 is C2B {

	function f0() external payable
	override
	returns (uint)
	{
		return 192302371;
	}
	function f1() external payable
	override
	returns (uint)
	{
		return 1250328747;
	}
}




interface C3BBB {

	function f0() external payable returns (uint);
}
interface C3BB is C3BBB {

}
contract C3B is C3BB {

	function f0() external payable
	override
	returns (uint)
	{
		return 1882556969;
	}
}
contract C3 is C3B {

}




interface C4BBB {

	function f0() external payable returns (uint);
}
interface C4BB is C4BBB {

}
contract C4B is C4BB {

	function f0() virtual external payable
	override
	returns (uint)
	{
		return 914937185;
	}
}
contract C4 is C4B {

}




interface I6BBB {

	function f0() external payable returns (uint);
}
interface I6BB is I6BBB {

	function f1() external payable returns (uint);
}
interface I6B is I6BB {

	function f0() override
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}


interface I6BBBBB {

	function f0() external payable returns (uint);
}
interface I6BBBB is I6B, I6BBBBB {

	function f0() override(I6B, I6BBBBB)
	external payable returns (uint);
}

interface I6BBBBBB is I6BB {

	function f0() override
	external payable returns (uint);
	function f2() external payable returns (uint);
}
interface I6 is I6B, I6BBBB, I6BBBBBB {

	function f0() override(I6B, I6BBBB, I6BBBBBB)
	external payable returns (uint);
	function f1() override(I6B, I6BB)
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
}




interface C7BBB {

	function f0() external view returns (uint);
	function f1() external payable returns (uint);
}
interface C7BB is C7BBB {

	function f1() override
	external payable returns (uint);
}
interface C7B is C7BB {

}
contract C7 is C7B {

	function f0() virtual external view
	override
	returns (uint)
	{
		return 1287522347;
	}
	function f1() external payable
	override
	returns (uint)
	{
		return 1057382352;
	}
}



interface I8BB {

	function f0() external view returns (uint);
}
interface I8B is I8BB {

	function f1() external payable returns (uint);
}
interface I8 is I8B {

	function f0() override
	external view returns (uint);
}




interface C9BBB {

	function f0() external view returns (uint);
}
interface C9BB is C9BBB {

	function f0() override
	external view returns (uint);
}
abstract contract C9B is C9BB {

	function f0() external view
	override
	returns (uint)
	{
		return 1243696899;
	}
}
contract C9 is C9B {

}


abstract contract C10B {

	function f0() virtual public pure
	
	returns (uint);
}
contract C10 is C10B {

	function f0() public pure
	override
	returns (uint)
	{
		return 1951824771;
	}
}
library L11 {

	function f0(uint) internal pure returns (uint)
	{
		return 1714636915;
	}
}


contract C12B {

	function f0() public view
	
	returns (uint)
	{
		return 2130959757;
	}
}
contract C12 is C12B {

}







interface C13BBBBBB {

	function f0() external view returns (uint);
}
interface C13BBBBB is C13BBBBBB {

	function f0() override
	external view returns (uint);
}
interface C13BBBB is C13BBBBB {

}
interface C13BBB is C13BBBB {

	function f0() override
	external view returns (uint);
}






interface C13BBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface C13BBBBBBBBBBB is C13BBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface C13BBBBBBBBBB is C13BBBBBBBBBBB {

}
interface C13BBBBBBBBB is C13BBBBBBBBBB {

	function f0() override
	external view returns (uint);
}



interface C13BBBBBBBBBBBBBBB {

}
interface C13BBBBBBBBBBBBBB is C13BBBBBBBBBBBBBBB {

}
interface C13BBBBBBBBBBBBB is C13BBBBBBBBBB, C13BBBBBBBBBBBBBB {

}
interface C13BBBBBBBB is C13BBBBBBBBB, C13BBBBBBBBBBBBB {

	function f0() override(C13BBBBBBBBB, C13BBBBBBBBBBB)
	external view returns (uint);
}
interface C13BBBBBBB is C13BBBB, C13BBBBBBBB {

	function f0() override(C13BBBBB, C13BBBBBBBB)
	external view returns (uint);
}
interface C13BB is C13BBB, C13BBBBBBB {

	function f0() override(C13BBB, C13BBBBBBB)
	external view returns (uint);
}
interface C13B is C13BB {

}
contract C13 is C13B {

	function f0() external view
	override
	returns (uint)
	{
		return 2127735996;
	}
}



abstract contract C14BB {

}
contract C14B is C14BB {

}



interface C14BBBBB {

	function f0() external payable returns (uint);
}
interface C14BBBB is C14BBBBB {

	function f0() override
	external payable returns (uint);
}
interface C14BBB is C14BBBB {

	function f0() override
	external payable returns (uint);
}
contract C14 is C14B, C14BBB {

	function f0() external payable
	override
	returns (uint)
	{
		return 324062450;
	}
}
library L15 {

	function f0(uint) public pure returns (uint)
	{
		return 1649760492;
	}
}


contract C {
	function test() public returns (uint)
	{
			C1 tc0 = new C1();
			if (tc0.f0() != 182605794)
				return 1;
			C10 tc1 = new C10();
			if (tc1.f0() != 1951824771)
				return 2;
			C12 tc2 = new C12();
			if (tc2.f0() != 2130959757)
				return 3;
			C12B tc3 = new C12B();
			if (tc3.f0() != 2130959757)
				return 4;
			C13 tc4 = new C13();
			if (tc4.f0() != 2127735996)
				return 5;
			C14 tc5 = new C14();
			if (tc5.f0() != 324062450)
				return 6;
			C2 tc6 = new C2();
			if (tc6.f0() != 192302371)
				return 7;
			if (tc6.f1() != 1250328747)
				return 8;
			C3 tc7 = new C3();
			if (tc7.f0() != 1882556969)
				return 9;
			C3B tc8 = new C3B();
			if (tc8.f0() != 1882556969)
				return 10;
			C4 tc9 = new C4();
			if (tc9.f0() != 914937185)
				return 11;
			C4B tc10 = new C4B();
			if (tc10.f0() != 914937185)
				return 12;
			C7 tc11 = new C7();
			if (tc11.f0() != 1287522347)
				return 13;
			if (tc11.f1() != 1057382352)
				return 14;
			C9 tc12 = new C9();
			if (tc12.f0() != 1243696899)
				return 15;
			return 0;
	}
}

