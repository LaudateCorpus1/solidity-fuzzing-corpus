pragma solidity >=0.0;
interface I0 {
	function f0() external payable returns (uint);
}
interface I1BB {
	function f0() external pure returns (uint);
}
interface I1B is I1BB {
	function f0() override
	external pure returns (uint);
}
interface I1 is I1B {
	function f0() override
	external pure returns (uint);
}
interface I3BB {
	function f0() external payable returns (uint);
}
interface I3B is I3BB {
	function f0() override
	external payable returns (uint);
}
interface I3 is I3B {
}
library L4 {
	function f0(uint) public view returns (uint)
	{
		return 1681692777;
	}
}
library L5 {
	function f0(uint) public view returns (uint)
	{
		return 1714636915;
	}
}
library L6 {
	function f0(uint) private pure returns (uint)
	{
		return 1957747793;
	}
}
interface I7BBBB {
	function f0() external payable returns (uint);
}
interface I7BBB is I7BBBB {
	function f1() external view returns (uint);
}
interface I7BB is I7BBB {
	function f1() override
	external view returns (uint);
}
interface I7BBBBBBBB {
	function f0() external payable returns (uint);
}
interface I7BBBBBBB is I7BBBBBBBB {
}
interface I7BBBBBB is I7BBBBBBB {
}
interface I7BBBBB is I7BBB, I7BBBBBB {
	function f0() override(I7BBBB, I7BBBBBBBB)
	external payable returns (uint);
}
interface I7B is I7BB, I7BBBBB {
	function f0() override(I7BBBB, I7BBBBB)
	external payable returns (uint);
	function f1() override(I7BB, I7BBB)
	external view returns (uint);
}
interface I7 is I7B {
	function f1() override
	external view returns (uint);
}
contract C {
	using L5 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1714636915)
			return 1;
		return 0;
	}
}
