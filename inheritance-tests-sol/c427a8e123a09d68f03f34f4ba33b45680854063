
pragma solidity >=0.0;


library L0 {

	function f0(uint) external pure returns (uint)
	{
		return 1804289383;
	}
	function f1(uint) internal pure returns (uint)
	{
		return 846930886;
	}
}







interface I1BBBBBB {

	function f0() external view returns (uint);
}
interface I1BBBBB is I1BBBBBB {

	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
}
interface I1BBBB is I1BBBBB {

}
interface I1BBB is I1BBBB {

	function f2() external payable returns (uint);
}
interface I1BB is I1BBB {

}
interface I1B is I1BB {

}
interface I1 is I1B {

	function f0() override
	external view returns (uint);
}

interface I2 {

	function f0() external payable returns (uint);
}

interface I3 {

	function f0() external view returns (uint);
}






interface I4BBBBB {

	function f0() external payable returns (uint);
}
interface I4BBBB is I4BBBBB {

	function f0() override
	external payable returns (uint);
}




interface I4BBBBBBBBB {

	function f0() external payable returns (uint);
}
interface I4BBBBBBBB is I4BBBBBBBBB {

	function f0() override
	external payable returns (uint);
}
interface I4BBBBBBB is I4BBBBBBBB {

}






interface I4BBBBBBBBBBBBBBB {

	function f0() external payable returns (uint);
}
interface I4BBBBBBBBBBBBBB is I4BBBBBBBBBBBBBBB {

	function f0() override
	external payable returns (uint);
}
interface I4BBBBBBBBBBBBB is I4BBBBBBBBBBBBBB {

}
interface I4BBBBBBBBBBBB is I4BBBBBBBBBBBBB {

}
interface I4BBBBBBBBBBB is I4BBBBBBBBBBBB {

	function f1() external payable returns (uint);
}
interface I4BBBBBBBBBB is I4BBBBBBBB, I4BBBBBBBBBBB {

	function f0() override(I4BBBBBBBB, I4BBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I4BBBBBB is I4BBBBB, I4BBBBBBB, I4BBBBBBBBBB {

	function f0() override(I4BBBBB, I4BBBBBBBB, I4BBBBBBBBBB)
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I4BBB is I4BBBB, I4BBBBBB {

	function f0() override(I4BBBB, I4BBBBBB)
	external payable returns (uint);
}
interface I4BB is I4BBB {

	function f0() override
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}






interface I4BBBBBBBBBBBBBBBBBBBBB {

	function f0() external payable returns (uint);
}
interface I4BBBBBBBBBBBBBBBBBBBB is I4BBBBBBBBBBBBBBBBBBBBB {

}
interface I4BBBBBBBBBBBBBBBBBBB is I4BBBBBBBBBBBBBBBBBBBB {

}
interface I4BBBBBBBBBBBBBBBBBB is I4BBBBBBBBBBBBBBBBBBB {

	function f0() override
	external payable returns (uint);
}
interface I4BBBBBBBBBBBBBBBBB is I4BBBBBBBBBBBBBBBBBB {

	function f0() override
	external payable returns (uint);
}
interface I4BBBBBBBBBBBBBBBB is I4BBB, I4BBBBBBBBBBBBBBBBB {

	function f0() override(I4BBB, I4BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I4B is I4BB, I4BBBBBBBBBBBBBBBB {

	function f0() override(I4BB, I4BBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I4BB, I4BBBBBBBBBBBBBBBB)
	external payable returns (uint);
}
interface I4 is I4B {

	function f0() override
	external payable returns (uint);
}


contract C {
	using L0 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1804289383)
			return 1;
		return 0;
	}
}

