pragma solidity >=0.0;
library L0 {
	function f0(uint) public pure returns (uint)
	{
		return 1804289383;
	}
	function f1(uint) public pure returns (uint)
	{
		return 846930886;
	}
}
library L1 {
	function f0(uint) internal pure returns (uint)
	{
		return 1681692777;
	}
	function f1(uint) internal pure returns (uint)
	{
		return 1714636915;
	}
	function f2(uint) internal pure returns (uint)
	{
		return 1957747793;
	}
}
library L2 {
	function f0(uint) internal view returns (uint)
	{
		return 424238335;
	}
	function f1(uint) public view returns (uint)
	{
		return 719885386;
	}
	function f2(uint) public view returns (uint)
	{
		return 1649760492;
	}
}
interface I3BBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I3BBBBBBBBB is I3BBBBBBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() external view returns (uint);
	function f2() external view returns (uint);
}
interface I3BBBBBBBB is I3BBBBBBBBB {
	function f1() override
	external view returns (uint);
	function f3() external payable returns (uint);
}
interface I3BBBBBBB is I3BBBBBBBB {
	function f2() override
	external view returns (uint);
	function f3() override
	external payable returns (uint);
}
interface I3BBBBBBBBBBB is I3BBBBBBBB {
	function f1() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f4() external payable returns (uint);
}
interface I3BBBBBB is I3BBBBBBB, I3BBBBBBBBBBB {
	function f1() override(I3BBBBBBBB, I3BBBBBBBBBBB)
	external view returns (uint);
	function f2() override(I3BBBBBBB, I3BBBBBBBBBBB)
	external view returns (uint);
	function f3() override(I3BBBBBBB, I3BBBBBBBB)
	external payable returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() external payable returns (uint);
	function f6() external view returns (uint);
	function f7() external payable returns (uint);
}
interface I3BBBBB is I3BBBBBB {
	function f2() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override
	external payable returns (uint);
	function f8() external payable returns (uint);
}
interface I3BBBB is I3BBBBB {
	function f0() override
	external payable returns (uint);
	function f3() override
	external payable returns (uint);
	function f7() override
	external payable returns (uint);
}
interface I3BBBBBBBBBBBB is I3BBBBB {
	function f1() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f8() override
	external payable returns (uint);
	function f9() external payable returns (uint);
}
interface I3BBB is I3BBBB, I3BBBBBBBBBBBB {
	function f0() override(I3BBBB, I3BBBBBBBBB)
	external payable returns (uint);
	function f1() override(I3BBBBBB, I3BBBBBBBBBBBB)
	external view returns (uint);
	function f2() override(I3BBBBB, I3BBBBBBBBBBBB)
	external view returns (uint);
	function f3() override(I3BBBB, I3BBBBBB)
	external payable returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override(I3BBBBB, I3BBBBBBBBBBBB)
	external payable returns (uint);
	function f6() override
	external view returns (uint);
	function f7() override(I3BBBB, I3BBBBBB)
	external payable returns (uint);
	function f8() override(I3BBBBB, I3BBBBBBBBBBBB)
	external payable returns (uint);
	function f10() external payable returns (uint);
	function f11() external view returns (uint);
	function f12() external view returns (uint);
	function f13() external payable returns (uint);
}
interface I3BB is I3BBB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f7() override
	external payable returns (uint);
	function f8() override
	external payable returns (uint);
	function f9() override
	external payable returns (uint);
	function f11() override
	external view returns (uint);
	function f12() override
	external view returns (uint);
}
interface I3B is I3BB {
	function f1() override
	external view returns (uint);
	function f3() override
	external payable returns (uint);
	function f6() override
	external view returns (uint);
	function f9() override
	external payable returns (uint);
	function f10() override
	external payable returns (uint);
	function f11() override
	external view returns (uint);
}
interface I3BBBBBBBBBBBBB is I3B {
	function f1() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() override
	external view returns (uint);
	function f10() override
	external payable returns (uint);
	function f11() override
	external view returns (uint);
	function f13() override
	external payable returns (uint);
	function f14() external payable returns (uint);
}
interface I3 is I3B, I3BBBBBBBBBBBBB {
	function f1() override(I3B, I3BBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f5() override(I3BBB, I3BBBBBBBBBBBBB)
	external payable returns (uint);
	function f6() override(I3B, I3BBBBBBBBBBBBB)
	external view returns (uint);
	function f7() override
	external payable returns (uint);
	function f8() override
	external payable returns (uint);
	function f10() override(I3B, I3BBBBBBBBBBBBB)
	external payable returns (uint);
	function f11() override(I3B, I3BBBBBBBBBBBBB)
	external view returns (uint);
	function f13() override(I3BBB, I3BBBBBBBBBBBBB)
	external payable returns (uint);
}
library L4 {
	function f0(uint) internal pure returns (uint)
	{
		return 1350490027;
	}
	function f1(uint) internal pure returns (uint)
	{
		return 783368690;
	}
}
interface C5BBBB {
	function f0() external payable returns (uint);
}
interface C5BBB is C5BBBB {
	function f0() override
	external payable returns (uint);
}
contract C5BB is C5BBB {
	function f0() external payable
	override
	returns (uint)
	{
		return 1567071638;
	}
}
abstract contract C5B is C5BB {
}
contract C5 is C5B {
	function f1() public view
	
	returns (uint)
	{
		return 494637304;
	}
}
contract C6 {
	function f0() virtual public pure
	
	returns (uint)
	{
		return 914114038;
	}
}
interface C7BBB {
}
contract C7BB is C7BBB {
}
contract C7B is C7BB {
}
contract C7 is C7B {
	function f0() public view
	
	returns (uint)
	{
		return 662552542;
	}
}
library L8 {
	function f0(uint) internal view returns (uint)
	{
		return 1102520059;
	}
	function f1(uint) internal pure returns (uint)
	{
		return 2044897763;
	}
	function f2(uint) external pure returns (uint)
	{
		return 1967513926;
	}
	function f3(uint) internal pure returns (uint)
	{
		return 1365180540;
	}
	function f4(uint) external pure returns (uint)
	{
		return 1540383426;
	}
}
interface I9B {
	function f0() external view returns (uint);
}
interface I9 is I9B {
}
library L11 {
	function f0(uint) public view returns (uint)
	{
		return 304089172;
	}
	function f1(uint) internal pure returns (uint)
	{
		return 1303455736;
	}
}
interface C12BB {
	function f0() external payable returns (uint);
	function f1() external payable returns (uint);
}
interface C12B is C12BB {
	function f0() override
	external payable returns (uint);
}
contract C12 is C12B {
	function f0() virtual external payable
	override
	returns (uint)
	{
		return 1652216994;
	}
	function f1() virtual external payable
	override
	returns (uint)
	{
		return 1108771357;
	}
}
contract C {
	function test() public returns (uint)
	{
			C12 tc0 = new C12();
			if (tc0.f0() != 1652216994)
				return 1;
			if (tc0.f1() != 1108771357)
				return 2;
			C5 tc1 = new C5();
			if (tc1.f0() != 1567071638)
				return 3;
			if (tc1.f1() != 494637304)
				return 4;
			C5BB tc2 = new C5BB();
			if (tc2.f0() != 1567071638)
				return 5;
			C6 tc3 = new C6();
			if (tc3.f0() != 914114038)
				return 6;
			C7 tc4 = new C7();
			if (tc4.f0() != 662552542)
				return 7;
			return 0;
	}
}
