
pragma solidity >=0.0;





















interface I0BBBBBBBBBBBBBBBBBB {

	function f0() external view returns (uint);
}

interface I0BBBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBB {

	function f1() external view returns (uint);
}
interface I0BBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBB {

	function f1() override
	external view returns (uint);
	function f2() external view returns (uint);
	function f3() external view returns (uint);
}
interface I0BBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBB {

	function f1() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
}
interface I0BBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBB {

	function f3() override
	external view returns (uint);
}
interface I0BBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBB {

	function f1() override
	external view returns (uint);
	function f4() external payable returns (uint);
}
interface I0BBBBBBBBBBBBB is I0BBBBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
}
interface I0BBBBBBBBBBBB is I0BBBBBBBBBBBBB {

	function f1() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
}
interface I0BBBBBBBBBBB is I0BBBBBBBBBBBB {

	function f2() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() external payable returns (uint);
}
interface I0BBBBBBBBBB is I0BBBBBBBBBBB {

	function f1() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
}
interface I0BBBBBBBBB is I0BBBBBBBBBB {

	function f2() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() external payable returns (uint);
	function f7() external pure returns (uint);
	function f8() external payable returns (uint);
}
interface I0BBBBBBBB is I0BBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f7() override
	external pure returns (uint);
}
interface I0BBBBBBB is I0BBBBBBBB {

	function f2() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f6() override
	external payable returns (uint);
	function f7() override
	external pure returns (uint);
	function f8() override
	external payable returns (uint);
	function f9() external view returns (uint);
	function f10() external payable returns (uint);
	function f11() external view returns (uint);
	function f12() external payable returns (uint);
}
interface I0BBBBBB is I0BBBBBBB {

	function f2() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f8() override
	external payable returns (uint);
	function f9() override
	external view returns (uint);
	function f12() override
	external payable returns (uint);
}
interface I0BBBBB is I0BBBBBB {

	function f0() override
	external view returns (uint);
	function f6() override
	external payable returns (uint);
	function f9() override
	external view returns (uint);
	function f12() override
	external payable returns (uint);
	function f13() external view returns (uint);
}
interface I0BBBB is I0BBBBB {

	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() override
	external payable returns (uint);
	function f8() override
	external payable returns (uint);
	function f9() override
	external view returns (uint);
	function f10() override
	external payable returns (uint);
	function f11() override
	external view returns (uint);
	function f12() override
	external payable returns (uint);
}

interface I0BBBBBBBBBBBBBBBBBBBB is I0BBBB {

	function f0() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f7() override
	external pure returns (uint);
	function f9() override
	external view returns (uint);
	function f10() override
	external payable returns (uint);
	function f12() override
	external payable returns (uint);
	function f13() override
	external view returns (uint);
	function f14() external view returns (uint);
	function f15() external payable returns (uint);
}
interface I0BBB is I0BBBB, I0BBBBBBBBBBBBBBBBBBBB {

	function f0() override(I0BBBBB, I0BBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override(I0BBBBBB, I0BBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f3() override(I0BBBB, I0BBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override
	external payable returns (uint);
	function f7() override(I0BBBBBBB, I0BBBBBBBBBBBBBBBBBBBB)
	external pure returns (uint);
	function f8() override
	external payable returns (uint);
	function f9() override(I0BBBB, I0BBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f10() override(I0BBBB, I0BBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f12() override(I0BBBB, I0BBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f13() override(I0BBBBB, I0BBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f15() override
	external payable returns (uint);
	function f16() external view returns (uint);
	function f17() external view returns (uint);
	function f18() external view returns (uint);
}
interface I0BB is I0BBB {

	function f9() override
	external view returns (uint);
	function f16() override
	external view returns (uint);
}
interface I0B is I0BB {

	function f9() override
	external view returns (uint);
	function f10() override
	external payable returns (uint);
	function f15() override
	external payable returns (uint);
	function f16() override
	external view returns (uint);
	function f18() override
	external view returns (uint);
}

interface I0BBBBBBBBBBBBBBBBBBBBB is I0BB {

	function f0() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f7() override
	external pure returns (uint);
	function f9() override
	external view returns (uint);
	function f10() override
	external payable returns (uint);
	function f11() override
	external view returns (uint);
	function f12() override
	external payable returns (uint);
	function f13() override
	external view returns (uint);
	function f19() external payable returns (uint);
}
interface I0 is I0B, I0BBBBBBBBBBBBBBBBBBBBB {

	function f0() override(I0BBB, I0BBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override(I0BBB, I0BBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f3() override(I0BBB, I0BBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f4() override(I0BBB, I0BBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f7() override(I0BBB, I0BBBBBBBBBBBBBBBBBBBBB)
	external pure returns (uint);
	function f9() override(I0B, I0BBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f10() override(I0B, I0BBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f11() override(I0BBBB, I0BBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f12() override(I0BBB, I0BBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f13() override(I0BBB, I0BBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f15() override(I0B, I0BBB)
	external payable returns (uint);
	function f16() override(I0B, I0BB)
	external view returns (uint);
	function f17() override
	external view returns (uint);
	function f18() override(I0B, I0BBB)
	external view returns (uint);
}
library L1 {

	function f0(uint) external pure returns (uint)
	{
		return 1714636915;
	}
}
library L2 {

	function f0(uint) external pure returns (uint)
	{
		return 1957747793;
	}
}


contract C {
	using L1 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1714636915)
			return 1;
		return 0;
	}
}

