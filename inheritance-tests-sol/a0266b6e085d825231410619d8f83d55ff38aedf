
pragma solidity >=0.0;























interface I0BBBBBBBBBBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBBBB {

}
interface I0BBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I0BBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I0BBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I0BBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I0BBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I0BBBBBBBBBBBBB is I0BBBBBBBBBBBBBB {

}
interface I0BBBBBBBBBBBB is I0BBBBBBBBBBBBB {

}
interface I0BBBBBBBBBBB is I0BBBBBBBBBBBB {

}
interface I0BBBBBBBBBB is I0BBBBBBBBBBB {

}
interface I0BBBBBBBBB is I0BBBBBBBBBB {

}
interface I0BBBBBBBB is I0BBBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I0BBBBBBB is I0BBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I0BBBBBB is I0BBBBBBB {

}
interface I0BBBBB is I0BBBBBB {

}
interface I0BBBB is I0BBBBB {

	function f0() override
	external view returns (uint);
}
interface I0BBB is I0BBBB {

	function f0() override
	external view returns (uint);
}
interface I0BB is I0BBB {

	function f0() override
	external view returns (uint);
}
interface I0B is I0BB {

}
interface I0 is I0B {

}


contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}

