
pragma solidity >=0.0;






interface I0BBB {

}
interface I0BB is I0BBB {

	function f0() external view returns (uint);
}
interface I0B is I0BB {

	function f0() override
	external view returns (uint);
}



interface I0BBBBBB {

	function f0() external view returns (uint);
}
interface I0BBBBB is I0BBBBBB {

	function f0() override
	external view returns (uint);
}
interface I0BBBB is I0BB, I0BBBBB {

	function f0() override(I0BB, I0BBBBB)
	external view returns (uint);
}
interface I0 is I0B, I0BBBB {

	function f0() override(I0B, I0BBBB)
	external view returns (uint);
	function f1() external view returns (uint);
}







interface C1BBBBBB {

	function f0() external view returns (uint);
}
interface C1BBBBB is C1BBBBBB {

	function f0() override
	external view returns (uint);
}
interface C1BBBB is C1BBBBB {

}
interface C1BBB is C1BBBB {

}
interface C1BB is C1BBB {

}
interface C1B is C1BB {

	function f1() external view returns (uint);
	function f2() external view returns (uint);
}
contract C1 is C1B {

	function f0() virtual external view
	override
	returns (uint)
	{
		return 2031369264;
	}
	function f1() virtual external view
	override
	returns (uint)
	{
		return 1358766575;
	}
	function f2() external view
	override
	returns (uint)
	{
		return 1474374447;
	}
}
library L3 {

	function f0(uint) public view returns (uint)
	{
		return 846930886;
	}
	function f1(uint) public view returns (uint)
	{
		return 1681692777;
	}
}



interface I4BB {

	function f0() external view returns (uint);
}
interface I4B is I4BB {

	function f0() override
	external view returns (uint);
}
interface I4 is I4B {

}




interface I5BBB {

	function f0() external view returns (uint);
}
interface I5BB is I5BBB {

	function f0() override
	external view returns (uint);
}
interface I5B is I5BB {

}
interface I5 is I5B {

}


interface I6B {

	function f0() external view returns (uint);
}
interface I6 is I6B {

}




interface I7BBB {

	function f0() external view returns (uint);
}
interface I7BB is I7BBB {

	function f0() override
	external view returns (uint);
}
interface I7B is I7BB {

	function f0() override
	external view returns (uint);
}
interface I7 is I7B {

	function f0() override
	external view returns (uint);
}




interface I8BBB {

	function f0() external view returns (uint);
}
interface I8BB is I8BBB {

}
interface I8B is I8BB {

}
interface I8 is I8B {

}





interface I9BBBB {

	function f0() external payable returns (uint);
}
interface I9BBB is I9BBBB {

	function f0() override
	external payable returns (uint);
	function f1() external view returns (uint);
}
interface I9BB is I9BBB {

	function f0() override
	external payable returns (uint);
}
interface I9B is I9BB {

}

interface I9BBBBB is I9BB {

	function f0() override
	external payable returns (uint);
	function f1() override
	external view returns (uint);
	function f2() external view returns (uint);
}
interface I9 is I9B, I9BBBBB {

	function f0() override(I9BB, I9BBBBB)
	external payable returns (uint);
	function f1() override(I9BBB, I9BBBBB)
	external view returns (uint);
	function f2() override
	external view returns (uint);
}


contract C {
	using L3 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f1() != 1681692777)
			return 1;
		return 0;
	}
}

