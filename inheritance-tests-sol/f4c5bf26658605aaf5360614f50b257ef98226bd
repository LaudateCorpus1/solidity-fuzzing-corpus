
pragma solidity >=0.0;












interface I0BBBBBBBBB {

}
interface I0BBBBBBBB is I0BBBBBBBBB {

	function f0() external view returns (uint);
}
interface I0BBBBBBB is I0BBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I0BBBBBB is I0BBBBBBB {

}
interface I0BBBBB is I0BBBBBB {

}
interface I0BBBB is I0BBBBB {

}



interface I0BBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I0BBBBBBBBBBB is I0BBBBBBBBBBBB {

}
interface I0BBBBBBBBBB is I0BBBBB, I0BBBBBBBBBBB {

	function f0() override(I0BBBBBBB, I0BBBBBBBBBBBB)
	external view returns (uint);
}
interface I0BBB is I0BBBB, I0BBBBBBBBBB {

	function f0() override(I0BBBBBBB, I0BBBBBBBBBB)
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I0BB is I0BBB {

	function f2() external pure returns (uint);
}
interface I0B is I0BB {

	function f1() override
	external payable returns (uint);
}
interface I0 is I0B {

	function f0() override
	external view returns (uint);
	function f2() override
	external pure returns (uint);
	function f3() external payable returns (uint);
}

contract C1 {

	function f0() public view
	
	returns (uint)
	{
		return 1402304087;
	}
	function f1() public view
	
	returns (uint)
	{
		return 1936030137;
	}
}


interface I2B {

	function f0() external view returns (uint);
}
interface I2 is I2B {

	function f0() override
	external view returns (uint);
}



interface I3BB {

	function f0() external view returns (uint);
}
interface I3B is I3BB {

	function f0() override
	external view returns (uint);
}
interface I3 is I3B {

}







interface I4BBBBBB {

}
interface I4BBBBB is I4BBBBBB {

	function f0() external view returns (uint);
}
interface I4BBBB is I4BBBBB {

}








interface I4BBBBBBBBBBBBBB {

}
interface I4BBBBBBBBBBBBB is I4BBBBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I4BBBBBBBBBBBB is I4BBBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
}




interface I4BBBBBBBBBBBBBBBBBB {

}
interface I4BBBBBBBBBBBBBBBBB is I4BBBBBBBBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I4BBBBBBBBBBBBBBBB is I4BBBBBBBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I4BBBBBBBBBBBBBBB is I4BBBBBBBBBBBBB, I4BBBBBBBBBBBBBBBB {

	function f0() override(I4BBBBBBBBBBBBB, I4BBBBBBBBBBBBBBBB)
	external view returns (uint);
}
interface I4BBBBBBBBBBB is I4BBBBBBBBBBBB, I4BBBBBBBBBBBBBBB {

	function f0() override(I4BBBBBBBBBBBB, I4BBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I4BBBBBBBBBB is I4BBBBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() external view returns (uint);
}
interface I4BBBBBBBBB is I4BBBBBBBBBB {

	function f1() override
	external payable returns (uint);
	function f3() external view returns (uint);
}
interface I4BBBBBBBB is I4BBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
}
interface I4BBBBBBB is I4BBBB, I4BBBBBBBB {

	function f0() override(I4BBBBB, I4BBBBBBBB)
	external view returns (uint);
	function f3() override
	external view returns (uint);
}
interface I4BBB is I4BBBB, I4BBBBBBB {

	function f0() override(I4BBBBB, I4BBBBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f4() external payable returns (uint);
}
interface I4BB is I4BBB {

	function f0() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() external view returns (uint);
}
interface I4B is I4BB {

	function f0() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override
	external view returns (uint);
}




interface I4BBBBBBBBBBBBBBBBBBBBBB {

}
interface I4BBBBBBBBBBBBBBBBBBBBB is I4BBBBBBBBBBBBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I4BBBBBBBBBBBBBBBBBBBB is I4BBBBBBBBBBBBBBBBBBBBB {

}
interface I4BBBBBBBBBBBBBBBBBBB is I4BB, I4BBBBBBBBBBBBBBBBBBBB {

	function f0() override(I4BB, I4BBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
}
interface I4 is I4B, I4BBBBBBBBBBBBBBBBBBB {

	function f0() override(I4B, I4BBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override(I4BBBBBBBB, I4BBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f3() override(I4B, I4BBBBBBB)
	external view returns (uint);
	function f4() override(I4B, I4BBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f5() override(I4B, I4BB)
	external view returns (uint);
	function f6() external payable returns (uint);
}
library L5 {

	function f0(uint) private pure returns (uint)
	{
		return 1957747793;
	}
}


contract C {
	function test() public returns (uint)
	{
			C1 tc0 = new C1();
			if (tc0.f0() != 1402304087)
				return 1;
			if (tc0.f1() != 1936030137)
				return 2;
			return 0;
	}
}

