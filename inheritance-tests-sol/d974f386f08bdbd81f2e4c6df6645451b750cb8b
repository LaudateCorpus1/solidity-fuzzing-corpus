
pragma solidity >=0.0;







interface I0BBBB {

	function f0() external payable returns (uint);
}
interface I0BBB is I0BBBB {

}
interface I0BB is I0BBB {

	function f0() override
	external payable returns (uint);
}
interface I0B is I0BB {

	function f1() external view returns (uint);
}




interface I0BBBBBBBB {

	function f0() external payable returns (uint);
}
interface I0BBBBBBB is I0BBBBBBBB {

}
interface I0BBBBBB is I0BBBBBBB {

}
interface I0BBBBB is I0BB, I0BBBBBB {

	function f0() override(I0BB, I0BBBBBBBB)
	external payable returns (uint);
}
interface I0 is I0B, I0BBBBB {

	function f0() override(I0BB, I0BBBBB)
	external payable returns (uint);
}


interface C1B {

	function f0() external view returns (uint);
}
contract C1 is C1B {

	function f0() external view
	override
	returns (uint)
	{
		return 1738531149;
	}
}



interface I2BB {

	function f0() external payable returns (uint);
}
interface I2B is I2BB {

}
interface I2 is I2B {

}














interface I3BBBBBBBBBBBBB {

	function f0() external view returns (uint);
}

interface I3BBBBBBBBBBBBBB is I3BBBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
}
interface I3BBBBBBBBBBBB is I3BBBBBBBBBBBBB, I3BBBBBBBBBBBBBB {

	function f0() override(I3BBBBBBBBBBBBB, I3BBBBBBBBBBBBBB)
	external view returns (uint);
	function f2() external payable returns (uint);
	function f3() external view returns (uint);
}
interface I3BBBBBBBBBBB is I3BBBBBBBBBBBB {

	function f1() override
	external view returns (uint);
}
interface I3BBBBBBBBBB is I3BBBBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
}
interface I3BBBBBBBBB is I3BBBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f4() external payable returns (uint);
}
interface I3BBBBBBBB is I3BBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
}

interface I3BBBBBBBBBBBBBBB is I3BBBBBBBBB {

	function f2() override
	external payable returns (uint);
	function f5() external payable returns (uint);
}
interface I3BBBBBBB is I3BBBBBBBB, I3BBBBBBBBBBBBBBB {

	function f0() override(I3BBBBBBBB, I3BBBBBBBBB)
	external view returns (uint);
	function f2() override(I3BBBBBBBBB, I3BBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override(I3BBBBBBBB, I3BBBBBBBBB)
	external payable returns (uint);
	function f6() external view returns (uint);
	function f7() external payable returns (uint);
	function f8() external payable returns (uint);
	function f9() external payable returns (uint);
}
interface I3BBBBBB is I3BBBBBBB {

	function f2() override
	external payable returns (uint);
	function f4() override
	external payable returns (uint);
	function f8() override
	external payable returns (uint);
}
interface I3BBBBB is I3BBBBBB {

	function f1() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f6() override
	external view returns (uint);
	function f7() override
	external payable returns (uint);
	function f8() override
	external payable returns (uint);
	function f9() override
	external payable returns (uint);
	function f10() external payable returns (uint);
}
interface I3BBBB is I3BBBBB {

	function f1() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f7() override
	external payable returns (uint);
	function f9() override
	external payable returns (uint);
	function f10() override
	external payable returns (uint);
	function f11() external payable returns (uint);
}

interface I3BBBBBBBBBBBBBBBB is I3BBBBB {

	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() override
	external view returns (uint);
	function f7() override
	external payable returns (uint);
	function f8() override
	external payable returns (uint);
	function f11() external payable returns (uint);
}
interface I3BBB is I3BBBB, I3BBBBBBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f1() override(I3BBBB, I3BBBBB)
	external view returns (uint);
	function f2() override(I3BBBBBB, I3BBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f3() override(I3BBBB, I3BBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f5() override(I3BBBB, I3BBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f6() override(I3BBBBB, I3BBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f7() override(I3BBBB, I3BBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f8() override(I3BBBBB, I3BBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f9() override(I3BBBB, I3BBBBB)
	external payable returns (uint);
	function f10() override(I3BBBB, I3BBBBB)
	external payable returns (uint);
	function f11() override(I3BBBB, I3BBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f12() external view returns (uint);
}
interface I3BB is I3BBB {

	function f4() override
	external payable returns (uint);
	function f5() override
	external payable returns (uint);
	function f7() override
	external payable returns (uint);
}
interface I3B is I3BB {

	function f0() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() override
	external view returns (uint);
	function f7() override
	external payable returns (uint);
	function f9() override
	external payable returns (uint);
	function f10() override
	external payable returns (uint);
	function f12() override
	external view returns (uint);
}

interface I3BBBBBBBBBBBBBBBBB is I3BB {

	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() override
	external view returns (uint);
	function f7() override
	external payable returns (uint);
	function f8() override
	external payable returns (uint);
	function f9() override
	external payable returns (uint);
	function f10() override
	external payable returns (uint);
	function f13() external payable returns (uint);
}
interface I3 is I3B, I3BBBBBBBBBBBBBBBBB {

	function f0() override(I3B, I3BBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I3BBB, I3BBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override(I3B, I3BBB)
	external view returns (uint);
	function f4() override(I3BB, I3BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f5() override(I3B, I3BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f6() override(I3B, I3BBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f7() override(I3B, I3BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f8() override(I3BBB, I3BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f9() override(I3B, I3BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f10() override(I3B, I3BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f11() override
	external payable returns (uint);
	function f12() override(I3B, I3BBB)
	external view returns (uint);
	function f13() override
	external payable returns (uint);
}
library L4 {

	function f0(uint) internal view returns (uint)
	{
		return 424238335;
	}
}


contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}

