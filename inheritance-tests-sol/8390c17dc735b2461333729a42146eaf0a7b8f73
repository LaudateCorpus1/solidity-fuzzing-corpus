pragma solidity >=0.0;
interface I1B {
	function f0() external payable returns (uint);
}
interface I1 is I1B {
	function f1() external payable returns (uint);
}
interface I4B {
	function f0() external view returns (uint);
}
interface I4BBB {
	function f0() external view returns (uint);
}
interface I4BB is I4B, I4BBB {
	function f0() override(I4B, I4BBB)
	external view returns (uint);
	function f1() external pure returns (uint);
}
interface I4 is I4B, I4BB {
	function f0() override(I4B, I4BB)
	external view returns (uint);
	function f1() override
	external pure returns (uint);
}
interface C5BBBBBBBB {
	function f0() external view returns (uint);
}
interface C5BBBBBBB is C5BBBBBBBB {
}
interface C5BBBBBB is C5BBBBBBB {
	function f0() override
	external view returns (uint);
}
interface C5BBBBB is C5BBBBBB {
	function f0() override
	external view returns (uint);
}
interface C5BBBB is C5BBBBB {
	function f0() override
	external view returns (uint);
}
interface C5BBB is C5BBBB {
	function f0() override
	external view returns (uint);
}
interface C5BB is C5BBB {
}
contract C5B is C5BB {
	function f0() virtual external view
	override
	returns (uint)
	{
		return 616904628;
	}
}
contract C5 is C5B {
}
interface I6BB {
	function f0() external view returns (uint);
}
interface I6B is I6BB {
	function f1() external view returns (uint);
}
interface I6 is I6B {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
}
interface I7B {
	function f0() external view returns (uint);
}
interface I7BBB {
	function f0() external view returns (uint);
}
interface I7BB is I7B, I7BBB {
	function f0() override(I7B, I7BBB)
	external view returns (uint);
	function f1() external pure returns (uint);
}
interface I7 is I7B, I7BB {
	function f0() override(I7B, I7BB)
	external view returns (uint);
	function f1() override
	external pure returns (uint);
}
interface C9BBBBBBBB {
	function f0() external view returns (uint);
}
interface C9BBBBBBB is C9BBBBBBBB {
}
interface C9BBBBBB is C9BBBBBBB {
}
interface C9BBBBB is C9BBBBBB {
}
interface C9BBBB is C9BBBBB {
}
interface C9BBB is C9BBBB {
	function f0() override
	external view returns (uint);
}
interface C9BB is C9BBB {
}
interface C9B is C9BB {
}
contract C9 is C9B {
	function f0() external view
	override
	returns (uint)
	{
		return 383618080;
	}
}
interface I10BB {
	function f0() external view returns (uint);
}
interface I10B is I10BB {
	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
}
interface I10 is I10B {
	function f1() override
	external view returns (uint);
}
interface I12B {
	function f0() external view returns (uint);
}
interface I12 is I12B {
}
contract C {
	function test() public returns (uint)
	{
			C5 tc0 = new C5();
			if (tc0.f0() != 616904628)
				return 1;
			C5B tc1 = new C5B();
			if (tc1.f0() != 616904628)
				return 2;
			C9 tc2 = new C9();
			if (tc2.f0() != 383618080)
				return 3;
			return 0;
	}
}
