pragma solidity >=0.0;
contract C0 {
	function f0() public payable
	
	returns (uint)
	{
		return 48271;
	}
	function f1() public view
	
	returns (uint)
	{
		return 182605794;
	}
}
interface C1BBBBBBBB {
	function f0() external pure returns (uint);
}
interface C1BBBBBBB is C1BBBBBBBB {
	function f0() override
	external pure returns (uint);
	function f1() external payable returns (uint);
}
interface C1BBBBBB is C1BBBBBBB {
	function f2() external pure returns (uint);
	function f3() external view returns (uint);
}
interface C1BBBBB is C1BBBBBB {
}
interface C1BBBBBBBBB is C1BBBBBB {
	function f4() external view returns (uint);
}
interface C1BBBB is C1BBBBB, C1BBBBBBBBB {
	function f0() override
	external pure returns (uint);
	function f3() override
	external view returns (uint);
}
contract C1BBB is C1BBBB {
	function f0() external pure
	override
	returns (uint)
	{
		return 1936030137;
	}
	function f1() virtual external payable
	override
	returns (uint)
	{
		return 353718330;
	}
	function f2() virtual external pure
	override
	returns (uint)
	{
		return 1947433875;
	}
	function f3() external view
	override
	returns (uint)
	{
		return 2010567813;
	}
	function f4() virtual external view
	override
	returns (uint)
	{
		return 662405787;
	}
}
contract C1BB is C1BBB {
	function f1() external payable
	override
	returns (uint)
	{
		return 1479919876;
	}
}
contract C1B is C1BB {
	function f2() virtual external pure
	override
	returns (uint)
	{
		return 1287522347;
	}
}
contract C1 is C1B {
	function f5() public view
	
	returns (uint)
	{
		return 412013968;
	}
	function f6() public payable
	
	returns (uint)
	{
		return 480194461;
	}
}
interface C2BBBBBBBB {
	function f0() external pure returns (uint);
}
interface C2BBBBBBB is C2BBBBBBBB {
	function f0() override
	external pure returns (uint);
	function f1() external payable returns (uint);
}
interface C2BBBBBB is C2BBBBBBB {
	function f0() override
	external pure returns (uint);
	function f2() external pure returns (uint);
	function f3() external view returns (uint);
}
interface C2BBBBB is C2BBBBBB {
	function f0() override
	external pure returns (uint);
	function f2() override
	external pure returns (uint);
}
interface C2BBBBBBBBB is C2BBBBB {
	function f1() override
	external payable returns (uint);
	function f4() external view returns (uint);
}
interface C2BBBB is C2BBBBB, C2BBBBBBBBB {
	function f0() override
	external pure returns (uint);
	function f1() override(C2BBBBBBB, C2BBBBBBBBB)
	external payable returns (uint);
	function f3() override
	external view returns (uint);
}
contract C2BBB is C2BBBB {
	function f0() virtual external pure
	override
	returns (uint)
	{
		return 1082682476;
	}
	function f1() virtual external payable
	override
	returns (uint)
	{
		return 1243427070;
	}
	function f2() external pure
	override
	returns (uint)
	{
		return 200599677;
	}
	function f3() virtual external view
	override
	returns (uint)
	{
		return 1788215331;
	}
	function f4() virtual external view
	override
	returns (uint)
	{
		return 409875951;
	}
}
contract C2BB is C2BBB {
	function f1() external payable
	override
	returns (uint)
	{
		return 1869683330;
	}
	function f3() virtual external view
	override
	returns (uint)
	{
		return 1318652553;
	}
}
contract C2B is C2BB {
	function f0() external pure
	override
	returns (uint)
	{
		return 1273555394;
	}
	function f3() virtual external view
	override
	returns (uint)
	{
		return 425095546;
	}
}
contract C2 is C2B {
	function f3() virtual external view
	override
	returns (uint)
	{
		return 1358404307;
	}
	function f5() public view
	
	returns (uint)
	{
		return 324855843;
	}
	function f6() public payable
	
	returns (uint)
	{
		return 190807059;
	}
}
library L3 {
	function f0(uint) internal pure returns (uint)
	{
		return 1681692777;
	}
}
contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}
