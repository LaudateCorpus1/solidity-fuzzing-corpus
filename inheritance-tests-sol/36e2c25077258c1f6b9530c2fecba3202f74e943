
pragma solidity >=0.0;




interface I0B {

	function f0() external view returns (uint);
}

interface I0BB is I0B {

}
interface I0 is I0B, I0BB {

	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
}
library L1 {

	function f0(uint) internal pure returns (uint)
	{
		return 846930886;
	}
}
library L2 {

	function f0(uint) public pure returns (uint)
	{
		return 1681692777;
	}
	function f1(uint) public pure returns (uint)
	{
		return 1714636915;
	}
}




contract C3BBB {

	function f0() virtual public pure
	
	returns (uint)
	{
		return 2078669041;
	}
}
contract C3BB is C3BBB {

}
contract C3B is C3BB {

}
contract C3 is C3B {

	function f1() virtual public pure
	
	returns (uint)
	{
		return 192302371;
	}
}




contract C4BBB {

	function f0() external pure
	
	returns (uint)
	{
		return 1203428207;
	}
}
contract C4BB is C4BBB {

}
contract C4B is C4BB {

}
contract C4 is C4B {

}


interface I6B {

	function f0() external view returns (uint);
}


interface I6BBB {

	function f0() external view returns (uint);
}
interface I6BB is I6B, I6BBB {

	function f0() override(I6B, I6BBB)
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I6 is I6B, I6BB {

	function f0() override(I6B, I6BB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}
library L7 {

	function f0(uint) internal view returns (uint)
	{
		return 424238335;
	}
}




contract C8BBB {

	function f0() virtual public pure
	
	returns (uint)
	{
		return 1559527823;
	}
}
contract C8BB is C8BBB {

}
contract C8B is C8BB {

}
contract C8 is C8B {

	function f1() virtual public pure
	
	returns (uint)
	{
		return 1936030137;
	}
}


interface I9B {

	function f0() external payable returns (uint);
}

interface I9BB is I9B {

	function f0() override
	external payable returns (uint);
	function f1() external view returns (uint);
}
interface I9 is I9B, I9BB {

	function f0() override(I9B, I9BB)
	external payable returns (uint);
	function f1() override
	external view returns (uint);
}


contract C {
	using L2 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f1() != 1714636915)
			return 1;
		return 0;
	}
}

