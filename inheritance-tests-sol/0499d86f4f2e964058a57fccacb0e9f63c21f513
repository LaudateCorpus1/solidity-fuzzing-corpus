
pragma solidity >=0.0;
















interface I0BBBBBBBBBBBBB {

}

interface I0BBBBBBBBBBBBBB is I0BBBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I0BBBBBBBBBBBB is I0BBBBBBBBBBBBB, I0BBBBBBBBBBBBBB {

	function f1() external view returns (uint);
}
interface I0BBBBBBBBBBB is I0BBBBBBBBBBBB {

}
interface I0BBBBBBBBBB is I0BBBBBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I0BBBBBBBBB is I0BBBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() external payable returns (uint);
}
interface I0BBBBBBBB is I0BBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
}

interface I0BBBBBBBBBBBBBBB is I0BBBBBBBB {

	function f2() override
	external payable returns (uint);
	function f3() external view returns (uint);
}
interface I0BBBBBBB is I0BBBBBBBB, I0BBBBBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f2() override(I0BBBBBBBB, I0BBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f4() external view returns (uint);
	function f5() external pure returns (uint);
	function f6() external view returns (uint);
	function f7() external view returns (uint);
}
interface I0BBBBBB is I0BBBBBBB {

	function f2() override
	external payable returns (uint);
	function f4() override
	external view returns (uint);
	function f6() override
	external view returns (uint);
	function f7() override
	external view returns (uint);
}
interface I0BBBBB is I0BBBBBB {

	function f1() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external view returns (uint);
	function f5() override
	external pure returns (uint);
	function f8() external payable returns (uint);
}
interface I0BBBB is I0BBBBB {

	function f1() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f5() override
	external pure returns (uint);
	function f7() override
	external view returns (uint);
}

interface I0BBBBBBBBBBBBBBBB is I0BBBBB {

	function f6() override
	external view returns (uint);
	function f7() override
	external view returns (uint);
	function f8() override
	external payable returns (uint);
	function f9() external payable returns (uint);
}
interface I0BBB is I0BBBB, I0BBBBBBBBBBBBBBBB {

	function f1() override(I0BBBB, I0BBBBB)
	external view returns (uint);
	function f3() override(I0BBBB, I0BBBBB)
	external view returns (uint);
	function f4() override
	external view returns (uint);
	function f5() override(I0BBBB, I0BBBBB)
	external pure returns (uint);
	function f6() override(I0BBBBBB, I0BBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f7() override(I0BBBB, I0BBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f8() override(I0BBBBB, I0BBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f10() external view returns (uint);
}
interface I0BB is I0BBB {

	function f4() override
	external view returns (uint);
	function f6() override
	external view returns (uint);
	function f8() override
	external payable returns (uint);
	function f9() override
	external payable returns (uint);
}
interface I0B is I0BB {

	function f2() override
	external payable returns (uint);
	function f4() override
	external view returns (uint);
	function f5() override
	external pure returns (uint);
	function f6() override
	external view returns (uint);
	function f8() override
	external payable returns (uint);
	function f9() override
	external payable returns (uint);
	function f10() override
	external view returns (uint);
}

interface I0BBBBBBBBBBBBBBBBB is I0BB {

	function f0() override
	external view returns (uint);
	function f4() override
	external view returns (uint);
	function f6() override
	external view returns (uint);
	function f7() override
	external view returns (uint);
	function f9() override
	external payable returns (uint);
	function f10() override
	external view returns (uint);
	function f11() external payable returns (uint);
}
interface I0 is I0B, I0BBBBBBBBBBBBBBBBB {

	function f0() override(I0BBBBBBB, I0BBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override(I0B, I0BBBBBB)
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override(I0B, I0BBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f5() override(I0B, I0BBB)
	external pure returns (uint);
	function f6() override(I0B, I0BBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f7() override(I0BBB, I0BBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f8() override(I0B, I0BB)
	external payable returns (uint);
	function f9() override(I0B, I0BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f10() override(I0B, I0BBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f11() override
	external payable returns (uint);
}








interface I2BBBBBBB {

	function f0() external view returns (uint);
	function f1() external view returns (uint);
}
interface I2BBBBBB is I2BBBBBBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() external view returns (uint);
}

interface I2BBBBBBBB is I2BBBBBBB {

	function f1() override
	external view returns (uint);
	function f2() external view returns (uint);
}
interface I2BBBBB is I2BBBBBB, I2BBBBBBBB {

	function f0() override(I2BBBBBB, I2BBBBBBB)
	external view returns (uint);
	function f1() override(I2BBBBBB, I2BBBBBBBB)
	external view returns (uint);
	function f2() override(I2BBBBBB, I2BBBBBBBB)
	external view returns (uint);
	function f3() external payable returns (uint);
	function f4() external view returns (uint);
}
interface I2BBBB is I2BBBBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f3() override
	external payable returns (uint);
}
interface I2BBB is I2BBBB {

	function f3() override
	external payable returns (uint);
}
interface I2BB is I2BBB {

	function f0() override
	external view returns (uint);
	function f3() override
	external payable returns (uint);
}
interface I2B is I2BB {

	function f0() override
	external view returns (uint);
}

interface I2BBBBBBBBB is I2BB {

	function f2() override
	external view returns (uint);
	function f4() override
	external view returns (uint);
	function f5() external payable returns (uint);
}
interface I2 is I2B, I2BBBBBBBBB {

	function f0() override(I2B, I2BB)
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override(I2BBBBB, I2BBBBBBBBB)
	external view returns (uint);
	function f3() override
	external payable returns (uint);
	function f4() override(I2BBBBB, I2BBBBBBBBB)
	external view returns (uint);
	function f5() override
	external payable returns (uint);
}











interface I3BBBBBBBBBB {

	function f0() external payable returns (uint);
}
interface I3BBBBBBBBB is I3BBBBBBBBBB {

	function f0() override
	external payable returns (uint);
	function f1() external view returns (uint);
}

interface I3BBBBBBBBBBB is I3BBBBBBBBB {

	function f0() override
	external payable returns (uint);
	function f1() override
	external view returns (uint);
	function f2() external view returns (uint);
}
interface I3BBBBBBBB is I3BBBBBBBBB, I3BBBBBBBBBBB {

	function f0() override(I3BBBBBBBBB, I3BBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I3BBBBBBBBB, I3BBBBBBBBBBB)
	external view returns (uint);
	function f3() external payable returns (uint);
	function f4() external view returns (uint);
}
interface I3BBBBBBB is I3BBBBBBBB {

	function f0() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
	function f4() override
	external view returns (uint);
}
interface I3BBBBBB is I3BBBBBBB {

	function f1() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override
	external payable returns (uint);
	function f4() override
	external view returns (uint);
}
interface I3BBBBB is I3BBBBBB {

	function f0() override
	external payable returns (uint);
	function f1() override
	external view returns (uint);
	function f3() override
	external payable returns (uint);
	function f4() override
	external view returns (uint);
	function f5() external payable returns (uint);
}
interface I3BBBB is I3BBBBB {

	function f4() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
}

interface I3BBBBBBBBBBBB is I3BBBB {

	function f0() override
	external payable returns (uint);
	function f6() external payable returns (uint);
}
interface I3BBB is I3BBBB, I3BBBBBBBBBBBB {

	function f0() override(I3BBBBB, I3BBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override
	external payable returns (uint);
	function f4() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() override
	external payable returns (uint);
	function f7() external payable returns (uint);
	function f8() external view returns (uint);
	function f9() external payable returns (uint);
}
interface I3BB is I3BBB {

	function f0() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override
	external payable returns (uint);
	function f4() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() override
	external payable returns (uint);
	function f7() override
	external payable returns (uint);
	function f9() override
	external payable returns (uint);
}
interface I3B is I3BB {

	function f2() override
	external view returns (uint);
	function f3() override
	external payable returns (uint);
	function f4() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f7() override
	external payable returns (uint);
	function f8() override
	external view returns (uint);
	function f9() override
	external payable returns (uint);
}

interface I3BBBBBBBBBBBBB is I3BB {

	function f0() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
	function f4() override
	external view returns (uint);
	function f7() override
	external payable returns (uint);
	function f8() override
	external view returns (uint);
	function f10() external payable returns (uint);
}
interface I3 is I3B, I3BBBBBBBBBBBBB {

	function f0() override(I3BB, I3BBBBBBBBBBBBB)
	external payable returns (uint);
	function f2() override(I3B, I3BBBBBBBBBBBBB)
	external view returns (uint);
	function f3() override(I3B, I3BB)
	external payable returns (uint);
	function f4() override(I3B, I3BBBBBBBBBBBBB)
	external view returns (uint);
	function f5() override(I3B, I3BB)
	external payable returns (uint);
	function f6() override
	external payable returns (uint);
	function f7() override(I3B, I3BBBBBBBBBBBBB)
	external payable returns (uint);
	function f8() override(I3B, I3BBBBBBBBBBBBB)
	external view returns (uint);
	function f9() override(I3B, I3BB)
	external payable returns (uint);
}


contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}

