pragma solidity >=0.0;
interface I0BBBBBB {
	function f0() external view returns (uint);
}
interface I0BBBBB is I0BBBBBB {
	function f1() external view returns (uint);
}
interface I0BBBB is I0BBBBB {
	function f0() override
	external view returns (uint);
}
interface I0BBB is I0BBBB {
	function f2() external payable returns (uint);
}
interface I0BB is I0BBB {
}
interface I0B is I0BB {
}
interface I0 is I0B {
	function f1() override
	external view returns (uint);
}
interface I1 {
	function f0() external view returns (uint);
}
interface I2BBBBBBB {
	function f0() external payable returns (uint);
}
interface I2BBBBBB is I2BBBBBBB {
}
interface I2BBBBB is I2BBBBBB {
}
interface I2BBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I2BBBBBBBBBBBB is I2BBBBBBBBBBBBB {
}
interface I2BBBBBBBBBBB is I2BBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I2BBBBBBBBBB is I2BBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I2BBBBBBBBB is I2BBBBBBBBBB {
	function f1() external payable returns (uint);
}
interface I2BBBBBBBB is I2BBBBBB, I2BBBBBBBBB {
	function f0() override(I2BBBBBBB, I2BBBBBBBBBB)
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I2BBBB is I2BBBBB, I2BBBBBBBB {
	function f0() override(I2BBBBBBB, I2BBBBBBBB)
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I2BBB is I2BBBB {
	function f1() override
	external payable returns (uint);
}
interface I2BB is I2BBB {
}
interface I2BBBBBBBBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I2BBBBBBBBBBBBBBBBBB is I2BBBBBBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I2BBBBBBBBBBBBBBBBB is I2BBBBBBBBBBBBBBBBBB {
}
interface I2BBBBBBBBBBBBBBBB is I2BBBBBBBBBBBBBBBBB {
}
interface I2BBBBBBBBBBBBBBB is I2BBBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I2BBBBBBBBBBBBBB is I2BB, I2BBBBBBBBBBBBBBB {
	function f0() override(I2BBBB, I2BBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I2B is I2BB, I2BBBBBBBBBBBBBB {
	function f0() override(I2BBBB, I2BBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I2BBB, I2BBBBBBBBBBBBBB)
	external payable returns (uint);
}
interface I2 is I2B {
}
library L3 {
	function f0(uint) external pure returns (uint)
	{
		return 1681692777;
	}
	function f1(uint) internal pure returns (uint)
	{
		return 1714636915;
	}
}
contract C {
	using L3 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1681692777)
			return 1;
		return 0;
	}
}
