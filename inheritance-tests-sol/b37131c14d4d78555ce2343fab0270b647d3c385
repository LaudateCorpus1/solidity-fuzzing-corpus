
pragma solidity >=0.0;





interface I0BB {

	function f0() external view returns (uint);
}
interface I0B is I0BB {

	function f1() external payable returns (uint);
}
interface I0 is I0B {

}




contract C1BBB {

}
contract C1BB is C1BBB {

}
abstract contract C1B is C1BB {

}


contract C1BBBBB {

	function f0() virtual public pure
	
	returns (uint)
	{
		return 373473364;
	}
}
contract C1BBBB is C1BB, C1BBBBB {

	function f0() virtual public pure
	override
	returns (uint)
	{
		return 983677044;
	}
	function f1() virtual public pure
	
	returns (uint)
	{
		return 63672107;
	}
}
contract C1 is C1B, C1BBBB {

	function f2() public view
	
	returns (uint)
	{
		return 1366541263;
	}
}


interface I2B {

	function f0() external view returns (uint);
}
interface I2 is I2B {

	function f0() override
	external view returns (uint);
}

contract C3 {

	function f0() virtual public pure
	
	returns (uint)
	{
		return 963201372;
	}
}

contract C4 {

	function f0() public view
	
	returns (uint)
	{
		return 1672470262;
	}
}


contract C {
	function test() public returns (uint)
	{
			C1 tc0 = new C1();
			if (tc0.f0() != 983677044)
				return 1;
			if (tc0.f1() != 63672107)
				return 2;
			if (tc0.f2() != 1366541263)
				return 3;
			C1BBBB tc1 = new C1BBBB();
			if (tc1.f0() != 983677044)
				return 4;
			if (tc1.f1() != 63672107)
				return 5;
			C1BBBBB tc2 = new C1BBBBB();
			if (tc2.f0() != 373473364)
				return 6;
			C3 tc3 = new C3();
			if (tc3.f0() != 963201372)
				return 7;
			C4 tc4 = new C4();
			if (tc4.f0() != 1672470262)
				return 8;
			return 0;
	}
}

