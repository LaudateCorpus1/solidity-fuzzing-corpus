
pragma solidity >=0.0;








interface I0BBBBB {

	function f0() external view returns (uint);
}
interface I0BBBB is I0BBBBB {

}
interface I0BBB is I0BBBB {

	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
}
interface I0BB is I0BBB {

}
interface I0B is I0BB {

}
interface I0 is I0B {

	function f2() external payable returns (uint);
}

interface I2 {

	function f0() external payable returns (uint);
}

interface I3 {

	function f0() external payable returns (uint);
}

interface I4 {

	function f0() external payable returns (uint);
}

interface I5 {

	function f0() external payable returns (uint);
}







interface I6BBBBBB {

}
interface I6BBBBB is I6BBBBBB {

	function f0() external view returns (uint);
}
interface I6BBBB is I6BBBBB {

}




interface I6BBBBBBBBBB {

}
interface I6BBBBBBBBB is I6BBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I6BBBBBBBB is I6BBBBBBBBB {

}
interface I6BBBBBBB is I6BBBBB, I6BBBBBBBB {

	function f0() override(I6BBBBB, I6BBBBBBBBB)
	external view returns (uint);
}
interface I6BBB is I6BBBB, I6BBBBBBB {

	function f0() override(I6BBBBB, I6BBBBBBB)
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I6BB is I6BBB {

	function f0() override
	external view returns (uint);
	function f2() external view returns (uint);
}
interface I6B is I6BB {

	function f2() override
	external view returns (uint);
}




interface I6BBBBBBBBBBBBBB {

}
interface I6BBBBBBBBBBBBB is I6BBBBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I6BBBBBBBBBBBB is I6BBBBBBBBBBBBB {

}
interface I6BBBBBBBBBBB is I6B, I6BBBBBBBBBBBB {

	function f0() override(I6BB, I6BBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override
	external view returns (uint);
}
interface I6 is I6B, I6BBBBBBBBBBB {

	function f0() override(I6BB, I6BBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override(I6B, I6BBBBBBBBBBB)
	external view returns (uint);
	function f3() external payable returns (uint);
}


interface C7B {

	function f0() external view returns (uint);
}
contract C7 is C7B {

	function f0() virtual external view
	override
	returns (uint)
	{
		return 1696049367;
	}
}

interface I9 {

	function f0() external payable returns (uint);
}


contract C {
	function test() public returns (uint)
	{
			C7 tc0 = new C7();
			if (tc0.f0() != 1696049367)
				return 1;
			return 0;
	}
}

