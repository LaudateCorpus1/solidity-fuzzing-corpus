pragma solidity >=0.0;
interface C0BBBB {
	function f0() external view returns (uint);
}
interface C0BBB is C0BBBB {
}
interface C0BB is C0BBB {
}
interface C0B is C0BB {
	function f0() override
	external view returns (uint);
}
contract C0 is C0B {
	function f0() virtual external view
	override
	returns (uint)
	{
		return 1501100076;
	}
}
library L1 {
	function f0(uint) internal pure returns (uint)
	{
		return 1804289383;
	}
}
interface C2BBB {
	function f0() external payable returns (uint);
}
interface C2BB is C2BBB {
}
interface C2B is C2BB {
}
contract C2 is C2B {
	function f0() external payable
	override
	returns (uint)
	{
		return 1943007398;
	}
}
interface C4BBBBBB {
}
interface C4BBBBB is C4BBBBBB {
	function f0() external payable returns (uint);
}
interface C4BBBB is C4BBBBB {
}
interface C4BBB is C4BBBB {
	function f1() external payable returns (uint);
}
interface C4BB is C4BBB {
	function f1() override
	external payable returns (uint);
}
contract C4B is C4BB {
	function f0() virtual external payable
	override
	returns (uint)
	{
		return 1774893867;
	}
	function f1() virtual external payable
	override
	returns (uint)
	{
		return 1032438314;
	}
}
contract C4 is C4B {
	function f0() external payable
	override
	returns (uint)
	{
		return 1389449997;
	}
	function f1() virtual external payable
	override
	returns (uint)
	{
		return 1404944717;
	}
}
interface C5BBB {
	function f0() external payable returns (uint);
}
interface C5BB is C5BBB {
}
interface C5B is C5BB {
}
contract C5 is C5B {
	function f0() virtual external payable
	override
	returns (uint)
	{
		return 1709834337;
	}
}
library L6 {
	function f0(uint) public pure returns (uint)
	{
		return 846930886;
	}
}
contract C8B {
}
interface C8BBBB {
	function f0() external payable returns (uint);
}
interface C8BBB is C8BBBB {
	function f0() override
	external payable returns (uint);
}
interface C8BB is C8BBB {
}
contract C8 is C8B, C8BB {
	function f0() virtual external payable
	override
	returns (uint)
	{
		return 1313839054;
	}
}
library L9 {
	function f0(uint) public pure returns (uint)
	{
		return 1957747793;
	}
}
interface C10BBB {
	function f0() external payable returns (uint);
}
interface C10BB is C10BBB {
	function f0() override
	external payable returns (uint);
}
abstract contract C10B is C10BB {
	function f0() external payable
	override
	returns (uint)
	{
		return 793829872;
	}
}
contract C10 is C10B {
}
contract C {
	using L6 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 846930886)
			return 1;
		return 0;
	}
}
