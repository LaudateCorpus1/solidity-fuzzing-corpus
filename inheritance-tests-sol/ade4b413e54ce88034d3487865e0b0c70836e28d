pragma solidity >=0.0;
interface I0BBBB {
	function f0() external payable returns (uint);
}
interface I0BBB is I0BBBB {
}
interface I0BB is I0BBB {
	function f0() override
	external payable returns (uint);
}
interface I0B is I0BB {
	function f1() external view returns (uint);
}
interface I0BBBBBBBB {
	function f0() external payable returns (uint);
}
interface I0BBBBBBB is I0BBBBBBBB {
}
interface I0BBBBBB is I0BBBBBBB {
}
interface I0BBBBB is I0BB, I0BBBBBB {
	function f0() override(I0BB, I0BBBBBBBB)
	external payable returns (uint);
}
interface I0 is I0B, I0BBBBB {
	function f0() override(I0BB, I0BBBBB)
	external payable returns (uint);
}
interface I1BBBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I1BBBBBBBBBBBBBB is I1BBBBBBBBBBBBB {
	function f1() external view returns (uint);
}
interface I1BBBBBBBBBBBB is I1BBBBBBBBBBBBB, I1BBBBBBBBBBBBBB {
	function f2() external payable returns (uint);
	function f3() external view returns (uint);
}
interface I1BBBBBBBBBBB is I1BBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
}
interface I1BBBBBBBBBB is I1BBBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
}
interface I1BBBBBBBBB is I1BBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f4() external payable returns (uint);
}
interface I1BBBBBBBB is I1BBBBBBBBB {
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f4() override
	external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBB is I1BBBBBBBBB {
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f5() external payable returns (uint);
}
interface I1BBBBBBB is I1BBBBBBBB, I1BBBBBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override(I1BBBBBBBB, I1BBBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override(I1BBBBBBBB, I1BBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f3() override(I1BBBBBBBBBB, I1BBBBBBBBBBBBBBB)
	external view returns (uint);
	function f4() override(I1BBBBBBBB, I1BBBBBBBBB)
	external payable returns (uint);
	function f6() external view returns (uint);
	function f7() external payable returns (uint);
	function f8() external payable returns (uint);
	function f9() external payable returns (uint);
}
interface I1BBBBBB is I1BBBBBBB {
	function f0() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f4() override
	external payable returns (uint);
	function f7() override
	external payable returns (uint);
	function f9() override
	external payable returns (uint);
}
interface I1BBBBB is I1BBBBBB {
	function f2() override
	external payable returns (uint);
	function f6() override
	external view returns (uint);
	function f8() override
	external payable returns (uint);
	function f10() external payable returns (uint);
}
interface I1BBBB is I1BBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f6() override
	external view returns (uint);
	function f8() override
	external payable returns (uint);
	function f10() override
	external payable returns (uint);
	function f11() external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBBB is I1BBBBB {
	function f0() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f7() override
	external payable returns (uint);
	function f8() override
	external payable returns (uint);
	function f10() override
	external payable returns (uint);
}
interface I1BBB is I1BBBB, I1BBBBBBBBBBBBBBBB {
	function f0() override(I1BBBB, I1BBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I1BBBB, I1BBBBBBB)
	external view returns (uint);
	function f2() override(I1BBBB, I1BBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f3() override(I1BBBB, I1BBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f4() override(I1BBBBBB, I1BBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() override(I1BBBB, I1BBBBB)
	external view returns (uint);
	function f7() override(I1BBBBBB, I1BBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f8() override(I1BBBB, I1BBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f9() override
	external payable returns (uint);
	function f10() override(I1BBBB, I1BBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f12() external view returns (uint);
}
interface I1BB is I1BBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f8() override
	external payable returns (uint);
	function f9() override
	external payable returns (uint);
	function f11() override
	external payable returns (uint);
}
interface I1B is I1BB {
	function f4() override
	external payable returns (uint);
	function f7() override
	external payable returns (uint);
	function f9() override
	external payable returns (uint);
	function f10() override
	external payable returns (uint);
	function f11() override
	external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBBBB is I1BB {
	function f0() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override
	external payable returns (uint);
	function f8() override
	external payable returns (uint);
	function f9() override
	external payable returns (uint);
	function f10() override
	external payable returns (uint);
	function f11() override
	external payable returns (uint);
	function f12() override
	external view returns (uint);
	function f13() external payable returns (uint);
}
interface I1 is I1B, I1BBBBBBBBBBBBBBBBB {
	function f0() override(I1BB, I1BBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override(I1BBB, I1BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f3() override(I1BBB, I1BBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f4() override(I1B, I1BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f5() override(I1BBB, I1BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f7() override(I1B, I1BBB)
	external payable returns (uint);
	function f8() override(I1BB, I1BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f9() override(I1B, I1BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f10() override(I1B, I1BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f11() override(I1B, I1BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f12() override(I1BBB, I1BBBBBBBBBBBBBBBBB)
	external view returns (uint);
}
library L2 {
	function f0(uint) internal view returns (uint)
	{
		return 424238335;
	}
}
interface C3BB {
	function f0() external view returns (uint);
}
interface C3B is C3BB {
}
contract C3 is C3B {
	function f0() virtual external view
	override
	returns (uint)
	{
		return 634782546;
	}
}
library L4 {
	function f0(uint) internal view returns (uint)
	{
		return 719885386;
	}
	function f1(uint) public view returns (uint)
	{
		return 1649760492;
	}
	function f2(uint) public view returns (uint)
	{
		return 596516649;
	}
}
interface C5BB {
	function f0() external pure returns (uint);
}
interface C5B is C5BB {
	function f0() override
	external pure returns (uint);
}
contract C5 is C5B {
	function f0() virtual external pure
	override
	returns (uint)
	{
		return 1957310938;
	}
}
interface C7B {
	function f0() external view returns (uint);
}
contract C7 is C7B {
	function f0() virtual external view
	override
	returns (uint)
	{
		return 2110072011;
	}
}
contract C {
	function test() public returns (uint)
	{
			C3 tc0 = new C3();
			if (tc0.f0() != 634782546)
				return 1;
			C5 tc1 = new C5();
			if (tc1.f0() != 1957310938)
				return 2;
			C7 tc2 = new C7();
			if (tc2.f0() != 2110072011)
				return 3;
			return 0;
	}
}
