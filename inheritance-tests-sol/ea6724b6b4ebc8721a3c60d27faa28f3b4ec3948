
pragma solidity >=0.0;




interface I0B {

	function f0() external view returns (uint);
}
interface I0 is I0B {

	function f0() override
	external view returns (uint);
}




interface C1BBB {

	function f0() external view returns (uint);
	function f1() external payable returns (uint);
}
interface C1BB is C1BBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}
interface C1B is C1BB {

	function f0() override
	external view returns (uint);
}
contract C1 is C1B {

	function f0() virtual external view
	override
	returns (uint)
	{
		return 85104760;
	}
	function f1() virtual external payable
	override
	returns (uint)
	{
		return 379178538;
	}
}
library L2 {

	function f0(uint) public pure returns (uint)
	{
		return 1804289383;
	}
	function f1(uint) public view returns (uint)
	{
		return 846930886;
	}
}












interface I3BBBBBBBBBBB {

	function f0() external view returns (uint);
}



interface I3BBBBBBBBBBBBBB {

	function f0() external view returns (uint);
}

interface I3BBBBBBBBBBBBBBB is I3BBBBBBBBBBBBBB {

	function f1() external view returns (uint);
}
interface I3BBBBBBBBBBBBB is I3BBBBBBBBBBBBBB, I3BBBBBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f2() external view returns (uint);
	function f3() external view returns (uint);
}
interface I3BBBBBBBBBBBB is I3BBBBBBBBBBB, I3BBBBBBBBBBBBB {

	function f0() override(I3BBBBBBBBBBB, I3BBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
}
interface I3BBBBBBBBBB is I3BBBBBBBBBBB, I3BBBBBBBBBBBB {

	function f0() override(I3BBBBBBBBBBB, I3BBBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
}
interface I3BBBBBBBBB is I3BBBBBBBBBB {

	function f3() override
	external view returns (uint);
	function f4() external payable returns (uint);
}
interface I3BBBBBBBB is I3BBBBBBBBB {

	function f4() override
	external payable returns (uint);
}

interface I3BBBBBBBBBBBBBBBB is I3BBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f5() external payable returns (uint);
}
interface I3BBBBBBB is I3BBBBBBBB, I3BBBBBBBBBBBBBBBB {

	function f0() override(I3BBBBBBBBBB, I3BBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override(I3BBBBBBBBBBBB, I3BBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f3() override(I3BBBBBBBBB, I3BBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f4() override(I3BBBBBBBB, I3BBBBBBBBB)
	external payable returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() external payable returns (uint);
	function f7() external pure returns (uint);
	function f8() external payable returns (uint);
	function f9() external payable returns (uint);
}
interface I3BBBBBB is I3BBBBBBB {

	function f1() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f6() override
	external payable returns (uint);
	function f7() override
	external pure returns (uint);
	function f8() override
	external payable returns (uint);
	function f9() override
	external payable returns (uint);
}
interface I3BBBBB is I3BBBBBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f6() override
	external payable returns (uint);
	function f8() override
	external payable returns (uint);
	function f9() override
	external payable returns (uint);
	function f10() external payable returns (uint);
}

interface I3BBBBBBBBBBBBBBBBB is I3BBBBBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() override
	external payable returns (uint);
	function f9() override
	external payable returns (uint);
	function f10() external payable returns (uint);
}
interface I3BBBB is I3BBBBB, I3BBBBBBBBBBBBBBBBB {

	function f0() override(I3BBBBB, I3BBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I3BBBBB, I3BBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f4() override(I3BBBBBB, I3BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f5() override(I3BBBBBBB, I3BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f6() override(I3BBBBB, I3BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f7() override
	external pure returns (uint);
	function f8() override(I3BBBBB, I3BBBBBB)
	external payable returns (uint);
	function f9() override(I3BBBBB, I3BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f10() override(I3BBBBB, I3BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
}

interface I3BBBBBBBBBBBBBBBBBB is I3BBBB {

	function f0() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() override
	external payable returns (uint);
	function f7() override
	external pure returns (uint);
	function f8() override
	external payable returns (uint);
	function f11() external payable returns (uint);
}
interface I3BBB is I3BBBB, I3BBBBBBBBBBBBBBBBBB {

	function f0() override(I3BBBB, I3BBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override(I3BBBB, I3BBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override(I3BBBB, I3BBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f6() override(I3BBBB, I3BBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f7() override(I3BBBB, I3BBBBBBBBBBBBBBBBBB)
	external pure returns (uint);
	function f8() override(I3BBBB, I3BBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f9() override
	external payable returns (uint);
	function f11() override
	external payable returns (uint);
	function f12() external view returns (uint);
}
interface I3BB is I3BBB {

	function f1() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f6() override
	external payable returns (uint);
	function f8() override
	external payable returns (uint);
	function f9() override
	external payable returns (uint);
	function f10() override
	external payable returns (uint);
	function f12() override
	external view returns (uint);
}
interface I3B is I3BB {

	function f1() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override
	external payable returns (uint);
	function f8() override
	external payable returns (uint);
	function f9() override
	external payable returns (uint);
	function f10() override
	external payable returns (uint);
	function f11() override
	external payable returns (uint);
}

interface I3BBBBBBBBBBBBBBBBBBB is I3B {

	function f2() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f7() override
	external pure returns (uint);
	function f10() override
	external payable returns (uint);
	function f11() override
	external payable returns (uint);
	function f12() override
	external view returns (uint);
	function f13() external payable returns (uint);
}
interface I3 is I3B, I3BBBBBBBBBBBBBBBBBBB {

	function f1() override
	external view returns (uint);
	function f2() override(I3BBB, I3BBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f5() override(I3B, I3BBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f7() override(I3BBB, I3BBBBBBBBBBBBBBBBBBB)
	external pure returns (uint);
	function f8() override
	external payable returns (uint);
	function f10() override(I3B, I3BBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f11() override(I3B, I3BBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f12() override(I3BB, I3BBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
}


contract C {
	using L2 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f1() != 846930886)
			return 1;
		return 0;
	}
}

