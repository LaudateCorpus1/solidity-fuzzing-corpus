pragma solidity >=0.0;
interface I0BB {
	function f0() external payable returns (uint);
}
interface I0BBBBBB {
	function f0() external payable returns (uint);
	function f1() external view returns (uint);
}
interface I0BBBBB is I0BBBBBB {
	function f1() override
	external view returns (uint);
}
interface I0BBBB is I0BBBBB {
	function f2() external view returns (uint);
}
interface I0BBB is I0BB, I0BBBB {
	function f0() override(I0BB, I0BBBBBB)
	external payable returns (uint);
}
interface I0BBBBBBB is I0BBB {
	function f3() external payable returns (uint);
	function f4() external view returns (uint);
}
interface I0B is I0BB, I0BBB, I0BBBBBBB {
	function f0() override(I0BB, I0BBB)
	external payable returns (uint);
}
interface I0BBBBBBBB is I0BBBBBBB {
	function f2() override
	external view returns (uint);
	function f4() override
	external view returns (uint);
}
interface I0 is I0B, I0BBBBBBBB {
	function f0() override(I0B, I0BBB)
	external payable returns (uint);
	function f2() override(I0BBBB, I0BBBBBBBB)
	external view returns (uint);
	function f3() override
	external payable returns (uint);
	function f4() override(I0BBBBBBB, I0BBBBBBBB)
	external view returns (uint);
}
interface I1BBBB {
	function f0() external payable returns (uint);
}
interface I1BBB is I1BBBB {
	function f0() override
	external payable returns (uint);
}
interface I1BB is I1BBB {
}
interface I1B is I1BB {
}
interface I1BBBBB is I1BB {
}
interface I1BBBBBBBB {
}
interface I1BBBBBBB is I1BBBBBBBB {
}
interface I1BBBBBB is I1BB, I1BBBBBBB {
}
interface I1 is I1B, I1BBBBB, I1BBBBBB {
	function f1() external view returns (uint);
	function f2() external payable returns (uint);
}
library L2 {
	function f0(uint) internal pure returns (uint)
	{
		return 424238335;
	}
}
library L4 {
	function f0(uint) internal pure returns (uint)
	{
		return 719885386;
	}
}
contract C5 {
	function f0() public view
	
	returns (uint)
	{
		return 928270262;
	}
}
interface I6BB {
	function f0() external view returns (uint);
}
interface I6B is I6BB {
	function f1() external payable returns (uint);
}
interface I6 is I6B {
	function f0() override
	external view returns (uint);
}
interface C7BB {
	function f0() external view returns (uint);
}
interface C7B is C7BB {
}
contract C7 is C7B {
	function f0() external view
	override
	returns (uint)
	{
		return 1675824860;
	}
}
library L10 {
	function f0(uint) external pure returns (uint)
	{
		return 1649760492;
	}
}
library L11 {
	function f0(uint) private pure returns (uint)
	{
		return 596516649;
	}
}
contract C12B {
}
contract C12 is C12B {
	function f0() public view
	
	returns (uint)
	{
		return 1243696899;
	}
}
interface I13BBBBBBBBBB {
}
interface I13BBBBBBBBB is I13BBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I13BBBBBBBB is I13BBBBBBBBB {
	function f1() external payable returns (uint);
}
interface I13BBBBBBB is I13BBBBBBBB {
}
interface I13BBBBBB is I13BBBBBBB {
	function f0() override
	external view returns (uint);
}
interface I13BBBBB is I13BBBBBB {
	function f1() override
	external payable returns (uint);
}
interface I13BBBBBBBBBBBBBB {
}
interface I13BBBBBBBBBBBBB is I13BBBBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I13BBBBBBBBBBBB is I13BBBBBBBBBBBBB {
}
interface I13BBBBBBBBBBB is I13BBBBBB, I13BBBBBBBBBBBB {
	function f0() override(I13BBBBBB, I13BBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I13BBBB is I13BBBBB, I13BBBBBBBBBBB {
	function f0() override(I13BBBBBB, I13BBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I13BBBBB, I13BBBBBBBBBBB)
	external payable returns (uint);
	function f2() external payable returns (uint);
}
interface I13BBBBBBBBBBBBBBBBBB {
}
interface I13BBBBBBBBBBBBBBBBB is I13BBBBBBBBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I13BBBBBBBBBBBBBBBB is I13BBBBBBBBBBBBBBBBB {
}
interface I13BBBBBBBBBBBBBBB is I13BBBB, I13BBBBBBBBBBBBBBBB {
	function f0() override(I13BBBB, I13BBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I13BBB is I13BBBB, I13BBBBBBBBBBBBBBB {
	function f0() override(I13BBBB, I13BBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I13BBBB, I13BBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f3() external payable returns (uint);
}
interface I13BB is I13BBB {
	function f1() override
	external payable returns (uint);
	function f3() override
	external payable returns (uint);
	function f4() external view returns (uint);
}
interface I13B is I13BB {
	function f0() override
	external view returns (uint);
	function f3() override
	external payable returns (uint);
	function f4() override
	external view returns (uint);
}
interface I13BBBBBBBBBBBBBBBBBBBBBB {
}
interface I13BBBBBBBBBBBBBBBBBBBBB is I13BBBBBBBBBBBBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I13BBBBBBBBBBBBBBBBBBBB is I13BBBBBBBBBBBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface I13BBBBBBBBBBBBBBBBBBB is I13BB, I13BBBBBBBBBBBBBBBBBBBB {
	function f0() override(I13BBB, I13BBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f4() override
	external view returns (uint);
}
interface I13 is I13B, I13BBBBBBBBBBBBBBBBBBB {
	function f0() override(I13B, I13BBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I13BB, I13BBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f3() override(I13B, I13BB)
	external payable returns (uint);
	function f4() override(I13B, I13BBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f5() external payable returns (uint);
}
contract C {
	using L10 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1649760492)
			return 1;
		return 0;
	}
}
