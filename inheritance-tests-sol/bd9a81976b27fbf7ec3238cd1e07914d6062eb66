pragma solidity >=0.0;
interface I0BB {
	function f0() external payable returns (uint);
	function f1() external payable returns (uint);
}
interface I0B is I0BB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I0 is I0B {
	function f0() override
	external payable returns (uint);
	function f2() external view returns (uint);
}
interface C1BBBBBBBBB {
	function f0() external payable returns (uint);
	function f1() external pure returns (uint);
}
interface C1BBBBBBBB is C1BBBBBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external pure returns (uint);
}
interface C1BBBBBBBBBB is C1BBBBBBBBB {
	function f1() override
	external pure returns (uint);
	function f2() external payable returns (uint);
}
interface C1BBBBBBB is C1BBBBBBBB, C1BBBBBBBBBB {
	function f0() override(C1BBBBBBBB, C1BBBBBBBBB)
	external payable returns (uint);
	function f1() override(C1BBBBBBBB, C1BBBBBBBBBB)
	external pure returns (uint);
	function f3() external view returns (uint);
	function f4() external view returns (uint);
}
interface C1BBBBBB is C1BBBBBBB {
	function f0() override
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
}
interface C1BBBBBBBBBBB is C1BBBBBB {
	function f5() external view returns (uint);
}
interface C1BBBBB is C1BBBBBB, C1BBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external pure returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external view returns (uint);
	function f5() override
	external view returns (uint);
}
contract C1BBBB is C1BBBBB {
	function f0() external payable
	override
	returns (uint)
	{
		return 730512509;
	}
	function f1() external pure
	override
	returns (uint)
	{
		return 1654044397;
	}
	function f2() virtual external payable
	override
	returns (uint)
	{
		return 148120656;
	}
	function f3() external view
	override
	returns (uint)
	{
		return 318729750;
	}
	function f4() virtual external view
	override
	returns (uint)
	{
		return 552744463;
	}
	function f5() external view
	override
	returns (uint)
	{
		return 943587517;
	}
}
contract C1BBB is C1BBBB {
}
contract C1BB is C1BBB {
	function f2() external payable
	override
	returns (uint)
	{
		return 518008164;
	}
}
contract C1B is C1BB {
	function f4() virtual external view
	override
	returns (uint)
	{
		return 22708192;
	}
}
contract C1BBBBBBBBBBBB is C1BB {
	function f6() virtual public pure
	
	returns (uint)
	{
		return 904623502;
	}
}
contract C1 is C1B, C1BBBBBBBBBBBB {
	function f4() external view
	override(C1BBBB, C1B)
	returns (uint)
	{
		return 1630082519;
	}
}
interface I2B {
}
interface I2BBBBBB {
	function f0() external view returns (uint);
}
interface I2BBBBB is I2BBBBBB {
	function f0() override
	external view returns (uint);
}
interface I2BBBBBBB is I2BBBBBB {
	function f1() external payable returns (uint);
	function f2() external view returns (uint);
}
interface I2BBBB is I2BBBBB, I2BBBBBBB {
	function f0() override(I2BBBBB, I2BBBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I2BBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I2BBBBBBBBBBBB is I2BBBBBBBBBBB {
	function f1() external payable returns (uint);
}
interface I2BBBBBBBBBB is I2BBBBBBBBBBB, I2BBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I2BBBBBBBBB is I2BBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I2BBBBBBBB is I2BBBBB, I2BBBBBBBBB {
	function f0() override(I2BBBBB, I2BBBBBBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I2BBB is I2BBBB, I2BBBBBBBB {
	function f0() override(I2BBBB, I2BBBBBBBB)
	external view returns (uint);
	function f1() override(I2BBBB, I2BBBBBBBB)
	external payable returns (uint);
}
interface I2BB is I2B, I2BBB {
	function f0() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f3() external payable returns (uint);
}
interface I2 is I2B, I2BB {
	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override
	external payable returns (uint);
}
contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}
