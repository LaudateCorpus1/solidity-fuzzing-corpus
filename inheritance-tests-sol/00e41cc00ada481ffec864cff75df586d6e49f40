
pragma solidity >=0.0;





contract C0BB {

}
contract C0B is C0BB {

}


interface C0BBBB {

	function f0() external payable returns (uint);
}
interface C0BBB is C0BBBB {

	function f0() override
	external payable returns (uint);
}
contract C0 is C0B, C0BBB {

	function f0() external payable
	override
	returns (uint)
	{
		return 2078669041;
	}
}
library L1 {

	function f0(uint) public pure returns (uint)
	{
		return 846930886;
	}
	function f1(uint) public view returns (uint)
	{
		return 1681692777;
	}
}




interface I3BBB {

	function f0() external view returns (uint);
}
interface I3BB is I3BBB {

}
interface I3B is I3BB {

}




interface I3BBBBBBB {

}
interface I3BBBBBB is I3BBBBBBB {

}
interface I3BBBBB is I3BBBBBB {

}
interface I3BBBB is I3BB, I3BBBBB {

}

interface I3BBBBBBBB is I3BB {

	function f1() external view returns (uint);
}




interface I3BBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I3BBBBBBBBBBB is I3BBBBBBBBBBBB {

}
interface I3BBBBBBBBBB is I3BBBBBBBBBBB {

}
interface I3BBBBBBBBB is I3BB, I3BBBBBBBBBB {

	function f0() override(I3BBB, I3BBBBBBBBBBBB)
	external view returns (uint);
}
interface I3 is I3B, I3BBBB, I3BBBBBBBB, I3BBBBBBBBB {

	function f0() override(I3BBB, I3BBBBBBBBB)
	external view returns (uint);
}





interface I4BBBB {

	function f0() external view returns (uint);
}
interface I4BBB is I4BBBB {

	function f0() override
	external view returns (uint);
}
interface I4BB is I4BBB {

	function f1() external payable returns (uint);
}
interface I4B is I4BB {

	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}

interface I4BBBBB is I4B {

	function f2() external view returns (uint);
}

interface I4BBBBBB is I4B {

	function f1() override
	external payable returns (uint);
	function f2() external view returns (uint);
}

interface I4BBBBBBB is I4B {

	function f1() override
	external payable returns (uint);
}




interface I4BBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I4BBBBBBBBBB is I4BBBBBBBBBBB {

}
interface I4BBBBBBBBB is I4BBBBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I4BBBBBBBB is I4B, I4BBBBBBBBB {

	function f0() override(I4B, I4BBBBBBBBB)
	external view returns (uint);
}



interface I4BBBBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I4BBBBBBBBBBBBB is I4BBBBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I4BBBBBBBBBBBB is I4BBBBB, I4BBBBBBBBBBBBB {

	function f0() override(I4B, I4BBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override
	external view returns (uint);
}
interface I4 is I4B, I4BBBBB, I4BBBBBB, I4BBBBBBB, I4BBBBBBBB, I4BBBBBBBBBBBB {

	function f0() override(I4B, I4BBBBBBBB, I4BBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I4B, I4BBBBBB, I4BBBBBBB)
	external payable returns (uint);
	function f2() override(I4BBBBB, I4BBBBBB, I4BBBBBBBBBBBB)
	external view returns (uint);
	function f3() external view returns (uint);
}


contract C {
	using L1 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f1() != 1681692777)
			return 1;
		return 0;
	}
}

