pragma solidity >=0.0;
interface C1B {
	function f0() external view returns (uint);
}
contract C1 is C1B {
	function f0() virtual external view
	override
	returns (uint)
	{
		return 1721041567;
	}
}
interface I2BBBBB {
	function f0() external payable returns (uint);
}
interface I2BBBBBB is I2BBBBB {
	function f0() override
	external payable returns (uint);
	function f1() external payable returns (uint);
	function f2() external view returns (uint);
}
interface I2BBBB is I2BBBBB, I2BBBBBB {
	function f0() override(I2BBBBB, I2BBBBBB)
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
}
interface I2BBB is I2BBBB {
	function f1() override
	external payable returns (uint);
}
interface I2BB is I2BBB {
	function f1() override
	external payable returns (uint);
}
interface I2B is I2BB {
	function f0() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
}
interface I2 is I2B {
	function f3() external payable returns (uint);
}
library L3 {
	function f0(uint) public view returns (uint)
	{
		return 846930886;
	}
}
library L4 {
	function f0(uint) external pure returns (uint)
	{
		return 1681692777;
	}
	function f1(uint) public pure returns (uint)
	{
		return 1714636915;
	}
}
interface C5BB {
	function f0() external payable returns (uint);
}
interface C5B is C5BB {
	function f0() override
	external payable returns (uint);
}
contract C5 is C5B {
	function f0() external payable
	override
	returns (uint)
	{
		return 2007936220;
	}
}
contract C {
	function test() public returns (uint)
	{
			C1 tc0 = new C1();
			if (tc0.f0() != 1721041567)
				return 1;
			C5 tc1 = new C5();
			if (tc1.f0() != 2007936220)
				return 2;
			return 0;
	}
}
