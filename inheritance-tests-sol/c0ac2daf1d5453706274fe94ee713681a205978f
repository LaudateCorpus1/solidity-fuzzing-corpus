
pragma solidity >=0.0;











interface C0BBBBBBBB {

	function f0() external pure returns (uint);
}
interface C0BBBBBBB is C0BBBBBBBB {

	function f1() external payable returns (uint);
}
interface C0BBBBBB is C0BBBBBBB {

	function f0() override
	external pure returns (uint);
	function f2() external view returns (uint);
	function f3() external view returns (uint);
}
interface C0BBBBB is C0BBBBBB {

}

interface C0BBBBBBBBB is C0BBBBBB {

	function f4() external view returns (uint);
}
interface C0BBBB is C0BBBBB, C0BBBBBBBBB {

	function f2() override
	external view returns (uint);
}
contract C0BBB is C0BBBB {

	function f0() external pure
	override
	returns (uint)
	{
		return 1931656580;
	}
	function f1() external payable
	override
	returns (uint)
	{
		return 1936030137;
	}
	function f2() virtual external view
	override
	returns (uint)
	{
		return 353718330;
	}
	function f3() virtual external view
	override
	returns (uint)
	{
		return 1947433875;
	}
	function f4() external view
	override
	returns (uint)
	{
		return 2010567813;
	}
}
contract C0BB is C0BBB {

	function f3() virtual external view
	override
	returns (uint)
	{
		return 1696049367;
	}
}
contract C0B is C0BB {

}
contract C0 is C0B {

	function f2() virtual external view
	override
	returns (uint)
	{
		return 1287522347;
	}
}
library L1 {

	function f0(uint) public pure returns (uint)
	{
		return 846930886;
	}
}









interface C2BBBBBBBB {

	function f0() external pure returns (uint);
}
interface C2BBBBBBB is C2BBBBBBBB {

	function f1() external payable returns (uint);
}
interface C2BBBBBB is C2BBBBBBB {

	function f0() override
	external pure returns (uint);
	function f2() external view returns (uint);
	function f3() external view returns (uint);
}
interface C2BBBBB is C2BBBBBB {

	function f1() override
	external payable returns (uint);
}

interface C2BBBBBBBBB is C2BBBBBB {

	function f1() override
	external payable returns (uint);
	function f4() external view returns (uint);
}
interface C2BBBB is C2BBBBB, C2BBBBBBBBB {

	function f0() override
	external pure returns (uint);
	function f1() override(C2BBBBB, C2BBBBBBBBB)
	external payable returns (uint);
}
contract C2BBB is C2BBBB {

	function f0() external pure
	override
	returns (uint)
	{
		return 276590098;
	}
	function f1() external payable
	override
	returns (uint)
	{
		return 948709761;
	}
	function f2() virtual external view
	override
	returns (uint)
	{
		return 1082682476;
	}
	function f3() virtual external view
	override
	returns (uint)
	{
		return 1243427070;
	}
	function f4() external view
	override
	returns (uint)
	{
		return 200599677;
	}
}
contract C2BB is C2BBB {

	function f3() external view
	override
	returns (uint)
	{
		return 355190910;
	}
}
contract C2B is C2BB {

	function f2() external view
	override
	returns (uint)
	{
		return 1869683330;
	}
}
contract C2 is C2B {

}


contract C {
	using L1 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 846930886)
			return 1;
		return 0;
	}
}

