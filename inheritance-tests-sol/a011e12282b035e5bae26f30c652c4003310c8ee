
pragma solidity >=0.0;


library L0 {

	function f0(uint) public view returns (uint)
	{
		return 1804289383;
	}
}
library L1 {

	function f0(uint) private pure returns (uint)
	{
		return 846930886;
	}
}
library L2 {

	function f0(uint) external pure returns (uint)
	{
		return 1681692777;
	}
}
library L3 {

	function f0(uint) external pure returns (uint)
	{
		return 1714636915;
	}
}
library L4 {

	function f0(uint) private pure returns (uint)
	{
		return 1957747793;
	}
	function f1(uint) external pure returns (uint)
	{
		return 424238335;
	}
	function f2(uint) private pure returns (uint)
	{
		return 719885386;
	}
}
library L5 {

	function f0(uint) private pure returns (uint)
	{
		return 1649760492;
	}
	function f1(uint) internal pure returns (uint)
	{
		return 596516649;
	}
	function f2(uint) private pure returns (uint)
	{
		return 1189641421;
	}
	function f3(uint) external pure returns (uint)
	{
		return 1025202362;
	}
}





interface I6BBBB {

	function f0() external payable returns (uint);
}
interface I6BBB is I6BBBB {

	function f0() override
	external payable returns (uint);
}




interface I6BBBBBBBB {

	function f0() external payable returns (uint);
	function f1() external payable returns (uint);
}
interface I6BBBBBBB is I6BBBBBBBB {

	function f1() override
	external payable returns (uint);
}
interface I6BBBBBB is I6BBBBBBB {

	function f0() override
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() external view returns (uint);
}
interface I6BBBBB is I6BBBB, I6BBBBBB {

	function f0() override(I6BBBB, I6BBBBBB)
	external payable returns (uint);
}
interface I6BB is I6BBB, I6BBBBB {

	function f0() override(I6BBB, I6BBBBB)
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I6B is I6BB {

	function f0() override
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
}
interface I6 is I6B {

	function f0() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
}


interface C7B {

	function f0() external view returns (uint);
}
contract C7 is C7B {

	function f0() virtual external view
	override
	returns (uint)
	{
		return 1697268305;
	}
}
library L8 {

	function f0(uint) internal pure returns (uint)
	{
		return 783368690;
	}
}

contract C9 {

	function f0() virtual public pure
	
	returns (uint)
	{
		return 189733958;
	}
}



interface I10BB {

	function f0() external view returns (uint);
}
interface I10B is I10BB {

	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
}
interface I10 is I10B {

	function f1() override
	external view returns (uint);
	function f2() external payable returns (uint);
}



interface I11BB {

	function f0() external view returns (uint);
}
interface I11B is I11BB {

	function f0() override
	external view returns (uint);
}
interface I11 is I11B {

	function f1() external view returns (uint);
}


contract C {
	function test() public returns (uint)
	{
			C7 tc0 = new C7();
			if (tc0.f0() != 1697268305)
				return 1;
			C9 tc1 = new C9();
			if (tc1.f0() != 189733958)
				return 2;
			return 0;
	}
}

