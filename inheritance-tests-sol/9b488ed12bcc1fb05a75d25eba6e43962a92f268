
pragma solidity >=0.0;
















interface I0BBBBBBBBBBBBB {

	function f0() external view returns (uint);
}

interface I0BBBBBBBBBBBBBB is I0BBBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
}
interface I0BBBBBBBBBBBB is I0BBBBBBBBBBBBB, I0BBBBBBBBBBBBBB {

	function f0() override(I0BBBBBBBBBBBBB, I0BBBBBBBBBBBBBB)
	external view returns (uint);
	function f2() external payable returns (uint);
	function f3() external view returns (uint);
}
interface I0BBBBBBBBBBB is I0BBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
}
interface I0BBBBBBBBBB is I0BBBBBBBBBBB {

	function f1() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
}
interface I0BBBBBBBBB is I0BBBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f4() external payable returns (uint);
}
interface I0BBBBBBBB is I0BBBBBBBBB {

	function f1() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
}

interface I0BBBBBBBBBBBBBBB is I0BBBBBBBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() external payable returns (uint);
}
interface I0BBBBBBB is I0BBBBBBBB, I0BBBBBBBBBBBBBBB {

	function f0() override(I0BBBBBBBBB, I0BBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I0BBBBBBBB, I0BBBBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override(I0BBBBBBBBB, I0BBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f3() override(I0BBBBBBBB, I0BBBBBBBBBBBBBBB)
	external view returns (uint);
	function f4() override(I0BBBBBBBB, I0BBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() external view returns (uint);
	function f7() external payable returns (uint);
	function f8() external view returns (uint);
	function f9() external payable returns (uint);
}
interface I0BBBBBB is I0BBBBBBB {

	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f7() override
	external payable returns (uint);
	function f8() override
	external view returns (uint);
}
interface I0BBBBB is I0BBBBBB {

	function f0() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f7() override
	external payable returns (uint);
	function f9() override
	external payable returns (uint);
	function f10() external view returns (uint);
}
interface I0BBBB is I0BBBBB {

	function f0() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f9() override
	external payable returns (uint);
	function f10() override
	external view returns (uint);
}

interface I0BBBBBBBBBBBBBBBB is I0BBBBB {

	function f0() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f4() override
	external payable returns (uint);
	function f7() override
	external payable returns (uint);
	function f9() override
	external payable returns (uint);
	function f10() override
	external view returns (uint);
	function f11() external payable returns (uint);
}
interface I0BBB is I0BBBB, I0BBBBBBBBBBBBBBBB {

	function f0() override(I0BBBB, I0BBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override(I0BBBBBB, I0BBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f3() override(I0BBBB, I0BBBBBB)
	external view returns (uint);
	function f4() override(I0BBBB, I0BBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() override
	external view returns (uint);
	function f7() override(I0BBBBB, I0BBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f9() override(I0BBBB, I0BBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f10() override(I0BBBB, I0BBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f11() override
	external payable returns (uint);
	function f12() external view returns (uint);
}
interface I0BB is I0BBB {

	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override
	external payable returns (uint);
	function f7() override
	external payable returns (uint);
	function f8() override
	external view returns (uint);
	function f9() override
	external payable returns (uint);
	function f12() override
	external view returns (uint);
}
interface I0B is I0BB {

	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() override
	external view returns (uint);
	function f7() override
	external payable returns (uint);
	function f8() override
	external view returns (uint);
	function f9() override
	external payable returns (uint);
	function f10() override
	external view returns (uint);
}

interface I0BBBBBBBBBBBBBBBBB is I0BB {

	function f0() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f6() override
	external view returns (uint);
	function f9() override
	external payable returns (uint);
	function f10() override
	external view returns (uint);
	function f12() override
	external view returns (uint);
	function f13() external payable returns (uint);
}
interface I0 is I0B, I0BBBBBBBBBBBBBBBBB {

	function f0() override(I0B, I0BBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I0B, I0BBBBBBB)
	external view returns (uint);
	function f2() override(I0BBB, I0BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f3() override(I0BB, I0BBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f4() override(I0B, I0BB)
	external payable returns (uint);
	function f5() override(I0B, I0BB)
	external payable returns (uint);
	function f6() override(I0B, I0BBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f7() override(I0B, I0BB)
	external payable returns (uint);
	function f8() override(I0B, I0BB)
	external view returns (uint);
	function f9() override(I0B, I0BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f10() override(I0B, I0BBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f11() override
	external payable returns (uint);
	function f12() override(I0BB, I0BBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f13() override
	external payable returns (uint);
}




interface C1BBB {

	function f0() external payable returns (uint);
}
interface C1BB is C1BBB {

	function f0() override
	external payable returns (uint);
	function f1() external payable returns (uint);
}
interface C1B is C1BB {

	function f1() override
	external payable returns (uint);
}
contract C1 is C1B {

	function f0() external payable
	override
	returns (uint)
	{
		return 1298836654;
	}
	function f1() external payable
	override
	returns (uint)
	{
		return 1561120409;
	}
	function f2() public view
	
	returns (uint)
	{
		return 1642089609;
	}
}


interface I2B {

	function f0() external payable returns (uint);
}

interface I2BB is I2B {

	function f1() external payable returns (uint);
}

interface I2BBB is I2BB {

	function f0() override
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I2 is I2B, I2BB, I2BBB {

	function f0() override(I2B, I2BBB)
	external payable returns (uint);
	function f1() override(I2BB, I2BBB)
	external payable returns (uint);
}





interface I4BBBB {

	function f0() external view returns (uint);
}
interface I4BBB is I4BBBB {

	function f0() override
	external view returns (uint);
}
interface I4BB is I4BBB {

}
interface I4B is I4BB {

}



interface I4BBBBBBB {

	function f0() external view returns (uint);
}
interface I4BBBBBB is I4BBBBBBB {

	function f1() external payable returns (uint);
}
interface I4BBBBB is I4B, I4BBBBBB {

	function f0() override(I4BBB, I4BBBBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I4 is I4B, I4BBBBB {

	function f0() override(I4BBB, I4BBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() external payable returns (uint);
}


contract C {
	function test() public returns (uint)
	{
			C1 tc0 = new C1();
			if (tc0.f0() != 1298836654)
				return 1;
			if (tc0.f1() != 1561120409)
				return 2;
			if (tc0.f2() != 1642089609)
				return 3;
			return 0;
	}
}

