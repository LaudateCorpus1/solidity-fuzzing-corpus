pragma solidity >=0.0;
interface I0B {
}
interface I0 is I0B {
}
interface I1BBB {
	function f0() external payable returns (uint);
}
interface I1BB is I1BBB {
}
interface I1B is I1BB {
	function f0() override
	external payable returns (uint);
	function f1() external view returns (uint);
}
interface I1 is I1B {
}
interface I2 {
	function f0() external payable returns (uint);
}
interface I3BB {
	function f0() external payable returns (uint);
}
interface I3B is I3BB {
}
interface I3 is I3B {
	function f1() external payable returns (uint);
}
interface I4B {
}
interface I4 is I4B {
}
interface I5BB {
	function f0() external payable returns (uint);
}
interface I5B is I5BB {
}
interface I5 is I5B {
	function f1() external payable returns (uint);
}
interface I8 {
	function f0() external payable returns (uint);
}
interface I9BB {
	function f0() external payable returns (uint);
}
interface I9B is I9BB {
}
interface I9 is I9B {
}
interface I10B {
	function f0() external payable returns (uint);
}
interface I10 is I10B {
	function f0() override
	external payable returns (uint);
	function f1() external payable returns (uint);
}
interface I11B {
	function f0() external payable returns (uint);
}
interface I11 is I11B {
	function f1() external payable returns (uint);
}
interface I12BB {
	function f0() external payable returns (uint);
}
interface I12B is I12BB {
}
interface I12 is I12B {
	function f0() override
	external payable returns (uint);
}
interface C15BBBB {
	function f0() external payable returns (uint);
}
interface C15BBB is C15BBBB {
}
interface C15BB is C15BBB {
}
contract C15B is C15BB {
	function f0() virtual external payable
	override
	returns (uint)
	{
		return 480194461;
	}
}
abstract contract C15 is C15B {
}
interface I16 {
	function f0() external view returns (uint);
}
interface I18B {
	function f0() external payable returns (uint);
}
interface I18 is I18B {
	function f1() external payable returns (uint);
}
contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}
