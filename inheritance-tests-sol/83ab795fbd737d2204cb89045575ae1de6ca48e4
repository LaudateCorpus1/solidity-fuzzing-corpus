pragma solidity >=0.0;
library L0 {
	function f0(uint) internal view returns (uint)
	{
		return 1804289383;
	}
	function f1(uint) public view returns (uint)
	{
		return 846930886;
	}
}
interface I1BBBB {
	function f0() external view returns (uint);
}
interface I1BBB is I1BBBB {
}
interface I1BB is I1BBB {
}
interface I1B is I1BB {
}
interface I1BBBBBBBB {
	function f0() external view returns (uint);
}
interface I1BBBBBBB is I1BBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface I1BBBBBB is I1BBBBBBB {
}
interface I1BBBBB is I1BB, I1BBBBBB {
	function f0() override(I1BBBB, I1BBBBBBB)
	external view returns (uint);
}
interface I1BBBBBBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I1BBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBB {
}
interface I1BBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBB {
}
interface I1BBBBBBBBBBBBB is I1BBBBBBBBBBBBBB {
}
interface I1BBBBBBBBBBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBBBBB {
}
interface I1BBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBB {
	function f0() override(I1BBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I1BBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I1BBBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I1BBBBBBBBBBBB is I1BBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I1BBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I1BBBBBBBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
}
interface I1BBBBBBBBBBB is I1BBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface I1BBBBBBBBBB is I1BBBBBBBBBBB {
}
interface I1BBBBBBBBB is I1BBBBBB, I1BBBBBBBBBB {
	function f0() override(I1BBBBBBB, I1BBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB is I1BB {
	function f1() external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB is I1BBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I1BBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB is I1BB {
	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I1 is I1B, I1BBBBB, I1BBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I1BBBB, I1BBBBB, I1BBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I1BBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
}
interface C2BBB {
	function f0() external view returns (uint);
}
interface C2BB is C2BBB {
	function f0() override
	external view returns (uint);
}
abstract contract C2B is C2BB {
	function f0() virtual external view
	override
	returns (uint)
	{
		return 939007724;
	}
}
contract C2 is C2B {
	function f0() external view
	override
	returns (uint)
	{
		return 2102846063;
	}
}
contract C {
	using L0 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f1() != 846930886)
			return 1;
		return 0;
	}
}
