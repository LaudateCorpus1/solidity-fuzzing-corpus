
pragma solidity >=0.0;








interface C0BBBBB {

	function f0() external view returns (uint);
}
interface C0BBBB is C0BBBBB {

}
interface C0BBB is C0BBBB {

	function f0() override
	external view returns (uint);
}
interface C0BB is C0BBB {

}
interface C0B is C0BB {

}
contract C0 is C0B {

	function f0() external view
	override
	returns (uint)
	{
		return 1596680831;
	}
}


interface I1B {

	function f0() external pure returns (uint);
}
interface I1 is I1B {

}


interface I2B {

	function f0() external pure returns (uint);
}
interface I2 is I2B {

}



interface I3BB {

	function f0() external view returns (uint);
}
interface I3B is I3BB {

	function f1() external payable returns (uint);
}
interface I3 is I3B {

}





interface I4BBBB {

	function f0() external view returns (uint);
}
interface I4BBB is I4BBBB {

	function f1() external payable returns (uint);
}
interface I4BB is I4BBB {

}
interface I4B is I4BB {

	function f1() override
	external payable returns (uint);
	function f2() external payable returns (uint);
}


interface I4BBBBBB {

	function f0() external view returns (uint);
}
interface I4BBBBB is I4BB, I4BBBBBB {

	function f0() override(I4BBBB, I4BBBBBB)
	external view returns (uint);
	function f2() external payable returns (uint);
}

interface I4BBBBBBB is I4BBBBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f3() external payable returns (uint);
}


interface I4BBBBBBBBB {

	function f0() external view returns (uint);
}
interface I4BBBBBBBB is I4BB, I4BBBBBBBBB {

	function f0() override(I4BBBB, I4BBBBBBBBB)
	external view returns (uint);
	function f2() external payable returns (uint);
}
interface I4 is I4B, I4BBBBB, I4BBBBBBB, I4BBBBBBBB {

	function f0() override(I4BBBB, I4BBBBB, I4BBBBBBB, I4BBBBBBBB)
	external view returns (uint);
	function f1() override(I4B, I4BBB, I4BBBBBBB)
	external payable returns (uint);
	function f2() override(I4B, I4BBBBB, I4BBBBBBBB)
	external payable returns (uint);
}


contract C {
	function test() public returns (uint)
	{
			C0 tc0 = new C0();
			if (tc0.f0() != 1596680831)
				return 1;
			return 0;
	}
}

