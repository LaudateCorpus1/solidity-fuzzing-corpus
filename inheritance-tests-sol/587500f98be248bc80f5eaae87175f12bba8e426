pragma solidity >=0.0;
interface I0BBB {
	function f0() external payable returns (uint);
}
interface I0BB is I0BBB {
}
interface I0B is I0BB {
	function f0() override
	external payable returns (uint);
	function f1() external payable returns (uint);
}
interface I0 is I0B {
}
contract C2 {
	function f0() virtual public pure
	
	returns (uint)
	{
		return 192302371;
	}
}
interface I3BBBB {
	function f0() external payable returns (uint);
}
interface I3BBB is I3BBBB {
}
interface I3BB is I3BBB {
}
interface I3B is I3BB {
}
interface I3BBBBB is I3B {
	function f0() override
	external payable returns (uint);
	function f1() external view returns (uint);
}
interface I3 is I3B, I3BBBBB {
	function f0() override(I3BBBB, I3BBBBB)
	external payable returns (uint);
}
contract C5 {
	function f0() public view
	
	returns (uint)
	{
		return 1447645967;
	}
	function f1() public view
	
	returns (uint)
	{
		return 200599677;
	}
}
interface I7B {
}
interface I7BBBB {
	function f0() external view returns (uint);
	function f1() external view returns (uint);
}
interface I7BBB is I7BBBB {
	function f0() override
	external view returns (uint);
	function f2() external payable returns (uint);
}
interface I7BB is I7B, I7BBB {
	function f1() override
	external view returns (uint);
}
interface I7 is I7B, I7BB {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
}
contract C {
	function test() public returns (uint)
	{
			C2 tc0 = new C2();
			if (tc0.f0() != 192302371)
				return 1;
			C5 tc1 = new C5();
			if (tc1.f0() != 1447645967)
				return 2;
			if (tc1.f1() != 200599677)
				return 3;
			return 0;
	}
}
