pragma solidity >=0.0;
interface I1B {
	function f0() external payable returns (uint);
	function f1() external view returns (uint);
}
interface I1 is I1B {
	function f0() override
	external payable returns (uint);
	function f1() override
	external view returns (uint);
}
interface I4BBBB {
	function f0() external payable returns (uint);
}
interface I4BBB is I4BBBB {
	function f0() override
	external payable returns (uint);
}
interface I4BBBBBB {
	function f0() external payable returns (uint);
}
interface I4BBBBBBB is I4BBBBBB {
	function f1() external payable returns (uint);
}
interface I4BBBBB is I4BBBB, I4BBBBBB, I4BBBBBBB {
	function f0() override(I4BBBB, I4BBBBBB)
	external payable returns (uint);
}
interface I4BB is I4BBB, I4BBBBB {
	function f0() override(I4BBB, I4BBBBB)
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I4BBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I4BBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I4BBBBBBBBBBBB is I4BBBBBBBBBBB, I4BBBBBBBBBBBBB {
	function f0() override(I4BBBBBBBBBBB, I4BBBBBBBBBBBBB)
	external payable returns (uint);
}
interface I4BBBBBBBBBB is I4BBBBBBBBBBB, I4BBBBBBBBBBBB {
	function f0() override(I4BBBBBBBBBBB, I4BBBBBBBBBBBB)
	external payable returns (uint);
}
interface I4BBBBBBBBB is I4BBBBBBBBBB {
}
interface I4BBBBBBBB is I4BBBBB, I4BBBBBBBBB {
	function f0() override(I4BBBBB, I4BBBBBBBBBB)
	external payable returns (uint);
}
interface I4B is I4BB, I4BBBBBBBB {
	function f0() override(I4BB, I4BBBBBBBB)
	external payable returns (uint);
	function f1() override(I4BB, I4BBBBBBB)
	external payable returns (uint);
}
interface I4 is I4B {
	function f0() override
	external payable returns (uint);
	function f2() external view returns (uint);
}
contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}
