
pragma solidity >=0.0;




contract C0B {

	function f0() virtual public payable
	
	returns (uint)
	{
		return 48271;
	}
}
abstract contract C0 is C0B {

	function f0() virtual public payable
	override
	returns (uint)
	{
		return 1914720637;
	}
}
library L1 {

	function f0(uint) internal pure returns (uint)
	{
		return 1804289383;
	}
}




interface C2BBB {

	function f0() external view returns (uint);
}
interface C2BB is C2BBB {

}
interface C2B is C2BB {

}
contract C2 is C2B {

	function f0() external view
	override
	returns (uint)
	{
		return 1596680831;
	}
}
library L3 {

	function f0(uint) external pure returns (uint)
	{
		return 846930886;
	}
	function f1(uint) external pure returns (uint)
	{
		return 1681692777;
	}
}
library L4 {

	function f0(uint) internal pure returns (uint)
	{
		return 1714636915;
	}
}
library L5 {

	function f0(uint) internal pure returns (uint)
	{
		return 1957747793;
	}
}
library L6 {

	function f0(uint) internal pure returns (uint)
	{
		return 424238335;
	}
}
library L7 {

	function f0(uint) external pure returns (uint)
	{
		return 719885386;
	}
	function f1(uint) external pure returns (uint)
	{
		return 1649760492;
	}
	function f2(uint) external pure returns (uint)
	{
		return 596516649;
	}
	function f3(uint) internal pure returns (uint)
	{
		return 1189641421;
	}
}
library L8 {

	function f0(uint) internal pure returns (uint)
	{
		return 1025202362;
	}
	function f1(uint) internal pure returns (uint)
	{
		return 1350490027;
	}
}

interface I9 {

	function f0() external payable returns (uint);
}
library L10 {

	function f0(uint) external pure returns (uint)
	{
		return 783368690;
	}
}


contract C {
	using L3 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f1() != 1681692777)
			return 1;
		return 0;
	}
}

