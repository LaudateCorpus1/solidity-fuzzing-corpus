
pragma solidity >=0.0;


library L0 {

	function f0(uint) public view returns (uint)
	{
		return 1804289383;
	}
}





interface I1BBBB {

	function f0() external view returns (uint);
}
interface I1BBB is I1BBBB {

	function f0() override
	external view returns (uint);
}
interface I1BB is I1BBB {

}
interface I1B is I1BB {

}
interface I1 is I1B {

	function f0() override
	external view returns (uint);
}



interface I2BB {

	function f0() external payable returns (uint);
}
interface I2B is I2BB {

	function f0() override
	external payable returns (uint);
}
interface I2 is I2B {

	function f0() override
	external payable returns (uint);
	function f1() external payable returns (uint);
}












interface I3BBBBBBBBBBB {

	function f0() external payable returns (uint);
}
interface I3BBBBBBBBBB is I3BBBBBBBBBBB {

	function f1() external view returns (uint);
}
interface I3BBBBBBBBB is I3BBBBBBBBBB {

	function f1() override
	external view returns (uint);
}

interface I3BBBBBBBBBBBB is I3BBBBBBBBB {

	function f0() override
	external payable returns (uint);
	function f1() override
	external view returns (uint);
	function f2() external payable returns (uint);
}
interface I3BBBBBBBB is I3BBBBBBBBB, I3BBBBBBBBBBBB {

	function f0() override(I3BBBBBBBBBBB, I3BBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I3BBBBBBBBB, I3BBBBBBBBBBBB)
	external view returns (uint);
	function f3() external payable returns (uint);
	function f4() external view returns (uint);
}
interface I3BBBBBBB is I3BBBBBBBB {

	function f0() override
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
}
interface I3BBBBBB is I3BBBBBBB {

	function f1() override
	external view returns (uint);
}
interface I3BBBBB is I3BBBBBB {

	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external payable returns (uint);
	function f5() external payable returns (uint);
}
interface I3BBBB is I3BBBBB {

	function f0() override
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
	function f4() override
	external view returns (uint);
}

interface I3BBBBBBBBBBBBB is I3BBBBB {

	function f0() override
	external payable returns (uint);
	function f1() override
	external view returns (uint);
	function f3() override
	external payable returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() external payable returns (uint);
}
interface I3BBB is I3BBBB, I3BBBBBBBBBBBBB {

	function f0() override(I3BBBB, I3BBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I3BBBBB, I3BBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override(I3BBBB, I3BBBBB)
	external payable returns (uint);
	function f3() override(I3BBBBB, I3BBBBBBBBBBBBB)
	external payable returns (uint);
	function f4() override(I3BBBB, I3BBBBBBBB)
	external view returns (uint);
	function f5() override(I3BBBBB, I3BBBBBBBBBBBBB)
	external payable returns (uint);
	function f6() override
	external payable returns (uint);
	function f7() external view returns (uint);
}
interface I3BB is I3BBB {

	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f7() override
	external view returns (uint);
}
interface I3B is I3BB {

	function f0() override
	external payable returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external payable returns (uint);
	function f4() override
	external view returns (uint);
	function f7() override
	external view returns (uint);
}
interface I3 is I3B {

	function f0() override
	external payable returns (uint);
	function f3() override
	external payable returns (uint);
	function f4() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f7() override
	external view returns (uint);
}


contract C {
	using L0 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1804289383)
			return 1;
		return 0;
	}
}

