pragma solidity >=0.0;
interface C0BBBBB {
	function f0() external payable returns (uint);
	function f1() external pure returns (uint);
}
interface C0BBBB is C0BBBBB {
}
interface C0BBBBBB is C0BBBBB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external pure returns (uint);
	function f2() external payable returns (uint);
}
interface C0BBB is C0BBBB, C0BBBBBB {
	function f0() override(C0BBBBB, C0BBBBBB)
	external payable returns (uint);
	function f1() override(C0BBBBB, C0BBBBBB)
	external pure returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() external pure returns (uint);
	function f4() external view returns (uint);
	function f5() external view returns (uint);
}
interface C0BB is C0BBB {
	function f5() override
	external view returns (uint);
	function f6() external payable returns (uint);
}
interface C0B is C0BB {
	function f1() override
	external pure returns (uint);
	function f5() override
	external view returns (uint);
	function f6() override
	external payable returns (uint);
}
abstract contract C0BBBBBBB is C0B {
	function f0() virtual external payable
	override
	returns (uint);
	function f1() virtual external pure
	override
	returns (uint);
	function f2() virtual external payable
	override
	returns (uint);
	function f3() virtual external pure
	override
	returns (uint);
	function f4() virtual external view
	override
	returns (uint);
	function f5() virtual external view
	override
	returns (uint);
	function f6() virtual external payable
	override
	returns (uint);
}
contract C0 is C0B, C0BBBBBBB {
	function f0() external payable
	override(C0BBBBBBB, C0BBB)
	returns (uint)
	{
		return 1150688209;
	}
	function f1() virtual external pure
	override(C0BBBBBBB, C0B)
	returns (uint)
	{
		return 1313839054;
	}
	function f2() virtual external payable
	override(C0BBBBBBB, C0BBB)
	returns (uint)
	{
		return 1163900932;
	}
	function f3() virtual external pure
	override(C0BBBBBBB, C0BBB)
	returns (uint)
	{
		return 1735915146;
	}
	function f4() external view
	override(C0BBBBBBB, C0BBB)
	returns (uint)
	{
		return 793829872;
	}
	function f5() external view
	override(C0BBBBBBB, C0B)
	returns (uint)
	{
		return 471204562;
	}
	function f6() external payable
	override(C0BBBBBBB, C0B)
	returns (uint)
	{
		return 2049654209;
	}
}
interface C1BBB {
	function f0() external payable returns (uint);
}
interface C1BB is C1BBB {
	function f0() override
	external payable returns (uint);
}
contract C1B is C1BB {
	function f0() virtual external payable
	override
	returns (uint)
	{
		return 1823773651;
	}
}
contract C1 is C1B {
	function f0() virtual external payable
	override
	returns (uint)
	{
		return 138295049;
	}
}
library L2 {
	function f0(uint) public view returns (uint)
	{
		return 1681692777;
	}
	function f1(uint) public pure returns (uint)
	{
		return 1714636915;
	}
}
interface C3BBB {
	function f0() external payable returns (uint);
}
interface C3BB is C3BBB {
	function f0() override
	external payable returns (uint);
}
contract C3B is C3BB {
	function f0() virtual external payable
	override
	returns (uint)
	{
		return 501882802;
	}
}
contract C3 is C3B {
}
library L5 {
	function f0(uint) public view returns (uint)
	{
		return 1957747793;
	}
	function f1(uint) public view returns (uint)
	{
		return 424238335;
	}
}
library L6 {
	function f0(uint) public pure returns (uint)
	{
		return 719885386;
	}
}
library L7 {
	function f0(uint) public view returns (uint)
	{
		return 1649760492;
	}
}
contract C {
	using L7 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1649760492)
			return 1;
		return 0;
	}
}
