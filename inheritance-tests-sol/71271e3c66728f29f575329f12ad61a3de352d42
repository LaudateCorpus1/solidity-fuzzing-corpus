pragma solidity >=0.0;
interface C0BBBBBBBBB {
	function f0() external payable returns (uint);
	function f1() external pure returns (uint);
}
interface C0BBBBBBBB is C0BBBBBBBBB {
}
interface C0BBBBBBBBBB is C0BBBBBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external pure returns (uint);
	function f2() external payable returns (uint);
}
interface C0BBBBBBB is C0BBBBBBBB, C0BBBBBBBBBB {
	function f0() override(C0BBBBBBBBB, C0BBBBBBBBBB)
	external payable returns (uint);
	function f1() override(C0BBBBBBBBB, C0BBBBBBBBBB)
	external pure returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() external payable returns (uint);
	function f4() external view returns (uint);
}
interface C0BBBBBB is C0BBBBBBB {
}
interface C0BBBBBBBBBBB is C0BBBBBB {
	function f0() override
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
	function f5() external view returns (uint);
}
interface C0BBBBB is C0BBBBBB, C0BBBBBBBBBBB {
	function f0() override(C0BBBBBBB, C0BBBBBBBBBBB)
	external payable returns (uint);
	function f1() override
	external pure returns (uint);
	function f2() override(C0BBBBBBB, C0BBBBBBBBBBB)
	external payable returns (uint);
	function f3() override
	external payable returns (uint);
	function f4() override
	external view returns (uint);
}
contract C0BBBB is C0BBBBB {
	function f0() virtual external payable
	override
	returns (uint)
	{
		return 176859165;
	}
	function f1() virtual external pure
	override
	returns (uint)
	{
		return 2047458761;
	}
	function f2() external payable
	override
	returns (uint)
	{
		return 2079025730;
	}
	function f3() virtual external payable
	override
	returns (uint)
	{
		return 1404944717;
	}
	function f4() external view
	override
	returns (uint)
	{
		return 424589468;
	}
	function f5() external view
	override
	returns (uint)
	{
		return 739959938;
	}
}
contract C0BBB is C0BBBB {
	function f1() external pure
	override
	returns (uint)
	{
		return 464135131;
	}
}
contract C0BB is C0BBB {
	function f0() external payable
	override
	returns (uint)
	{
		return 1150688209;
	}
	function f3() virtual external payable
	override
	returns (uint)
	{
		return 837912430;
	}
}
contract C0B is C0BB {
	function f3() virtual external payable
	override
	returns (uint)
	{
		return 1695590273;
	}
}
contract C0BBBBBBBBBBBB is C0BB {
}
contract C0 is C0B, C0BBBBBBBBBBBB {
	function f3() external payable
	override(C0BB, C0B)
	returns (uint)
	{
		return 2049654209;
	}
}
interface I1B {
	function f0() external payable returns (uint);
}
interface I1BB is I1B {
	function f0() override
	external payable returns (uint);
	function f1() external view returns (uint);
}
interface I1 is I1B, I1BB {
	function f0() override(I1B, I1BB)
	external payable returns (uint);
	function f1() override
	external view returns (uint);
}
interface C2BBBBBBBBB {
	function f0() external payable returns (uint);
	function f1() external pure returns (uint);
}
interface C2BBBBBBBB is C2BBBBBBBBB {
}
interface C2BBBBBBBBBB is C2BBBBBBBBB {
	function f0() override
	external payable returns (uint);
	function f2() external payable returns (uint);
}
interface C2BBBBBBB is C2BBBBBBBB, C2BBBBBBBBBB {
	function f0() override(C2BBBBBBBBB, C2BBBBBBBBBB)
	external payable returns (uint);
	function f1() override
	external pure returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() external payable returns (uint);
	function f4() external view returns (uint);
}
interface C2BBBBBB is C2BBBBBBB {
	function f0() override
	external payable returns (uint);
	function f3() override
	external payable returns (uint);
	function f4() override
	external view returns (uint);
}
interface C2BBBBBBBBBBB is C2BBBBBBB {
	function f0() override
	external payable returns (uint);
	function f3() override
	external payable returns (uint);
	function f4() override
	external view returns (uint);
	function f5() external view returns (uint);
}
interface C2BBBBB is C2BBBBBB, C2BBBBBBBBBBB {
	function f0() override(C2BBBBBB, C2BBBBBBBBBBB)
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override(C2BBBBBB, C2BBBBBBBBBBB)
	external payable returns (uint);
	function f4() override(C2BBBBBB, C2BBBBBBBBBBB)
	external view returns (uint);
	function f5() override
	external view returns (uint);
}
contract C2BBBB is C2BBBBB {
	function f0() external payable
	override
	returns (uint)
	{
		return 162031225;
	}
	function f1() external pure
	override
	returns (uint)
	{
		return 1931596233;
	}
	function f2() external payable
	override
	returns (uint)
	{
		return 962772376;
	}
	function f3() external payable
	override
	returns (uint)
	{
		return 212547773;
	}
	function f4() virtual external view
	override
	returns (uint)
	{
		return 1499339083;
	}
	function f5() external view
	override
	returns (uint)
	{
		return 695874224;
	}
}
contract C2BBB is C2BBBB {
}
contract C2BB is C2BBB {
}
contract C2B is C2BB {
	function f4() virtual external view
	override
	returns (uint)
	{
		return 590528754;
	}
}
contract C2BBBBBBBBBBBB is C2B {
	function f4() virtual external view
	override
	returns (uint)
	{
		return 1081532186;
	}
}
contract C2 is C2B, C2BBBBBBBBBBBB {
	function f4() virtual external view
	override(C2BBBBBBBBBBBB, C2B)
	returns (uint)
	{
		return 1687368337;
	}
}
contract C3 {
	function f0() public view
	
	returns (uint)
	{
		return 1197231911;
	}
}
library L4 {
	function f0(uint) public view returns (uint)
	{
		return 1649760492;
	}
}
contract C {
	using L4 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1649760492)
			return 1;
		return 0;
	}
}
