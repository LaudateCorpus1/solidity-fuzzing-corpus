pragma solidity >=0.0;
interface I0BB {
	function f0() external payable returns (uint);
}
interface I0B is I0BB {
	function f1() external view returns (uint);
}
interface I0 is I0B {
	function f0() override
	external payable returns (uint);
}
interface I1BBBB {
}
interface I1BBB is I1BBBB {
	function f0() external view returns (uint);
}
interface I1BB is I1BBB {
}
interface I1BBBBBBBBBBBB {
}
interface I1BBBBBBBBBBB is I1BBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I1BBBBBBBBBB is I1BBBBBBBBBBB {
}
interface I1BBBBBBBBB is I1BBBBBBBBBB {
}
interface I1BBBBBBBB is I1BBBBBBBBB {
}
interface I1BBBBBBB is I1BBBBBBBB {
}
interface I1BBBBBBBBBBBBBBBB {
}
interface I1BBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I1BBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface I1BBBBBBBBBBBBB is I1BBBBBBB, I1BBBBBBBBBBBBBB {
	function f0() override(I1BBBBBBBBBBB, I1BBBBBBBBBBBBBB)
	external view returns (uint);
}
interface I1BBBBBB is I1BBBBBBB, I1BBBBBBBBBBBBB {
	function f0() override(I1BBBBBBBBBBB, I1BBBBBBBBBBBBB)
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I1BBBBB is I1BBB, I1BBBBBB {
	function f0() override(I1BBB, I1BBBBBB)
	external view returns (uint);
	function f2() external view returns (uint);
}
interface I1B is I1BB, I1BBBBB {
	function f0() override(I1BBB, I1BBBBB)
	external view returns (uint);
}
interface I1 is I1B {
	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}
contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}
