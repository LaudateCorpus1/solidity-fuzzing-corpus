pragma solidity >=0.0;
library L0 {
	function f0(uint) private pure returns (uint)
	{
		return 1804289383;
	}
}
interface I1BB {
	function f0() external view returns (uint);
}
interface I1BBBBBBB {
	function f0() external view returns (uint);
}
interface I1BBBBBB is I1BBBBBBB {
	function f0() override
	external view returns (uint);
}
interface I1BBBBB is I1BBBBBB {
	function f0() override
	external view returns (uint);
}
interface I1BBBB is I1BBBBB {
	function f1() external view returns (uint);
}
interface I1BBB is I1BB, I1BBBB {
	function f0() override(I1BB, I1BBBBB)
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() external payable returns (uint);
}
interface I1B is I1BB, I1BBB {
	function f0() override(I1BB, I1BBB)
	external view returns (uint);
	function f1() override
	external view returns (uint);
}
interface I1BBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I1BBBBBBBBBBB is I1BBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface I1BBBBBBBBBB is I1BBBBBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface I1BBBBBBBBB is I1BBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
}
interface I1BBBBBBBB is I1BB, I1BBBBBBBBB {
	function f0() override(I1BB, I1BBBBBBBBB)
	external view returns (uint);
	function f2() external payable returns (uint);
}
interface I1 is I1B, I1BBBBBBBB {
	function f0() override(I1B, I1BBBBBBBB)
	external view returns (uint);
	function f1() override(I1B, I1BBBBBBBBB)
	external view returns (uint);
	function f2() override(I1BBB, I1BBBBBBBB)
	external payable returns (uint);
}
contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}
