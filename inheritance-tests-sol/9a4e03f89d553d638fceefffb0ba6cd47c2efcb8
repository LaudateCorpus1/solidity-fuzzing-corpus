
pragma solidity >=0.0;














interface C0BBBBBBBBBBB {

	function f0() external view returns (uint);
}

interface C0BBBBBBBBBBBB is C0BBBBBBBBBBB {

	function f1() external view returns (uint);
}
interface C0BBBBBBBBBB is C0BBBBBBBBBBB, C0BBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f2() external view returns (uint);
	function f3() external view returns (uint);
}
interface C0BBBBBBBBB is C0BBBBBBBBBB {

}
interface C0BBBBBBBB is C0BBBBBBBBB {

}
interface C0BBBBBBB is C0BBBBBBBB {

	function f2() override
	external view returns (uint);
}
interface C0BBBBBB is C0BBBBBBB {

	function f0() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
}

interface C0BBBBBBBBBBBBB is C0BBBBBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f4() external payable returns (uint);
}
interface C0BBBBB is C0BBBBBB, C0BBBBBBBBBBBBB {

	function f0() override(C0BBBBBB, C0BBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(C0BBBBBBBBBBBB, C0BBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override(C0BBBBBB, C0BBBBBBBBBBBBB)
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() external pure returns (uint);
	function f6() external pure returns (uint);
	function f7() external payable returns (uint);
	function f8() external payable returns (uint);
}
interface C0BBBB is C0BBBBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f7() override
	external payable returns (uint);
	function f8() override
	external payable returns (uint);
}
interface C0BBB is C0BBBB {

	function f1() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f6() override
	external pure returns (uint);
	function f8() override
	external payable returns (uint);
	function f9() external payable returns (uint);
}
interface C0BB is C0BBB {

	function f1() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f7() override
	external payable returns (uint);
}

interface C0BBBBBBBBBBBBBB is C0BBB {

	function f0() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f5() override
	external pure returns (uint);
	function f6() override
	external pure returns (uint);
	function f7() override
	external payable returns (uint);
	function f8() override
	external payable returns (uint);
	function f10() external payable returns (uint);
}
interface C0B is C0BB, C0BBBBBBBBBBBBBB {

	function f0() override(C0BBBB, C0BBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(C0BB, C0BBB)
	external view returns (uint);
	function f2() override(C0BBBBB, C0BBBBBBBBBBBBBB)
	external view returns (uint);
	function f3() override(C0BB, C0BBBB)
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override(C0BBBBB, C0BBBBBBBBBBBBBB)
	external pure returns (uint);
	function f6() override(C0BBB, C0BBBBBBBBBBBBBB)
	external pure returns (uint);
	function f7() override(C0BB, C0BBBBBBBBBBBBBB)
	external payable returns (uint);
	function f8() override(C0BBB, C0BBBBBBBBBBBBBB)
	external payable returns (uint);
	function f10() override
	external payable returns (uint);
	function f11() external view returns (uint);
}

interface C0BBBBBBBBBBBBBBB is C0BBBBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override
	external pure returns (uint);
	function f6() override
	external pure returns (uint);
	function f9() override
	external payable returns (uint);
	function f10() override
	external payable returns (uint);
	function f11() external view returns (uint);
}
contract C0 is C0B, C0BBBBBBBBBBBBBBB {

	function f0() virtual external view
	override(C0BBBBBBBBBBBBBBB, C0B)
	returns (uint)
	{
		return 1925544752;
	}
	function f1() virtual external view
	override(C0BBB, C0B)
	returns (uint)
	{
		return 425095546;
	}
	function f2() external view
	override(C0BBBBBBBBBBBBBBB, C0B)
	returns (uint)
	{
		return 851194519;
	}
	function f3() virtual external view
	override(C0BBBB, C0B)
	returns (uint)
	{
		return 1391748448;
	}
	function f4() external payable
	override(C0BBBBBBBBBBBBBBB, C0B)
	returns (uint)
	{
		return 268625699;
	}
	function f5() external pure
	override(C0BBBBBBBBBBBBBBB, C0B)
	returns (uint)
	{
		return 190807059;
	}
	function f6() external pure
	override(C0BBBBBBBBBBBBBBB, C0B)
	returns (uint)
	{
		return 1161007069;
	}
	function f7() virtual external payable
	override(C0BBBBBBBBBBBBBB, C0B)
	returns (uint)
	{
		return 1181057508;
	}
	function f8() external payable
	override(C0BBBBBBBBBBBBBB, C0B)
	returns (uint)
	{
		return 1040552188;
	}
	function f9() external payable
	override(C0BBBBBBBBBBBBBBB, C0BBB)
	returns (uint)
	{
		return 15580725;
	}
	function f10() external payable
	override(C0BBBBBBBBBBBBBBB, C0B)
	returns (uint)
	{
		return 442770701;
	}
	function f11() external view
	override(C0BBBBBBBBBBBBBBB, C0B)
	returns (uint)
	{
		return 246980175;
	}
}


contract C {
	function test() public returns (uint)
	{
			C0 tc0 = new C0();
			if (tc0.f0() != 1925544752)
				return 1;
			if (tc0.f1() != 425095546)
				return 2;
			if (tc0.f10() != 442770701)
				return 3;
			if (tc0.f11() != 246980175)
				return 4;
			if (tc0.f2() != 851194519)
				return 5;
			if (tc0.f3() != 1391748448)
				return 6;
			if (tc0.f4() != 268625699)
				return 7;
			if (tc0.f5() != 190807059)
				return 8;
			if (tc0.f6() != 1161007069)
				return 9;
			if (tc0.f7() != 1181057508)
				return 10;
			if (tc0.f8() != 1040552188)
				return 11;
			if (tc0.f9() != 15580725)
				return 12;
			return 0;
	}
}

