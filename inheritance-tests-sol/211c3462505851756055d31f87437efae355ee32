
pragma solidity >=0.0;









interface I0BBBBBB {

}
interface I0BBBBB is I0BBBBBB {

	function f0() external view returns (uint);
}
interface I0BBBB is I0BBBBB {

}




interface I0BBBBBBBBBB {

}
interface I0BBBBBBBBB is I0BBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I0BBBBBBBB is I0BBBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I0BBBBBBB is I0BBBBB, I0BBBBBBBB {

	function f0() override(I0BBBBB, I0BBBBBBBB)
	external view returns (uint);
}
interface I0BBB is I0BBBB, I0BBBBBBB {

	function f0() override(I0BBBBB, I0BBBBBBB)
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I0BB is I0BBB {

	function f2() external view returns (uint);
}
interface I0B is I0BB {

	function f2() override
	external view returns (uint);
}




interface I0BBBBBBBBBBBBBB {

}
interface I0BBBBBBBBBBBBB is I0BBBBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I0BBBBBBBBBBBB is I0BBBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I0BBBBBBBBBBB is I0B, I0BBBBBBBBBBBB {

	function f0() override(I0BBB, I0BBBBBBBBBBBB)
	external view returns (uint);
}
interface I0 is I0B, I0BBBBBBBBBBB {

	function f0() override(I0BBB, I0BBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
	function f3() external payable returns (uint);
}

interface I2 {

	function f0() external payable returns (uint);
	function f1() external payable returns (uint);
}


contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}

