
pragma solidity >=0.0;






interface I0BBB {

	function f0() external view returns (uint);
}
interface I0BB is I0BBB {

	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
	function f2() external payable returns (uint);
}


interface I0BBBBB {

}
interface I0BBBB is I0BBB, I0BBBBB {

	function f1() external view returns (uint);
}
interface I0B is I0BB, I0BBBB {

	function f0() override(I0BB, I0BBB)
	external view returns (uint);
	function f1() override(I0BB, I0BBBB)
	external view returns (uint);
}
interface I0 is I0B {

	function f0() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() external view returns (uint);
	function f4() external payable returns (uint);
}

contract C1 {

	function f0() external pure
	
	returns (uint)
	{
		return 893378347;
	}
	function f1() external pure
	
	returns (uint)
	{
		return 647072630;
	}
}
library L2 {

	function f0(uint) public view returns (uint)
	{
		return 846930886;
	}
}




interface I4BBB {

	function f0() external view returns (uint);
}
interface I4BB is I4BBB {

}
interface I4B is I4BB {

	function f0() override
	external view returns (uint);
}
interface I4 is I4B {

	function f1() external view returns (uint);
}


abstract contract C5B {

}
contract C5 is C5B {

	function f0() virtual public pure
	
	returns (uint)
	{
		return 1789965960;
	}
}

contract C6 {

	function f0() external pure
	
	returns (uint)
	{
		return 1589801762;
	}
	function f1() private pure
	
	returns (uint)
	{
		return 992727957;
	}
}


contract C {
	using L2 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 846930886)
			return 1;
		return 0;
	}
}

