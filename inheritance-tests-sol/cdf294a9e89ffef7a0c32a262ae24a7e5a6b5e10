
pragma solidity >=0.0;


library L0 {

	function f0(uint) public pure returns (uint)
	{
		return 1804289383;
	}
}







interface C1BBBBBB {

	function f0() external view returns (uint);
}
interface C1BBBBB is C1BBBBBB {

	function f0() override
	external view returns (uint);
}

interface C1BBBBBBB is C1BBBBB {

	function f1() external view returns (uint);
}
interface C1BBBB is C1BBBBB, C1BBBBBBB {

}
contract C1BBB is C1BBBB {

	function f0() external view
	override
	returns (uint)
	{
		return 1596680831;
	}
	function f1() external view
	override
	returns (uint)
	{
		return 1203428207;
	}
}
contract C1BB is C1BBB {

}
contract C1B is C1BB {

}
contract C1 is C1B {

}
library L2 {

	function f0(uint) private pure returns (uint)
	{
		return 1681692777;
	}
	function f1(uint) public view returns (uint)
	{
		return 1714636915;
	}
}

contract C3 {

	function f0() virtual external pure
	
	returns (uint)
	{
		return 1882556969;
	}
}
library L4 {

	function f0(uint) private pure returns (uint)
	{
		return 1957747793;
	}
}







interface C6BBBBBB {

	function f0() external payable returns (uint);
}
interface C6BBBBB is C6BBBBBB {

}
interface C6BBBB is C6BBBBB {

	function f0() override
	external payable returns (uint);
}
interface C6BBB is C6BBBB {

	function f0() override
	external payable returns (uint);
}
interface C6BB is C6BBB {

	function f1() external view returns (uint);
}
interface C6B is C6BB {

	function f0() override
	external payable returns (uint);
	function f1() override
	external view returns (uint);
	function f2() external payable returns (uint);
}
contract C6 is C6B {

	function f0() external payable
	override
	returns (uint)
	{
		return 2010567813;
	}
	function f1() virtual external view
	override
	returns (uint)
	{
		return 662405787;
	}
	function f2() virtual external payable
	override
	returns (uint)
	{
		return 849178936;
	}
}

interface I7 {

	function f0() external payable returns (uint);
}




interface C8BBB {

	function f0() external payable returns (uint);
}
interface C8BB is C8BBB {

}
abstract contract C8B is C8BB {

	function f0() virtual external payable
	override
	returns (uint);
}


abstract contract C8BBBBB {

}
contract C8BBBB is C8BB, C8BBBBB {

	function f0() virtual external payable
	override
	returns (uint)
	{
		return 1287522347;
	}
}
contract C8 is C8B, C8BBBB {

	function f0() virtual external payable
	override(C8BBBB, C8B)
	returns (uint)
	{
		return 1659675143;
	}
}




interface C9BBB {

	function f0() external payable returns (uint);
}
interface C9BB is C9BBB {

}
contract C9B is C9BB {

	function f0() external payable
	override
	returns (uint)
	{
		return 1675824860;
	}
}
contract C9 is C9B {

}


contract C {
	using L0 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1804289383)
			return 1;
		return 0;
	}
}

