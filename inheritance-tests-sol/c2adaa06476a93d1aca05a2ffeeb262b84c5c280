
pragma solidity >=0.0;










interface C0BBBBBBB {

	function f0() external view returns (uint);
}
interface C0BBBBBB is C0BBBBBBB {

	function f1() external view returns (uint);
	function f2() external payable returns (uint);
}
interface C0BBBBB is C0BBBBBB {

	function f0() override
	external view returns (uint);
}
interface C0BBBB is C0BBBBB {

}
interface C0BBB is C0BBBB {

	function f3() external payable returns (uint);
}
interface C0BB is C0BBB {

	function f3() override
	external payable returns (uint);
}
contract C0B is C0BB {

	function f0() external view
	override
	returns (uint)
	{
		return 638022372;
	}
	function f1() external view
	override
	returns (uint)
	{
		return 1931656580;
	}
	function f2() external payable
	override
	returns (uint)
	{
		return 1936030137;
	}
	function f3() virtual external payable
	override
	returns (uint)
	{
		return 353718330;
	}
	function f4() virtual public pure
	
	returns (uint)
	{
		return 1842513780;
	}
}
contract C0 is C0B {

	function f5() virtual public pure
	
	returns (uint)
	{
		return 890442452;
	}
}




interface I1BBB {

	function f0() external view returns (uint);
}
interface I1BB is I1BBB {

	function f1() external view returns (uint);
	function f2() external payable returns (uint);
}


interface I1BBBBB {

}
interface I1BBBB is I1BBB, I1BBBBB {

	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
}
interface I1B is I1BB, I1BBBB {

	function f0() override(I1BBB, I1BBBB)
	external view returns (uint);
	function f1() override(I1BB, I1BBBB)
	external view returns (uint);
	function f2() override
	external payable returns (uint);
}
interface I1 is I1B {

	function f2() override
	external payable returns (uint);
	function f3() external view returns (uint);
	function f4() external payable returns (uint);
}


contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}

