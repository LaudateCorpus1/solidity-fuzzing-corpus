
pragma solidity >=0.0;




interface I0B {

	function f0() external payable returns (uint);
	function f1() external view returns (uint);
}
interface I0 is I0B {

	function f0() override
	external payable returns (uint);
	function f1() override
	external view returns (uint);
}


interface C1B {

	function f0() external payable returns (uint);
}
contract C1 is C1B {

	function f0() external payable
	override
	returns (uint)
	{
		return 1104122143;
	}
}
library L2 {

	function f0(uint) internal pure returns (uint)
	{
		return 1804289383;
	}
}



interface I3BB {

	function f0() external view returns (uint);
}
interface I3B is I3BB {

	function f1() external payable returns (uint);
	function f2() external view returns (uint);
}
interface I3 is I3B {

	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
}
library L4 {

	function f0(uint) private view returns (uint)
	{
		return 846930886;
	}
	function f1(uint) public view returns (uint)
	{
		return 1681692777;
	}
}

contract C5 {

	function f0() public view
	
	returns (uint)
	{
		return 1230473153;
	}
}




interface I6BBB {

	function f0() external view returns (uint);
}
interface I6BB is I6BBB {

}
interface I6B is I6BB {

	function f0() override
	external view returns (uint);
}
interface I6 is I6B {

}


interface I7B {

	function f0() external payable returns (uint);
	function f1() external pure returns (uint);
}




interface I7BBBBB {

	function f0() external payable returns (uint);
}
interface I7BBBB is I7BBBBB {

	function f0() override
	external payable returns (uint);
}
interface I7BBB is I7BBBB {

}
interface I7BB is I7B, I7BBB {

	function f0() override(I7B, I7BBBB)
	external payable returns (uint);
}
interface I7 is I7B, I7BB {

	function f0() override(I7B, I7BB)
	external payable returns (uint);
}




interface C8BBB {

	function f0() external view returns (uint);
}
interface C8BB is C8BBB {

	function f0() override
	external view returns (uint);
}
interface C8B is C8BB {

}

contract C8BBBB is C8BB {

	function f0() virtual external view
	override
	returns (uint)
	{
		return 338112295;
	}
	function f1() virtual public pure
	
	returns (uint)
	{
		return 142874745;
	}
}
contract C8 is C8B, C8BBBB {

	function f0() external view
	override(C8BBBB, C8BB)
	returns (uint)
	{
		return 300243370;
	}
	function f1() public pure
	override
	returns (uint)
	{
		return 1672420416;
	}
}



interface I10BB {

	function f0() external view returns (uint);
}
interface I10B is I10BB {

	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
}
interface I10 is I10B {

}


contract C12B {

}
contract C12 is C12B {

	function f0() public view
	
	returns (uint)
	{
		return 743622584;
	}
}


contract C14B {

	function f0() public view
	
	returns (uint)
	{
		return 1193848993;
	}
}
contract C14 is C14B {

}
library L15 {

	function f0(uint) internal pure returns (uint)
	{
		return 1649760492;
	}
	function f1(uint) public view returns (uint)
	{
		return 596516649;
	}
	function f2(uint) public view returns (uint)
	{
		return 1189641421;
	}
}


contract C {
	function test() public returns (uint)
	{
			C1 tc0 = new C1();
			if (tc0.f0() != 1104122143)
				return 1;
			C12 tc1 = new C12();
			if (tc1.f0() != 743622584)
				return 2;
			C14 tc2 = new C14();
			if (tc2.f0() != 1193848993)
				return 3;
			C14B tc3 = new C14B();
			if (tc3.f0() != 1193848993)
				return 4;
			C5 tc4 = new C5();
			if (tc4.f0() != 1230473153)
				return 5;
			C8 tc5 = new C8();
			if (tc5.f0() != 300243370)
				return 6;
			if (tc5.f1() != 1672420416)
				return 7;
			C8BBBB tc6 = new C8BBBB();
			if (tc6.f0() != 338112295)
				return 8;
			if (tc6.f1() != 142874745)
				return 9;
			return 0;
	}
}

