pragma solidity >=0.0;
interface I0BBBBBBB {
	function f0() external view returns (uint);
}
interface I0BBBBBB is I0BBBBBBB {
	function f0() override
	external view returns (uint);
}
interface I0BBBBBBBB is I0BBBBBBB {
	function f1() external payable returns (uint);
	function f2() external view returns (uint);
}
interface I0BBBBB is I0BBBBBB, I0BBBBBBBB {
	function f0() override(I0BBBBBB, I0BBBBBBB)
	external view returns (uint);
	function f2() override
	external view returns (uint);
}
interface I0BBBBBBBBB is I0BBBBB {
	function f1() override
	external payable returns (uint);
}
interface I0BBBB is I0BBBBB, I0BBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override(I0BBBBBBBB, I0BBBBBBBBB)
	external payable returns (uint);
	function f2() override
	external view returns (uint);
}
interface I0BBB is I0BBBB {
	function f2() override
	external view returns (uint);
}
interface I0BBBBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I0BBBBBBBBBBBBB is I0BBBBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I0BBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
	function f2() external view returns (uint);
}
interface I0BBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBB {
	function f0() override(I0BBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override
	external view returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBB {
}
interface I0BBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBB {
	function f0() override(I0BBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I0BBBBBBBBBBBB is I0BBBBBBBBBBBBB, I0BBBBBBBBBBBBBBB {
	function f0() override(I0BBBBBBBBBBBBB, I0BBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
}
interface I0BBBBBBBBBBB is I0BBBBBBBBBBBB {
	function f1() override
	external payable returns (uint);
}
interface I0BBBBBBBBBB is I0BBBB, I0BBBBBBBBBBB {
	function f0() override(I0BBBB, I0BBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I0BBBB, I0BBBBBBBBBBB)
	external payable returns (uint);
	function f2() override(I0BBBB, I0BBBBBBBBBBBB)
	external view returns (uint);
}
interface I0BB is I0BBB, I0BBBBBBBBBB {
	function f0() override(I0BBBB, I0BBBBBBBBBB)
	external view returns (uint);
	function f1() override(I0BBBB, I0BBBBBBBBBB)
	external payable returns (uint);
	function f2() override(I0BBB, I0BBBBBBBBBB)
	external view returns (uint);
}
interface I0B is I0BB {
	function f0() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f3() external payable returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBBBBB is I0B {
	function f2() override
	external view returns (uint);
	function f4() external pure returns (uint);
}
interface I0 is I0B, I0BBBBBBBBBBBBBBBBBBBBB {
	function f1() override
	external payable returns (uint);
	function f2() override(I0B, I0BBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f3() override
	external payable returns (uint);
	function f4() override
	external pure returns (uint);
}
contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}
