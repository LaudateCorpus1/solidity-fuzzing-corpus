pragma solidity >=0.0;
interface C0BB {
	function f0() external view returns (uint);
}
interface C0B is C0BB {
	function f0() override
	external view returns (uint);
}
contract C0 is C0B {
	function f0() external view
	override
	returns (uint)
	{
		return 1104122143;
	}
}
interface C1BB {
	function f0() external payable returns (uint);
}
interface C1B is C1BB {
}
contract C1 is C1B {
	function f0() external payable
	override
	returns (uint)
	{
		return 2077369900;
	}
}
library L2 {
	function f0(uint) internal view returns (uint)
	{
		return 1804289383;
	}
}
interface I3BB {
	function f0() external payable returns (uint);
}
interface I3B is I3BB {
	function f0() override
	external payable returns (uint);
	function f1() external payable returns (uint);
}
interface I3 is I3B {
}
interface C5BBB {
	function f0() external payable returns (uint);
}
interface C5BB is C5BBB {
	function f0() override
	external payable returns (uint);
}
interface C5B is C5BB {
}
interface C5BBBBBB {
	function f0() external payable returns (uint);
}
interface C5BBBBB is C5BBBBBB {
}
interface C5BBBB is C5B, C5BBBBB {
	function f0() override(C5BB, C5BBBBBB)
	external payable returns (uint);
}
contract C5 is C5B, C5BBBB {
	function f0() external payable
	override(C5BBBB, C5BB)
	returns (uint)
	{
		return 1062464241;
	}
}
library L6 {
	function f0(uint) public view returns (uint)
	{
		return 1681692777;
	}
	function f1(uint) internal pure returns (uint)
	{
		return 1714636915;
	}
	function f2(uint) external pure returns (uint)
	{
		return 1957747793;
	}
	function f3(uint) internal pure returns (uint)
	{
		return 424238335;
	}
	function f4(uint) external pure returns (uint)
	{
		return 719885386;
	}
}
library L7 {
	function f0(uint) internal view returns (uint)
	{
		return 1649760492;
	}
	function f1(uint) public view returns (uint)
	{
		return 596516649;
	}
	function f2(uint) public view returns (uint)
	{
		return 1189641421;
	}
}
interface I8BBBBBB {
	function f0() external pure returns (uint);
}
interface I8BBBBB is I8BBBBBB {
}
interface I8BBBB is I8BBBBB {
}
interface I8BBB is I8BBBB {
	function f1() external view returns (uint);
}
interface I8BB is I8BBB {
	function f0() override
	external pure returns (uint);
}
interface I8B is I8BB {
	function f0() override
	external pure returns (uint);
}
interface I8BBBBBBBBBBBB {
	function f0() external pure returns (uint);
}
interface I8BBBBBBBBBBB is I8BBBBBBBBBBBB {
	function f0() override
	external pure returns (uint);
}
interface I8BBBBBBBBBB is I8BBBBBBBBBBB {
	function f0() override
	external pure returns (uint);
}
interface I8BBBBBBBBB is I8BBBBBBBBBB {
}
interface I8BBBBBBBB is I8BBBBBBBBB {
	function f0() override
	external pure returns (uint);
}
interface I8BBBBBBB is I8B, I8BBBBBBBB {
	function f0() override(I8B, I8BBBBBBBB)
	external pure returns (uint);
	function f1() override
	external view returns (uint);
}
interface I8BBBBBBBBBBBBBBBBBB {
	function f0() external pure returns (uint);
}
interface I8BBBBBBBBBBBBBBBBB is I8BBBBBBBBBBBBBBBBBB {
	function f0() override
	external pure returns (uint);
}
interface I8BBBBBBBBBBBBBBBB is I8BBBBBBBBBBBBBBBBB {
}
interface I8BBBBBBBBBBBBBBB is I8BBBBBBBBBBBBBBBB {
	function f0() override
	external pure returns (uint);
}
interface I8BBBBBBBBBBBBBB is I8BBBBBBBBBBBBBBB {
}
interface I8BBBBBBBBBBBBB is I8BBBBBBBB, I8BBBBBBBBBBBBBB {
	function f0() override(I8BBBBBBBB, I8BBBBBBBBBBBBBBB)
	external pure returns (uint);
}
interface I8 is I8B, I8BBBBBBB, I8BBBBBBBBBBBBB {
	function f0() override(I8B, I8BBBBBBB, I8BBBBBBBBBBBBB)
	external pure returns (uint);
	function f1() override(I8BBB, I8BBBBBBB)
	external view returns (uint);
}
interface C11BBBBBBBB {
	function f0() external view returns (uint);
}
interface C11BBBBBBB is C11BBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface C11BBBBBB is C11BBBBBBB {
	function f0() override
	external view returns (uint);
}
interface C11BBBBB is C11BBBBBB {
	function f0() override
	external view returns (uint);
}
interface C11BBBB is C11BBBBB {
	function f0() override
	external view returns (uint);
}
interface C11BBB is C11BBBB {
	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface C11BB is C11BBB {
	function f0() override
	external view returns (uint);
}
contract C11B is C11BB {
	function f0() virtual external view
	override
	returns (uint)
	{
		return 991253247;
	}
	function f1() virtual external payable
	override
	returns (uint)
	{
		return 673977041;
	}
}
abstract contract C11 is C11B {
	function f0() external view
	override
	returns (uint)
	{
		return 527087207;
	}
	function f1() virtual external payable
	override
	returns (uint)
	{
		return 341301947;
	}
}
library L12 {
	function f0(uint) private pure returns (uint)
	{
		return 783368690;
	}
}
contract C {
	function test() public returns (uint)
	{
			C0 tc0 = new C0();
			if (tc0.f0() != 1104122143)
				return 1;
			C1 tc1 = new C1();
			if (tc1.f0() != 2077369900)
				return 2;
			C11B tc2 = new C11B();
			if (tc2.f0() != 991253247)
				return 3;
			if (tc2.f1() != 673977041)
				return 4;
			C5 tc3 = new C5();
			if (tc3.f0() != 1062464241)
				return 5;
			return 0;
	}
}
