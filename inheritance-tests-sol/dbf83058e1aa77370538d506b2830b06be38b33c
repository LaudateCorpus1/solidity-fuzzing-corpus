pragma solidity >=0.0;
interface I0BBBB {
	function f0() external payable returns (uint);
}
interface I0BBB is I0BBBB {
}
interface I0BB is I0BBB {
	function f0() override
	external payable returns (uint);
	function f1() external view returns (uint);
}
interface I0B is I0BB {
}
interface I0BBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I0BBBBBBBB is I0BBBBBBBBB {
}
interface I0BBBBBBB is I0BBBBBBBB {
}
interface I0BBBBBBBBBB is I0BBBBBBB {
	function f1() external view returns (uint);
}
interface I0BBBBBB is I0BBBBBBB, I0BBBBBBBBBB {
	function f2() external pure returns (uint);
}
interface I0BBBBB is I0BB, I0BBBBBB {
	function f0() override(I0BB, I0BBBBBBBBB)
	external payable returns (uint);
	function f1() override(I0BB, I0BBBBBBBBBB)
	external view returns (uint);
}
interface I0 is I0B, I0BBBBB {
	function f0() override(I0BB, I0BBBBB)
	external payable returns (uint);
	function f1() override(I0BB, I0BBBBB)
	external view returns (uint);
	function f3() external view returns (uint);
}
interface I1BBBB {
	function f0() external payable returns (uint);
}
interface I1BBB is I1BBBB {
}
interface I1BB is I1BBB {
	function f1() external view returns (uint);
}
interface I1B is I1BB {
}
interface I1BBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I1BBBBBBBB is I1BBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I1BBBBBBB is I1BBBBBBBB {
}
interface I1BBBBBBBBBB is I1BBBBBBBB {
	function f1() external view returns (uint);
}
interface I1BBBBBB is I1BBBBBBB, I1BBBBBBBBBB {
	function f1() override
	external view returns (uint);
	function f2() external view returns (uint);
}
interface I1BBBBB is I1BB, I1BBBBBB {
	function f0() override(I1BBBB, I1BBBBBBBB)
	external payable returns (uint);
	function f1() override(I1BB, I1BBBBBB)
	external view returns (uint);
}
interface I1 is I1B, I1BBBBB {
	function f0() override(I1BBBB, I1BBBBB)
	external payable returns (uint);
	function f1() override(I1BB, I1BBBBB)
	external view returns (uint);
	function f3() external view returns (uint);
}
interface I2 {
	function f0() external pure returns (uint);
}
interface I3B {
	function f0() external payable returns (uint);
}
interface I3BBBBBBBB {
	function f0() external payable returns (uint);
}
interface I3BBBBBBB is I3BBBBBBBB {
	function f1() external view returns (uint);
}
interface I3BBBBBB is I3BBBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external view returns (uint);
}
interface I3BBBBBBBBBB {
}
interface I3BBBBBBBBB is I3BBBBBBB, I3BBBBBBBBBB {
	function f1() override
	external view returns (uint);
}
interface I3BBBBB is I3BBBBBB, I3BBBBBBBBB {
	function f0() override(I3BBBBBB, I3BBBBBBBB)
	external payable returns (uint);
	function f1() override(I3BBBBBB, I3BBBBBBBBB)
	external view returns (uint);
}
interface I3BBBB is I3BBBBB {
	function f0() override
	external payable returns (uint);
}
interface I3BBB is I3BBBB {
	function f1() override
	external view returns (uint);
}
interface I3BBBBBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I3BBBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBBB {
}
interface I3BBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBB {
}
interface I3BBBBBBBBBBBBB is I3BBBBBBBBBBBBBB {
}
interface I3BBBBBBBBBBBB is I3BBBBBBBBBBBBB {
}
interface I3BBBBBBBBBBB is I3BBB, I3BBBBBBBBBBBB {
	function f0() override(I3BBBB, I3BBBBBBBBBBBBBBBB)
	external payable returns (uint);
}
interface I3BB is I3B, I3BBB, I3BBBBBBBBBBB {
	function f0() override(I3B, I3BBBB, I3BBBBBBBBBBB)
	external payable returns (uint);
}
interface I3BBBBBBBBBBBBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I3BBBBBBBBBBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBBBBBBBBBB {
	function f1() external view returns (uint);
}
interface I3BBBBBBBBBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBBBBBBBBB {
}
interface I3BBBBBBBBBBBBBBBBBBBBBBBBB {
}
interface I3BBBBBBBBBBBBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBBBBBBBBB, I3BBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external view returns (uint);
}
interface I3BBBBBBBBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBBBBBBBB, I3BBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I3BBBBBBBBBBBBBBBBBBBBBBB, I3BBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I3BBBBBBBBBBBBBBBBBBBBBB, I3BBBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
}
interface I3BBBBBBBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBBBBBBB {
	function f1() override
	external view returns (uint);
}
interface I3BBBBBBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I3BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I3BBBBBBBBBBBBBBBBBBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
}
interface I3BBBBBBBBBBBBBBBBBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
}
interface I3BBBBBBBBBBBBBBBBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I3BBBBBBBBBBBBBBBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBBBBBBBBBBBBBBB {
}
interface I3BBBBBBBBBBBBBBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBBBBBB, I3BBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I3BBBBBBBBBBBBBBBBBBBB, I3BBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override
	external view returns (uint);
}
interface I3BBBBBBBBBBBBBBBBB is I3B, I3BBBBBBBBBBBBBBBBBB, I3BBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I3B, I3BBBBBBBBBBBBBBBBBB, I3BBBBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I3BBBBBBBBBBBBBBBBBBB, I3BBBBBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
}
interface I3 is I3B, I3BB, I3BBBBBBBBBBBBBBBBB {
	function f0() override(I3B, I3BB, I3BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I3BBB, I3BBBBBBBBBBBBBBBBB)
	external view returns (uint);
}
interface I4BBBBB {
	function f0() external payable returns (uint);
}
interface I4BBBB is I4BBBBB {
	function f0() override
	external payable returns (uint);
}
interface I4BBB is I4BBBB {
	function f0() override
	external payable returns (uint);
}
interface I4BBBBBB is I4BBB {
	function f1() external view returns (uint);
}
interface I4BB is I4BBB, I4BBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external view returns (uint);
	function f2() external pure returns (uint);
}
interface I4B is I4BB {
}
interface I4BBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I4BBBBBBBBB is I4BBBBBBBBBB {
}
interface I4BBBBBBBB is I4BBBBBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() external view returns (uint);
}
interface I4BBBBBBB is I4BB, I4BBBBBBBB {
	function f0() override(I4BB, I4BBBBBBBB)
	external payable returns (uint);
	function f1() override(I4BB, I4BBBBBBBB)
	external view returns (uint);
	function f2() override
	external pure returns (uint);
}
interface I4BBBBBBBBBBB is I4BBBBBBB {
}
interface I4 is I4B, I4BBBBBBB, I4BBBBBBBBBBB {
	function f0() override(I4BB, I4BBBBBBB)
	external payable returns (uint);
	function f1() override(I4BB, I4BBBBBBB)
	external view returns (uint);
	function f2() override(I4BB, I4BBBBBBB)
	external pure returns (uint);
}
interface I5BBB {
	function f0() external view returns (uint);
}
interface I5BB is I5BBB {
}
interface I5B is I5BB {
}
interface I5BBBB is I5BB {
	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I5 is I5B, I5BBBB {
	function f0() override(I5BBB, I5BBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() external view returns (uint);
}
library L6 {
	function f0(uint) external pure returns (uint)
	{
		return 2044897763;
	}
}
library L7 {
	function f0(uint) private pure returns (uint)
	{
		return 1967513926;
	}
	function f1(uint) internal pure returns (uint)
	{
		return 1365180540;
	}
}
contract C {
	using L6 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 2044897763)
			return 1;
		return 0;
	}
}
