
pragma solidity >=0.0;


library L0 {

	function f0(uint) public view returns (uint)
	{
		return 1804289383;
	}
}





interface I1BBBB {

	function f0() external payable returns (uint);
}
interface I1BBB is I1BBBB {

	function f0() override
	external payable returns (uint);
}
interface I1BB is I1BBB {

}




interface I1BBBBBBBB {

	function f0() external payable returns (uint);
}
interface I1BBBBBBB is I1BBBBBBBB {

}
interface I1BBBBBB is I1BBBBBBB {

}
interface I1BBBBB is I1BB, I1BBBBBB {

	function f0() override(I1BBB, I1BBBBBBBB)
	external payable returns (uint);
}
interface I1B is I1BB, I1BBBBB {

	function f0() override(I1BBB, I1BBBBB)
	external payable returns (uint);
}
interface I1 is I1B {

}
library L2 {

	function f0(uint) private pure returns (uint)
	{
		return 1681692777;
	}
}





interface I3BBBB {

	function f0() external payable returns (uint);
}
interface I3BBB is I3BBBB {

}
interface I3BB is I3BBB {

}




interface I3BBBBBBBB {

	function f0() external payable returns (uint);
}
interface I3BBBBBBB is I3BBBBBBBB {

}
interface I3BBBBBB is I3BBBBBBB {

}
interface I3BBBBB is I3BBB, I3BBBBBB {

	function f0() override(I3BBBB, I3BBBBBBBB)
	external payable returns (uint);
}
interface I3B is I3BB, I3BBBBB {

	function f0() override(I3BBBB, I3BBBBB)
	external payable returns (uint);
}
interface I3 is I3B {

	function f0() override
	external payable returns (uint);
}


contract C {
	using L0 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1804289383)
			return 1;
		return 0;
	}
}

