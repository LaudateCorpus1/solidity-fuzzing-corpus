
pragma solidity >=0.0;








interface I0BBBBB {

	function f0() external view returns (uint);
}
interface I0BBBB is I0BBBBB {

	function f0() override
	external view returns (uint);
}




interface I0BBBBBBBBB {

	function f0() external view returns (uint);
}
interface I0BBBBBBBB is I0BBBBBBBBB {

}

interface I0BBBBBBBBBB is I0BBBBBBBB {

	function f1() external payable returns (uint);
	function f2() external view returns (uint);
}
interface I0BBBBBBB is I0BBBBBBBB, I0BBBBBBBBBB {

	function f2() override
	external view returns (uint);
}

interface I0BBBBBBBBBBB is I0BBBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
}
interface I0BBBBBB is I0BBBBB, I0BBBBBBB, I0BBBBBBBBBBB {

	function f0() override(I0BBBBB, I0BBBBBBBBB, I0BBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I0BBBBBBBBBB, I0BBBBBBBBBBB)
	external payable returns (uint);
	function f2() override(I0BBBBBBB, I0BBBBBBBBBBB)
	external view returns (uint);
}
interface I0BBB is I0BBBB, I0BBBBBB {

	function f0() override(I0BBBB, I0BBBBBB)
	external view returns (uint);
	function f2() override
	external view returns (uint);
}





interface I0BBBBBBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I0BBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
}




interface I0BBBBBBBBBBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
}

interface I0BBBBBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
	function f2() external view returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBB {

	function f0() override(I0BBBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override
	external view returns (uint);
}

interface I0BBBBBBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBB {

	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
}
interface I0BBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBBB {

	function f0() override(I0BBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I0BBBBBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f2() override(I0BBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
}
interface I0BBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBB {

	function f0() override(I0BBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
}
interface I0BBBBBBBBBBBBB is I0BBBBBBBBBBBBBB {

	function f1() override
	external payable returns (uint);
}
interface I0BBBBBBBBBBBB is I0BBBBBB, I0BBBBBBBBBBBBB {

	function f0() override(I0BBBBBB, I0BBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I0BBBBBB, I0BBBBBBBBBBBBB)
	external payable returns (uint);
	function f2() override(I0BBBBBB, I0BBBBBBBBBBBBBB)
	external view returns (uint);
}
interface I0BB is I0BBB, I0BBBBBBBBBBBB {

	function f0() override(I0BBB, I0BBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I0BBBBBB, I0BBBBBBBBBBBB)
	external payable returns (uint);
	function f2() override(I0BBB, I0BBBBBBBBBBBB)
	external view returns (uint);
}
interface I0B is I0BB {

	function f0() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f3() external payable returns (uint);
}

interface I0BBBBBBBBBBBBBBBBBBBBBBB is I0B {

	function f2() override
	external view returns (uint);
	function f4() external pure returns (uint);
}
interface I0 is I0B, I0BBBBBBBBBBBBBBBBBBBBBBB {

	function f1() override
	external payable returns (uint);
	function f2() override(I0B, I0BBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f3() override
	external payable returns (uint);
	function f4() override
	external pure returns (uint);
}


contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}

