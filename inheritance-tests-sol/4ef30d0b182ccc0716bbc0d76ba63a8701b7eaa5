pragma solidity >=0.0;
interface I0BBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I0BBBBBBBBB is I0BBBBBBBBBB {
}
interface I0BBBBBBBBBBB is I0BBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I0BBBBBBBB is I0BBBBBBBBB, I0BBBBBBBBBBB {
	function f0() override(I0BBBBBBBBBB, I0BBBBBBBBBBB)
	external view returns (uint);
	function f2() external payable returns (uint);
	function f3() external view returns (uint);
}
interface I0BBBBBBB is I0BBBBBBBB {
}
interface I0BBBBBB is I0BBBBBBB {
}
interface I0BBBBB is I0BBBBBB {
	function f1() override
	external payable returns (uint);
}
interface I0BBBB is I0BBBBB {
	function f1() override
	external payable returns (uint);
}
interface I0BBBBBBBBBBBB is I0BBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f4() external payable returns (uint);
}
interface I0BBB is I0BBBB, I0BBBBBBBBBBBB {
	function f0() override(I0BBBBBBBB, I0BBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I0BBBB, I0BBBBBBBBBBBB)
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() external view returns (uint);
}
interface I0BB is I0BBB {
	function f1() override
	external payable returns (uint);
	function f5() override
	external view returns (uint);
}
interface I0B is I0BB {
	function f2() override
	external payable returns (uint);
	function f5() override
	external view returns (uint);
}
interface I0 is I0B {
	function f0() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f5() override
	external view returns (uint);
}
contract C1 {
	function f0() external pure
	
	returns (uint)
	{
		return 674592135;
	}
	function f1() private pure
	
	returns (uint)
	{
		return 942409124;
	}
}
interface I2BBBBB {
	function f0() external view returns (uint);
}
interface I2BBBB is I2BBBBB {
}
interface I2BBB is I2BBBB {
	function f1() external payable returns (uint);
}
interface I2BB is I2BBB {
}
interface I2B is I2BB {
	function f0() override
	external view returns (uint);
}
interface I2 is I2B {
}
interface I3BBB {
}
interface I3BB is I3BBB {
	function f0() external view returns (uint);
}
interface I3B is I3BB {
	function f0() override
	external view returns (uint);
}
interface I3BBBBBB {
	function f0() external view returns (uint);
}
interface I3BBBBB is I3BBBBBB {
	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I3BBBB is I3BB, I3BBBBB {
	function f0() override(I3BB, I3BBBBB)
	external view returns (uint);
}
interface I3 is I3B, I3BBBB {
	function f0() override(I3B, I3BBBB)
	external view returns (uint);
	function f2() external payable returns (uint);
}
contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}
