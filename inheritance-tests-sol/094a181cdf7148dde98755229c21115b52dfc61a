pragma solidity >=0.0;
interface I0BBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I0BBBBBBBBB is I0BBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
}
interface I0BBBBBBBBBBB is I0BBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
}
interface I0BBBBBBBB is I0BBBBBBBBB, I0BBBBBBBBBBB {
	function f0() override(I0BBBBBBBBB, I0BBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I0BBBBBBBBB, I0BBBBBBBBBBB)
	external view returns (uint);
	function f2() external payable returns (uint);
	function f3() external view returns (uint);
}
interface I0BBBBBBB is I0BBBBBBBB {
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
}
interface I0BBBBBB is I0BBBBBBB {
	function f0() override
	external view returns (uint);
}
interface I0BBBBB is I0BBBBBB {
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f4() external payable returns (uint);
	function f5() external view returns (uint);
}
interface I0BBBB is I0BBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
}
interface I0BBBBBBBBBBBB is I0BBBB {
	function f1() override
	external view returns (uint);
	function f6() external payable returns (uint);
}
interface I0BBB is I0BBBB, I0BBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override(I0BBBB, I0BBBBBBBBBBBB)
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f5() override
	external view returns (uint);
	function f6() override
	external payable returns (uint);
	function f7() external payable returns (uint);
}
interface I0BB is I0BBB {
	function f0() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f5() override
	external view returns (uint);
	function f6() override
	external payable returns (uint);
}
interface I0B is I0BB {
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f6() override
	external payable returns (uint);
	function f7() override
	external payable returns (uint);
}
interface I0BBBBBBBBBBBBB is I0BB {
	function f3() override
	external view returns (uint);
	function f5() override
	external view returns (uint);
	function f6() override
	external payable returns (uint);
	function f7() override
	external payable returns (uint);
	function f8() external payable returns (uint);
}
interface I0 is I0B, I0BBBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override(I0B, I0BBB)
	external view returns (uint);
	function f2() override(I0B, I0BB)
	external payable returns (uint);
	function f3() override(I0B, I0BBBBBBBBBBBBB)
	external view returns (uint);
	function f4() override(I0B, I0BBBBB)
	external payable returns (uint);
	function f5() override(I0BB, I0BBBBBBBBBBBBB)
	external view returns (uint);
	function f6() override(I0B, I0BBBBBBBBBBBBB)
	external payable returns (uint);
	function f7() override(I0B, I0BBBBBBBBBBBBB)
	external payable returns (uint);
}
interface C1BBB {
	function f0() external view returns (uint);
	function f1() external payable returns (uint);
}
interface C1BB is C1BBB {
	function f1() override
	external payable returns (uint);
}
interface C1B is C1BB {
	function f0() override
	external view returns (uint);
}
interface C1BBBBBBBB {
	function f0() external view returns (uint);
}
interface C1BBBBBBB is C1BBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface C1BBBBBB is C1BBBBBBB {
	function f0() override
	external view returns (uint);
}
interface C1BBBBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface C1BBBBBBBBBBBBB is C1BBBBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface C1BBBBBBBBBBBB is C1BBBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface C1BBBBBBBBBBB is C1BBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface C1BBBBBBBBBBBBBBBBB {
}
interface C1BBBBBBBBBBBBBBBB is C1BBBBBBBBBBBBBBBBB {
}
interface C1BBBBBBBBBBBBBBB is C1BBBBBBBBBBBB, C1BBBBBBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface C1BBBBBBBBBB is C1BBBBBBBBBBB, C1BBBBBBBBBBBBBBB {
	function f0() override(C1BBBBBBBBBBB, C1BBBBBBBBBBBBBBB)
	external view returns (uint);
}
interface C1BBBBBBBBB is C1BBBBBBB, C1BBBBBBBBBB {
	function f0() override(C1BBBBBBB, C1BBBBBBBBBB)
	external view returns (uint);
}
interface C1BBBBB is C1BBBBBB, C1BBBBBBBBB {
	function f0() override(C1BBBBBB, C1BBBBBBBBB)
	external view returns (uint);
}
interface C1BBBB is C1BB, C1BBBBB {
	function f0() override(C1BBB, C1BBBBB)
	external view returns (uint);
}
contract C1 is C1B, C1BBBB {
	function f0() virtual external view
	override(C1BBBB, C1B)
	returns (uint)
	{
		return 599633350;
	}
	function f1() virtual external payable
	override
	returns (uint)
	{
		return 727168976;
	}
}
contract C3B {
}
contract C3BB is C3B {
	function f0() public view
	
	returns (uint)
	{
		return 553430281;
	}
}
contract C3 is C3B, C3BB {
}
contract C4 {
	function f0() virtual public view
	
	returns (uint)
	{
		return 480174910;
	}
}
contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}
