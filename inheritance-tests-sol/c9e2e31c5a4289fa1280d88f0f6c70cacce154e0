pragma solidity >=0.0;
interface I0B {
	function f0() external payable returns (uint);
}
interface I0BBB {
	function f0() external payable returns (uint);
}
interface I0BB is I0B, I0BBB {
	function f0() override(I0B, I0BBB)
	external payable returns (uint);
}
interface I0 is I0B, I0BB {
	function f0() override(I0B, I0BB)
	external payable returns (uint);
}
library L1 {
	function f0(uint) public view returns (uint)
	{
		return 846930886;
	}
}
interface I2BBBB {
	function f0() external payable returns (uint);
}
interface I2BBB is I2BBBB {
	function f0() override
	external payable returns (uint);
}
interface I2BB is I2BBB {
}
interface I2BBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I2BBBBBBBBB is I2BBBBBBBBBB {
}
interface I2BBBBBBBB is I2BBBBBBBBB {
}
interface I2BBBBBBB is I2BBBBBBBB {
	function f1() external view returns (uint);
}
interface I2BBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I2BBBBBBBBBBB is I2BBBBBBBB, I2BBBBBBBBBBBB {
	function f0() override(I2BBBBBBBBBB, I2BBBBBBBBBBBB)
	external payable returns (uint);
}
interface I2BBBBBB is I2BBBBBBB, I2BBBBBBBBBBB {
	function f0() override(I2BBBBBBBBBB, I2BBBBBBBBBBB)
	external payable returns (uint);
}
interface I2BBBBB is I2BBB, I2BBBBBB {
	function f0() override(I2BBB, I2BBBBBB)
	external payable returns (uint);
}
interface I2B is I2BB, I2BBBBB {
	function f0() override(I2BBB, I2BBBBB)
	external payable returns (uint);
	function f1() override
	external view returns (uint);
}
interface I2 is I2B {
	function f1() override
	external view returns (uint);
}
contract C {
	using L1 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 846930886)
			return 1;
		return 0;
	}
}
