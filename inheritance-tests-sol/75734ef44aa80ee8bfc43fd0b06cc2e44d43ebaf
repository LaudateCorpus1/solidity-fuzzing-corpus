pragma solidity >=0.0;
library L0 {
	function f0(uint) public pure returns (uint)
	{
		return 1804289383;
	}
}
library L1 {
	function f0(uint) public pure returns (uint)
	{
		return 846930886;
	}
	function f1(uint) public view returns (uint)
	{
		return 1681692777;
	}
}
library L2 {
	function f0(uint) internal pure returns (uint)
	{
		return 1714636915;
	}
}
library L3 {
	function f0(uint) external pure returns (uint)
	{
		return 1957747793;
	}
	function f1(uint) internal pure returns (uint)
	{
		return 424238335;
	}
}
interface C4BB {
	function f0() external payable returns (uint);
}
interface C4B is C4BB {
	function f0() override
	external payable returns (uint);
}
interface C4BBBBB {
}
interface C4BBBBBBB {
	function f0() external payable returns (uint);
	function f1() external payable returns (uint);
}
interface C4BBBBBB is C4BBBBB, C4BBBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface C4BBBB is C4BBBBB, C4BBBBBB {
	function f1() override
	external payable returns (uint);
}
interface C4BBB is C4B, C4BBBB {
	function f0() override(C4B, C4BBBBBB)
	external payable returns (uint);
}
contract C4 is C4B, C4BBB {
	function f0() virtual external payable
	override(C4BBB, C4B)
	returns (uint)
	{
		return 769429449;
	}
	function f1() virtual external payable
	override
	returns (uint)
	{
		return 1055691416;
	}
}
interface C5BBB {
	function f0() external payable returns (uint);
}
interface C5BB is C5BBB {
}
abstract contract C5B is C5BB {
	function f0() virtual external payable
	override
	returns (uint);
}
contract C5 is C5B {
	function f0() external payable
	override
	returns (uint)
	{
		return 1943064494;
	}
}
library L6 {
	function f0(uint) internal pure returns (uint)
	{
		return 596516649;
	}
}
interface I7BBB {
	function f0() external payable returns (uint);
}
interface I7BB is I7BBB {
	function f0() override
	external payable returns (uint);
}
interface I7B is I7BB {
}
interface I7 is I7B {
	function f0() override
	external payable returns (uint);
}
interface C8BBB {
	function f0() external payable returns (uint);
}
interface C8BB is C8BBB {
	function f0() override
	external payable returns (uint);
}
abstract contract C8B is C8BB {
	function f0() virtual external payable
	override
	returns (uint);
}
contract C8 is C8B {
	function f0() virtual external payable
	override
	returns (uint)
	{
		return 148120656;
	}
}
interface I9 {
	function f0() external payable returns (uint);
}
interface I10BB {
	function f0() external view returns (uint);
}
interface I10B is I10BB {
	function f1() external payable returns (uint);
}
interface I10 is I10B {
	function f0() override
	external view returns (uint);
}
library L11 {
	function f0(uint) internal pure returns (uint)
	{
		return 1189641421;
	}
}
library L12 {
	function f0(uint) public pure returns (uint)
	{
		return 1025202362;
	}
}
library L13 {
	function f0(uint) external pure returns (uint)
	{
		return 1350490027;
	}
	function f1(uint) external pure returns (uint)
	{
		return 783368690;
	}
}
contract C {
	function test() public returns (uint)
	{
			C4 tc0 = new C4();
			if (tc0.f0() != 769429449)
				return 1;
			if (tc0.f1() != 1055691416)
				return 2;
			C5 tc1 = new C5();
			if (tc1.f0() != 1943064494)
				return 3;
			C8 tc2 = new C8();
			if (tc2.f0() != 148120656)
				return 4;
			return 0;
	}
}
