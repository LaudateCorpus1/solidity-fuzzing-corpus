
pragma solidity >=0.0;













interface I1BBBBBBBBBB {

	function f0() external payable returns (uint);
}
interface I1BBBBBBBBB is I1BBBBBBBBBB {

	function f0() override
	external payable returns (uint);
	function f1() external view returns (uint);
	function f2() external view returns (uint);
}
interface I1BBBBBBBB is I1BBBBBBBBB {

	function f3() external payable returns (uint);
}
interface I1BBBBBBB is I1BBBBBBBB {

}

interface I1BBBBBBBBBBB is I1BBBBBBBB {

	function f4() external payable returns (uint);
}
interface I1BBBBBB is I1BBBBBBB, I1BBBBBBBBBBB {

	function f2() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() external payable returns (uint);
	function f6() external view returns (uint);
	function f7() external payable returns (uint);
}
interface I1BBBBB is I1BBBBBB {

	function f1() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override
	external payable returns (uint);
	function f7() override
	external payable returns (uint);
	function f8() external payable returns (uint);
}
interface I1BBBB is I1BBBBB {

	function f0() override
	external payable returns (uint);
	function f1() override
	external view returns (uint);
	function f3() override
	external payable returns (uint);
	function f7() override
	external payable returns (uint);
	function f8() override
	external payable returns (uint);
}

interface I1BBBBBBBBBBBB is I1BBBBB {

	function f1() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f6() override
	external view returns (uint);
	function f8() override
	external payable returns (uint);
	function f9() external payable returns (uint);
}
interface I1BBB is I1BBBB, I1BBBBBBBBBBBB {

	function f0() override(I1BBBB, I1BBBBBBBBB)
	external payable returns (uint);
	function f1() override(I1BBBB, I1BBBBBBBBBBBB)
	external view returns (uint);
	function f3() override(I1BBBB, I1BBBBB)
	external payable returns (uint);
	function f4() override(I1BBBBBB, I1BBBBBBBBBBBB)
	external payable returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() override(I1BBBBBB, I1BBBBBBBBBBBB)
	external view returns (uint);
	function f7() override(I1BBBB, I1BBBBB)
	external payable returns (uint);
	function f8() override(I1BBBB, I1BBBBBBBBBBBB)
	external payable returns (uint);
	function f10() external payable returns (uint);
	function f11() external view returns (uint);
	function f12() external payable returns (uint);
}
interface I1BB is I1BBB {

	function f3() override
	external payable returns (uint);
	function f7() override
	external payable returns (uint);
	function f9() override
	external payable returns (uint);
	function f12() override
	external payable returns (uint);
}
interface I1B is I1BB {

	function f0() override
	external payable returns (uint);
	function f1() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f6() override
	external view returns (uint);
	function f8() override
	external payable returns (uint);
	function f10() override
	external payable returns (uint);
	function f12() override
	external payable returns (uint);
}

interface I1BBBBBBBBBBBBB is I1BB {

	function f0() override
	external payable returns (uint);
	function f3() override
	external payable returns (uint);
	function f4() override
	external payable returns (uint);
	function f6() override
	external view returns (uint);
	function f7() override
	external payable returns (uint);
	function f8() override
	external payable returns (uint);
	function f9() override
	external payable returns (uint);
	function f12() override
	external payable returns (uint);
	function f13() external payable returns (uint);
}
interface I1 is I1B, I1BBBBBBBBBBBBB {

	function f0() override(I1B, I1BBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I1B, I1BBB)
	external view returns (uint);
	function f3() override(I1BB, I1BBBBBBBBBBBBB)
	external payable returns (uint);
	function f4() override(I1B, I1BBBBBBBBBBBBB)
	external payable returns (uint);
	function f6() override(I1B, I1BBBBBBBBBBBBB)
	external view returns (uint);
	function f7() override(I1BB, I1BBBBBBBBBBBBB)
	external payable returns (uint);
	function f8() override(I1B, I1BBBBBBBBBBBBB)
	external payable returns (uint);
	function f9() override(I1BB, I1BBBBBBBBBBBBB)
	external payable returns (uint);
	function f10() override(I1B, I1BBB)
	external payable returns (uint);
	function f12() override(I1B, I1BBBBBBBBBBBBB)
	external payable returns (uint);
}
library L2 {

	function f0(uint) public view returns (uint)
	{
		return 424238335;
	}
	function f1(uint) internal pure returns (uint)
	{
		return 719885386;
	}
}

contract C3 {

	function f0() public view
	
	returns (uint)
	{
		return 1161007069;
	}
}



interface I4BB {

	function f0() external payable returns (uint);
}
interface I4B is I4BB {

	function f0() override
	external payable returns (uint);
	function f1() external view returns (uint);
	function f2() external view returns (uint);
}
interface I4 is I4B {

	function f1() override
	external view returns (uint);
}




interface C5BBB {

	function f0() external view returns (uint);
	function f1() external payable returns (uint);
}
interface C5BB is C5BBB {

}
abstract contract C5B is C5BB {

	function f0() virtual external view
	override
	returns (uint);
	function f1() virtual external payable
	override
	returns (uint);
}
contract C5 is C5B {

	function f0() virtual external view
	override
	returns (uint)
	{
		return 372915282;
	}
	function f1() virtual external payable
	override
	returns (uint)
	{
		return 1613822255;
	}
}


contract C {
	using L2 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 424238335)
			return 1;
		return 0;
	}
}

