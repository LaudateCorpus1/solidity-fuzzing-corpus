
pragma solidity >=0.0;


library L0 {

	function f0(uint) public view returns (uint)
	{
		return 1804289383;
	}
	function f1(uint) public view returns (uint)
	{
		return 846930886;
	}
}

contract C2 {

	function f0() virtual public pure
	
	returns (uint)
	{
		return 192302371;
	}
}
library L3 {

	function f0(uint) private pure returns (uint)
	{
		return 1957747793;
	}
	function f1(uint) public view returns (uint)
	{
		return 424238335;
	}
}
library L4 {

	function f0(uint) public pure returns (uint)
	{
		return 719885386;
	}
}
library L5 {

	function f0(uint) public view returns (uint)
	{
		return 1649760492;
	}
	function f1(uint) internal view returns (uint)
	{
		return 596516649;
	}
	function f2(uint) internal pure returns (uint)
	{
		return 1189641421;
	}
	function f3(uint) internal pure returns (uint)
	{
		return 1025202362;
	}
}
library L6 {

	function f0(uint) internal pure returns (uint)
	{
		return 1350490027;
	}
}




interface I7BBB {

	function f0() external payable returns (uint);
}
interface I7BB is I7BBB {

	function f1() external payable returns (uint);
}
interface I7B is I7BB {

	function f1() override
	external payable returns (uint);
	function f2() external view returns (uint);
}


interface I7BBBBB {

	function f0() external payable returns (uint);
}
interface I7BBBB is I7B, I7BBBBB {

	function f0() override(I7BBB, I7BBBBB)
	external payable returns (uint);
	function f2() override
	external view returns (uint);
}
interface I7 is I7B, I7BBBB {

	function f0() override(I7BBB, I7BBBB)
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override(I7B, I7BBBB)
	external view returns (uint);
}




interface I8BBB {

	function f0() external payable returns (uint);
}
interface I8BB is I8BBB {

	function f1() external payable returns (uint);
}
interface I8B is I8BB {

	function f0() override
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() external view returns (uint);
}


interface I8BBBBB {

	function f0() external payable returns (uint);
}
interface I8BBBB is I8BB, I8BBBBB {

	function f0() override(I8BBB, I8BBBBB)
	external payable returns (uint);
}
interface I8 is I8B, I8BBBB {

	function f0() override(I8B, I8BBBB)
	external payable returns (uint);
	function f1() override(I8B, I8BB)
	external payable returns (uint);
}
library L9 {

	function f0(uint) private pure returns (uint)
	{
		return 2044897763;
	}
	function f1(uint) public view returns (uint)
	{
		return 1967513926;
	}
}



contract C10BB {

}

abstract contract C10BBB is C10BB {

}
contract C10B is C10BB, C10BBB {

}




interface C10BBBBBBB {

	function f0() external view returns (uint);
}
interface C10BBBBBB is C10BBBBBBB {

	function f0() override
	external view returns (uint);
}
interface C10BBBBB is C10BBBBBB {

	function f0() override
	external view returns (uint);
}
interface C10BBBB is C10BBBBB {

}
contract C10 is C10B, C10BBBB {

	function f0() virtual external view
	override
	returns (uint)
	{
		return 928270262;
	}
}
library L11 {

	function f0(uint) internal pure returns (uint)
	{
		return 304089172;
	}
}
library L12 {

	function f0(uint) public view returns (uint)
	{
		return 1303455736;
	}
	function f1(uint) public view returns (uint)
	{
		return 35005211;
	}
}
library L13 {

	function f0(uint) public view returns (uint)
	{
		return 521595368;
	}
	function f1(uint) public view returns (uint)
	{
		return 294702567;
	}
}
library L14 {

	function f0(uint) internal pure returns (uint)
	{
		return 1726956429;
	}
	function f1(uint) public view returns (uint)
	{
		return 336465782;
	}
}


contract C {
	using L14 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f1() != 336465782)
			return 1;
		return 0;
	}
}

