pragma solidity >=0.0;
interface I0BBB {
	function f0() external payable returns (uint);
}
interface I0BB is I0BBB {
}
interface I0B is I0BB {
	function f0() override
	external payable returns (uint);
}
interface I0 is I0B {
}
interface C1BBBBB {
	function f0() external payable returns (uint);
	function f1() external pure returns (uint);
}
interface C1BBBB is C1BBBBB {
}
interface C1BBBBBB is C1BBBBB {
	function f2() external payable returns (uint);
}
interface C1BBB is C1BBBB, C1BBBBBB {
	function f3() external view returns (uint);
	function f4() external view returns (uint);
}
interface C1BB is C1BBB {
	function f2() override
	external payable returns (uint);
	function f5() external payable returns (uint);
}
interface C1B is C1BB {
	function f1() override
	external pure returns (uint);
	function f4() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
}
contract C1 is C1B {
	function f0() external payable
	override
	returns (uint)
	{
		return 631416347;
	}
	function f1() external pure
	override
	returns (uint)
	{
		return 890442452;
	}
	function f2() external payable
	override
	returns (uint)
	{
		return 1105724094;
	}
	function f3() virtual external view
	override
	returns (uint)
	{
		return 1696049367;
	}
	function f4() virtual external view
	override
	returns (uint)
	{
		return 1168816941;
	}
	function f5() external payable
	override
	returns (uint)
	{
		return 201068705;
	}
}
interface C2BBBBBBBB {
	function f0() external payable returns (uint);
	function f1() external pure returns (uint);
}
interface C2BBBBBBB is C2BBBBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external pure returns (uint);
}
interface C2BBBBBB is C2BBBBBBB {
	function f1() override
	external pure returns (uint);
	function f2() external view returns (uint);
	function f3() external view returns (uint);
}
interface C2BBBBB is C2BBBBBB {
	function f1() override
	external pure returns (uint);
	function f3() override
	external view returns (uint);
}
interface C2BBBBBBBBB is C2BBBBB {
	function f0() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f4() external view returns (uint);
}
interface C2BBBB is C2BBBBB, C2BBBBBBBBB {
	function f0() override(C2BBBBBBB, C2BBBBBBBBB)
	external payable returns (uint);
	function f1() override
	external pure returns (uint);
	function f3() override(C2BBBBB, C2BBBBBBBBB)
	external view returns (uint);
}
contract C2BBB is C2BBBB {
	function f0() virtual external payable
	override
	returns (uint)
	{
		return 352020689;
	}
	function f1() external pure
	override
	returns (uint)
	{
		return 719080959;
	}
	function f2() virtual external view
	override
	returns (uint)
	{
		return 163677341;
	}
	function f3() virtual external view
	override
	returns (uint)
	{
		return 374787159;
	}
	function f4() external view
	override
	returns (uint)
	{
		return 80100956;
	}
}
contract C2BB is C2BBB {
	function f0() virtual external payable
	override
	returns (uint)
	{
		return 1447645967;
	}
	function f3() external view
	override
	returns (uint)
	{
		return 837051536;
	}
}
contract C2B is C2BB {
	function f0() external payable
	override
	returns (uint)
	{
		return 2127735996;
	}
}
contract C2 is C2B {
	function f2() virtual external view
	override
	returns (uint)
	{
		return 1318652553;
	}
}
library L3 {
	function f0(uint) internal view returns (uint)
	{
		return 1681692777;
	}
}
interface I4BBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I4BBBBBBBBB is I4BBBBBBBBBB {
}
interface I4BBBBBBBBBBB is I4BBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I4BBBBBBBB is I4BBBBBBBBB, I4BBBBBBBBBBB {
	function f0() override(I4BBBBBBBBBB, I4BBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() external view returns (uint);
	function f3() external view returns (uint);
}
interface I4BBBBBBB is I4BBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I4BBBBBB is I4BBBBBBB {
	function f0() override
	external view returns (uint);
	function f4() external pure returns (uint);
}
interface I4BBBBB is I4BBBBBB {
	function f2() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
}
interface I4BBBB is I4BBBBB {
}
interface I4BBBBBBBBBBBB is I4BBBBB {
	function f0() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f5() external payable returns (uint);
}
interface I4BBB is I4BBBB, I4BBBBBBBBBBBB {
	function f0() override(I4BBBBBB, I4BBBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override(I4BBBBB, I4BBBBBBBBBBBB)
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() external view returns (uint);
}
interface I4BB is I4BBB {
	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external pure returns (uint);
}
interface I4B is I4BB {
	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external pure returns (uint);
	function f5() override
	external payable returns (uint);
}
interface I4BBBBBBBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I4BBBBBBBBBBBBBBBB is I4BBBBBBBBBBBBBBBBB {
}
interface I4BBBBBBBBBBBBBBB is I4BBBBBBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I4BBBBBBBBBBBBBB is I4BBBBBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I4BBBBBBBBBBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I4BBBBBBBBBBBBBBBBBBB is I4BBBBBBBBBBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I4BBBBBBBBBBBBBBBBBB is I4BBBBBBBBBBBBBB, I4BBBBBBBBBBBBBBBBBBB {
	function f0() override(I4BBBBBBBBBBBBBB, I4BBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I4BBBBBBBBBBBBBB, I4BBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
}
interface I4BBBBBBBBBBBBB is I4BB, I4BBBBBBBBBBBBBB, I4BBBBBBBBBBBBBBBBBB {
	function f0() override(I4BBB, I4BBBBBBBBBBBBBB, I4BBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I4BB, I4BBBBBBBBBBBBBB, I4BBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f2() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
}
interface I4 is I4B, I4BBBBBBBBBBBBB {
	function f0() override(I4B, I4BBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I4B, I4BBBBBBBBBBBBB)
	external payable returns (uint);
	function f2() override(I4B, I4BBBBBBBBBBBBB)
	external view returns (uint);
	function f3() override(I4B, I4BB)
	external view returns (uint);
	function f4() override(I4B, I4BB)
	external pure returns (uint);
	function f5() override(I4B, I4BBBBBBBBBBBBB)
	external payable returns (uint);
}
contract C {
	function test() public returns (uint)
	{
			C1 tc0 = new C1();
			if (tc0.f0() != 631416347)
				return 1;
			if (tc0.f1() != 890442452)
				return 2;
			if (tc0.f2() != 1105724094)
				return 3;
			if (tc0.f3() != 1696049367)
				return 4;
			if (tc0.f4() != 1168816941)
				return 5;
			if (tc0.f5() != 201068705)
				return 6;
			C2 tc1 = new C2();
			if (tc1.f0() != 2127735996)
				return 7;
			if (tc1.f1() != 719080959)
				return 8;
			if (tc1.f2() != 1318652553)
				return 9;
			if (tc1.f3() != 837051536)
				return 10;
			if (tc1.f4() != 80100956)
				return 11;
			C2B tc2 = new C2B();
			if (tc2.f0() != 2127735996)
				return 12;
			if (tc2.f1() != 719080959)
				return 13;
			if (tc2.f2() != 163677341)
				return 14;
			if (tc2.f3() != 837051536)
				return 15;
			if (tc2.f4() != 80100956)
				return 16;
			C2BB tc3 = new C2BB();
			if (tc3.f0() != 1447645967)
				return 17;
			if (tc3.f1() != 719080959)
				return 18;
			if (tc3.f2() != 163677341)
				return 19;
			if (tc3.f3() != 837051536)
				return 20;
			if (tc3.f4() != 80100956)
				return 21;
			C2BBB tc4 = new C2BBB();
			if (tc4.f0() != 352020689)
				return 22;
			if (tc4.f1() != 719080959)
				return 23;
			if (tc4.f2() != 163677341)
				return 24;
			if (tc4.f3() != 374787159)
				return 25;
			if (tc4.f4() != 80100956)
				return 26;
			return 0;
	}
}
