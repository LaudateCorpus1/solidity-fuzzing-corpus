pragma solidity >=0.0;
interface I0BBB {
	function f0() external view returns (uint);
}
interface I0BB is I0BBB {
}
interface I0B is I0BB {
	function f0() override
	external view returns (uint);
}
interface I0BBBBBBBB {
	function f0() external view returns (uint);
}
interface I0BBBBBBB is I0BBBBBBBB {
}
interface I0BBBBBB is I0BBBBBBB {
	function f1() external view returns (uint);
}
interface I0BBBBB is I0BBBBBB {
}
interface I0BBBBBBBBB is I0BBBBB {
	function f2() external payable returns (uint);
}
interface I0BBBB is I0BB, I0BBBBB, I0BBBBBBBBB {
	function f0() override(I0BBB, I0BBBBBBBB)
	external view returns (uint);
}
interface I0 is I0B, I0BBBB {
	function f0() override(I0B, I0BBBB)
	external view returns (uint);
	function f1() override
	external view returns (uint);
}
interface I1BBBBB {
	function f0() external view returns (uint);
}
interface I1BBBB is I1BBBBB {
}
interface I1BBBBBB is I1BBBBB {
	function f1() external payable returns (uint);
	function f2() external view returns (uint);
}
interface I1BBB is I1BBBB, I1BBBBBB {
	function f2() override
	external view returns (uint);
}
interface I1BBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I1BBBBBBBBB is I1BBBBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface I1BBBBBBBB is I1BBBBBBBBB {
}
interface I1BBBBBBB is I1BBBB, I1BBBBBBBB {
	function f0() override(I1BBBBB, I1BBBBBBBBB)
	external view returns (uint);
}
interface I1BBBBBBBBBBB is I1BBBB {
	function f1() external payable returns (uint);
}
interface I1BB is I1BBB, I1BBBBBBB, I1BBBBBBBBBBB {
	function f0() override(I1BBBBB, I1BBBBBBB)
	external view returns (uint);
	function f1() override(I1BBBBBB, I1BBBBBBBBBBB)
	external payable returns (uint);
	function f2() override
	external view returns (uint);
}
interface I1B is I1BB {
	function f0() override
	external view returns (uint);
	function f3() external payable returns (uint);
}
interface I1 is I1B {
	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}
contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}
