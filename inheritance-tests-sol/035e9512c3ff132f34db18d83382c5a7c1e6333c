
pragma solidity >=0.0;












interface I0BBBBBBBBB {

}
interface I0BBBBBBBB is I0BBBBBBBBB {

	function f0() external view returns (uint);
}
interface I0BBBBBBB is I0BBBBBBBB {

}



interface I0BBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I0BBBBBBBBBBB is I0BBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I0BBBBBBBBBB is I0BBBBBBBB, I0BBBBBBBBBBB {

	function f0() override(I0BBBBBBBB, I0BBBBBBBBBBB)
	external view returns (uint);
}
interface I0BBBBBB is I0BBBBBBB, I0BBBBBBBBBB {

	function f0() override(I0BBBBBBBB, I0BBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() external payable returns (uint);
}
interface I0BBBBB is I0BBBBBB {

	function f3() external payable returns (uint);
}
interface I0BBBB is I0BBBBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f3() override
	external payable returns (uint);
}



interface I0BBBBBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I0BBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBB {

	function f1() external payable returns (uint);
}
interface I0BBBBBBBBBBBBB is I0BBBB, I0BBBBBBBBBBBBBB {

	function f0() override(I0BBBB, I0BBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I0BBBB, I0BBBBBBBBBBBBBB)
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external payable returns (uint);
	function f4() external payable returns (uint);
}
interface I0BBB is I0BBBB, I0BBBBBBBBBBBBB {

	function f0() override(I0BBBB, I0BBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I0BBBB, I0BBBBBBBBBBBBB)
	external payable returns (uint);
	function f2() override(I0BBBBBB, I0BBBBBBBBBBBBB)
	external payable returns (uint);
	function f3() override(I0BBBB, I0BBBBBBBBBBBBB)
	external payable returns (uint);
	function f5() external payable returns (uint);
}
interface I0BB is I0BBB {

	function f0() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() external view returns (uint);
}
interface I0B is I0BB {

	function f2() override
	external payable returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override
	external payable returns (uint);
}



interface I0BBBBBBBBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I0BBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBB {

	function f1() external payable returns (uint);
}
interface I0BBBBBBBBBBBBBBBB is I0BB, I0BBBBBBBBBBBBBBBBB {

	function f0() override(I0BB, I0BBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I0BBB, I0BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f3() override
	external payable returns (uint);
	function f4() override
	external payable returns (uint);
}
interface I0 is I0B, I0BBBBBBBBBBBBBBBB {

	function f0() override(I0BB, I0BBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I0BBB, I0BBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f2() override(I0B, I0BB)
	external payable returns (uint);
	function f3() override(I0BBB, I0BBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f4() override(I0B, I0BBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f5() override(I0B, I0BB)
	external payable returns (uint);
	function f6() override
	external view returns (uint);
	function f7() external payable returns (uint);
}
library L1 {

	function f0(uint) external pure returns (uint)
	{
		return 1714636915;
	}
}











interface I2BBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I2BBBBBBBBB is I2BBBBBBBBBB {

	function f0() override
	external view returns (uint);
}

interface I2BBBBBBBBBBB is I2BBBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I2BBBBBBBB is I2BBBBBBBBB, I2BBBBBBBBBBB {

	function f0() override(I2BBBBBBBBB, I2BBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() external payable returns (uint);
	function f3() external view returns (uint);
}
interface I2BBBBBBB is I2BBBBBBBB {

	function f0() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
}
interface I2BBBBBB is I2BBBBBBB {

	function f0() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
}
interface I2BBBBB is I2BBBBBB {

	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f4() external view returns (uint);
}
interface I2BBBB is I2BBBBB {

	function f0() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external view returns (uint);
}

interface I2BBBBBBBBBBBB is I2BBBBB {

	function f0() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external view returns (uint);
	function f5() external payable returns (uint);
}
interface I2BBB is I2BBBB, I2BBBBBBBBBBBB {

	function f0() override(I2BBBB, I2BBBBBBBBBBBB)
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override(I2BBBB, I2BBBBBBBBBBBB)
	external view returns (uint);
	function f4() override(I2BBBB, I2BBBBBBBBBBBB)
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() external view returns (uint);
}
interface I2BB is I2BBB {

	function f5() override
	external payable returns (uint);
}
interface I2B is I2BB {

	function f0() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
}
interface I2 is I2B {

	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() override
	external view returns (uint);
}

contract C3 {

	function f0() virtual public pure
	
	returns (uint)
	{
		return 1081532186;
	}
}


contract C {
	using L1 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1714636915)
			return 1;
		return 0;
	}
}

