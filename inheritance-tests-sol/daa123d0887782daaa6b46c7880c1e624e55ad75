
pragma solidity >=0.0;









interface C0BBBBBB {

	function f0() external payable returns (uint);
	function f1() external view returns (uint);
}
interface C0BBBBB is C0BBBBBB {

	function f1() override
	external view returns (uint);
}
interface C0BBBB is C0BBBBB {

}
interface C0BBB is C0BBBB {

}



interface C0BBBBBBBBB {

	function f0() external payable returns (uint);
}
interface C0BBBBBBBB is C0BBBBBBBBB {

}
interface C0BBBBBBB is C0BBBB, C0BBBBBBBB {

	function f0() override(C0BBBBBB, C0BBBBBBBBB)
	external payable returns (uint);
}
interface C0BB is C0BBB, C0BBBBBBB {

	function f0() override(C0BBBBBB, C0BBBBBBB)
	external payable returns (uint);
}
interface C0B is C0BB {

}
contract C0 is C0B {

	function f0() external payable
	override
	returns (uint)
	{
		return 2075782095;
	}
	function f1() virtual external view
	override
	returns (uint)
	{
		return 914937185;
	}
}





interface C1BBBB {

	function f0() external payable returns (uint);
}
interface C1BBB is C1BBBB {

	function f0() override
	external payable returns (uint);
}

interface C1BBBBB is C1BBB {

	function f1() external payable returns (uint);
}
interface C1BB is C1BBB, C1BBBBB {

	function f0() override
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() external payable returns (uint);
}




interface C1BBBBBBBBB {

	function f0() external payable returns (uint);
}
interface C1BBBBBBBB is C1BBBBBBBBB {

}
interface C1BBBBBBB is C1BBBBBBBB {

	function f0() override
	external payable returns (uint);
}
interface C1BBBBBB is C1BBBBB, C1BBBBBBB {

	function f0() override(C1BBB, C1BBBBBBB)
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface C1B is C1BB, C1BBBBBB {

	function f0() override(C1BB, C1BBBBBB)
	external payable returns (uint);
	function f1() override(C1BB, C1BBBBBB)
	external payable returns (uint);
}



interface C1BBBBBBBBBBBB {

	function f0() external payable returns (uint);
}
interface C1BBBBBBBBBBB is C1BBBBBBBBBBBB {

}
abstract contract C1BBBBBBBBBB is C1BB, C1BBBBBBBBBBB {

	function f0() virtual external payable
	override(C1BBBBBBBBBBBB, C1BB)
	returns (uint);
	function f1() virtual external payable
	override
	returns (uint);
	function f2() virtual external payable
	override
	returns (uint);
}
contract C1 is C1B, C1BBBBBBBBBB {

	function f0() virtual external payable
	override(C1BBBBBBBBBB, C1B)
	returns (uint)
	{
		return 180318217;
	}
	function f1() virtual external payable
	override(C1BBBBBBBBBB, C1B)
	returns (uint)
	{
		return 1324346645;
	}
	function f2() external payable
	override(C1BBBBBBBBBB, C1BB)
	returns (uint)
	{
		return 1587659744;
	}
}


contract C {
	function test() public returns (uint)
	{
			C0 tc0 = new C0();
			if (tc0.f0() != 2075782095)
				return 1;
			if (tc0.f1() != 914937185)
				return 2;
			C1 tc1 = new C1();
			if (tc1.f0() != 180318217)
				return 3;
			if (tc1.f1() != 1324346645)
				return 4;
			if (tc1.f2() != 1587659744)
				return 5;
			return 0;
	}
}

