
pragma solidity >=0.0;



contract C0 {

	function f0() external pure
	
	returns (uint)
	{
		return 1407254738;
	}
}
library L1 {

	function f0(uint) public view returns (uint)
	{
		return 1804289383;
	}
}
library L2 {

	function f0(uint) internal view returns (uint)
	{
		return 846930886;
	}
	function f1(uint) private pure returns (uint)
	{
		return 1681692777;
	}
}





interface I3BBBB {

	function f0() external view returns (uint);
	function f1() external payable returns (uint);
	function f2() external view returns (uint);
}
interface I3BBB is I3BBBB {

	function f0() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
}
interface I3BB is I3BBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
	function f3() external view returns (uint);
}
interface I3B is I3BB {

	function f0() override
	external view returns (uint);
}

interface I3BBBBB is I3BB {

	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() external view returns (uint);
}

interface I3BBBBBB is I3BB {

	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f4() external view returns (uint);
}

interface I3BBBBBBB is I3BB {

	function f3() override
	external view returns (uint);
}




interface I3BBBBBBBBBBB {

	function f0() external view returns (uint);
	function f1() external payable returns (uint);
	function f2() external view returns (uint);
}
interface I3BBBBBBBBBB is I3BBBBBBBBBBB {

}
interface I3BBBBBBBBB is I3BBBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
	function f3() external view returns (uint);
}
interface I3BBBBBBBB is I3BBBBB, I3BBBBBBBBB {

	function f0() override(I3BB, I3BBBBBBBBB)
	external view returns (uint);
	function f1() override(I3BBBBB, I3BBBBBBBBB)
	external payable returns (uint);
	function f2() override(I3BBBBB, I3BBBBBBBBB)
	external view returns (uint);
	function f3() override(I3BBBBB, I3BBBBBBBBB)
	external view returns (uint);
	function f4() override
	external view returns (uint);
}



interface I3BBBBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I3BBBBBBBBBBBBB is I3BBBBBBBBBBBBBB {

}
interface I3BBBBBBBBBBBB is I3BBBBB, I3BBBBBBBBBBBBB {

	function f0() override(I3BB, I3BBBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override
	external view returns (uint);
}
interface I3 is I3B, I3BBBBB, I3BBBBBB, I3BBBBBBB, I3BBBBBBBB, I3BBBBBBBBBBBB {

	function f0() override(I3B, I3BB, I3BBBBBB, I3BBBBBBBB, I3BBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I3BB, I3BBBBB, I3BBBBBB, I3BBBBBBBB)
	external payable returns (uint);
	function f2() override(I3BB, I3BBBBB, I3BBBBBBBB, I3BBBBBBBBBBBB)
	external view returns (uint);
	function f3() override(I3BB, I3BBBBB, I3BBBBBB, I3BBBBBBB, I3BBBBBBBB)
	external view returns (uint);
	function f4() override(I3BBBBB, I3BBBBBB, I3BBBBBBBB)
	external view returns (uint);
	function f5() external view returns (uint);
}





interface I4BBBB {

	function f0() external view returns (uint);
	function f1() external payable returns (uint);
	function f2() external view returns (uint);
}
interface I4BBB is I4BBBB {

	function f0() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
}
interface I4BB is I4BBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
	function f3() external view returns (uint);
}
interface I4B is I4BB {

	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
}

interface I4BBBBB is I4BB {

	function f2() override
	external view returns (uint);
	function f4() external view returns (uint);
}

interface I4BBBBBB is I4BB {

	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() external view returns (uint);
}

interface I4BBBBBBB is I4BBBBB {

	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
}




interface I4BBBBBBBBBBB {

	function f0() external view returns (uint);
	function f1() external payable returns (uint);
	function f2() external view returns (uint);
}
interface I4BBBBBBBBBB is I4BBBBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
}
interface I4BBBBBBBBB is I4BBBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
	function f3() external view returns (uint);
}
interface I4BBBBBBBB is I4BB, I4BBBBBBBBB {

	function f0() override(I4BB, I4BBBBBBBBB)
	external view returns (uint);
	function f1() override(I4BB, I4BBBBBBBBB)
	external payable returns (uint);
	function f2() override(I4BB, I4BBBBBBBBB)
	external view returns (uint);
	function f3() override(I4BB, I4BBBBBBBBB)
	external view returns (uint);
}



interface I4BBBBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I4BBBBBBBBBBBBB is I4BBBBBBBBBBBBBB {

}
interface I4BBBBBBBBBBBB is I4B, I4BBBBBBBBBBBBB {

	function f0() override(I4BB, I4BBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
}
interface I4 is I4B, I4BBBBB, I4BBBBBB, I4BBBBBBB, I4BBBBBBBB, I4BBBBBBBBBBBB {

	function f0() override(I4BB, I4BBBBBB, I4BBBBBBBB, I4BBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I4B, I4BB, I4BBBBBB, I4BBBBBBB, I4BBBBBBBB, I4BBBBBBBBBBBB)
	external payable returns (uint);
	function f2() override(I4B, I4BBBBB, I4BBBBBB, I4BBBBBBB, I4BBBBBBBB, I4BBBBBBBBBBBB)
	external view returns (uint);
	function f3() override(I4BB, I4BBBBBB, I4BBBBBBB, I4BBBBBBBB, I4BBBBBBBBBBBB)
	external view returns (uint);
	function f4() override(I4BBBBB, I4BBBBBB)
	external view returns (uint);
	function f5() external view returns (uint);
}


contract C {
	using L1 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1804289383)
			return 1;
		return 0;
	}
}

