
pragma solidity >=0.0;







interface I0BBBB {

	function f0() external view returns (uint);
}
interface I0BBB is I0BBBB {

}
interface I0BB is I0BBB {

	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
}
interface I0B is I0BB {

}

interface I0BBBBB is I0BB {

	function f2() external view returns (uint);
}

interface I0BBBBBB is I0BBBBB {

	function f3() external view returns (uint);
}

interface I0BBBBBBB is I0BB {

}




interface I0BBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I0BBBBBBBBBB is I0BBBBBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I0BBBBBBBBB is I0BBBBBBBBBB {

}
interface I0BBBBBBBB is I0BB, I0BBBBBBBBB {

	function f0() override(I0BB, I0BBBBBBBBBB)
	external view returns (uint);
}



interface I0BBBBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I0BBBBBBBBBBBBB is I0BBBBBBBBBBBBBB {

}
interface I0BBBBBBBBBBBB is I0BB, I0BBBBBBBBBBBBB {

	function f0() override(I0BB, I0BBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external view returns (uint);
}
interface I0 is I0B, I0BBBBB, I0BBBBBB, I0BBBBBBB, I0BBBBBBBB, I0BBBBBBBBBBBB {

	function f0() override(I0BB, I0BBBBBBBB, I0BBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I0BB, I0BBBBBBBBBBBB)
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f4() external view returns (uint);
}
library L2 {

	function f0(uint) public pure returns (uint)
	{
		return 424238335;
	}
	function f1(uint) public view returns (uint)
	{
		return 719885386;
	}
}


contract C {
	using L2 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f1() != 719885386)
			return 1;
		return 0;
	}
}

