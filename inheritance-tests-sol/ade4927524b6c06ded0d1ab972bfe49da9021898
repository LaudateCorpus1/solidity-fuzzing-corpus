pragma solidity >=0.0;
interface I0B {
	function f0() external view returns (uint);
	function f1() external view returns (uint);
}
interface I0 is I0B {
	function f1() override
	external view returns (uint);
}
interface I1BBB {
	function f0() external payable returns (uint);
}
interface I1BB is I1BBB {
	function f0() override
	external payable returns (uint);
	function f1() external view returns (uint);
	function f2() external view returns (uint);
}
interface I1BBBBB {
}
interface I1BBBB is I1BBB, I1BBBBB {
	function f1() external view returns (uint);
}
interface I1B is I1BB, I1BBBB {
	function f0() override(I1BB, I1BBB)
	external payable returns (uint);
	function f1() override(I1BB, I1BBBB)
	external view returns (uint);
}
interface I1 is I1B {
	function f3() external view returns (uint);
	function f4() external payable returns (uint);
}
interface C2BBBBBBB {
	function f0() external view returns (uint);
}
interface C2BBBBBB is C2BBBBBBB {
	function f1() external view returns (uint);
	function f2() external payable returns (uint);
}
interface C2BBBBB is C2BBBBBB {
}
interface C2BBBB is C2BBBBB {
	function f0() override
	external view returns (uint);
}
interface C2BBB is C2BBBB {
	function f1() override
	external view returns (uint);
	function f3() external payable returns (uint);
}
interface C2BB is C2BBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
}
contract C2B is C2BB {
	function f0() external view
	override
	returns (uint)
	{
		return 890442452;
	}
	function f1() external view
	override
	returns (uint)
	{
		return 1105724094;
	}
	function f2() virtual external payable
	override
	returns (uint)
	{
		return 1696049367;
	}
	function f3() virtual external payable
	override
	returns (uint)
	{
		return 1168816941;
	}
	function f4() virtual public pure
	
	returns (uint)
	{
		return 1272185027;
	}
}
contract C2 is C2B {
	function f2() virtual external payable
	override
	returns (uint)
	{
		return 1287522347;
	}
	function f4() public pure
	override
	returns (uint)
	{
		return 153892771;
	}
	function f5() virtual public pure
	
	returns (uint)
	{
		return 412013968;
	}
}
interface C3BBBBBBB {
	function f0() external view returns (uint);
}
interface C3BBBBBB is C3BBBBBBB {
	function f1() external view returns (uint);
	function f2() external payable returns (uint);
}
interface C3BBBBB is C3BBBBBB {
	function f1() override
	external view returns (uint);
}
interface C3BBBB is C3BBBBB {
	function f0() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
}
interface C3BBB is C3BBBB {
	function f2() override
	external payable returns (uint);
	function f3() external payable returns (uint);
}
interface C3BB is C3BBB {
	function f2() override
	external payable returns (uint);
}
contract C3B is C3BB {
	function f0() external view
	override
	returns (uint)
	{
		return 948709761;
	}
	function f1() virtual external view
	override
	returns (uint)
	{
		return 1082682476;
	}
	function f2() virtual external payable
	override
	returns (uint)
	{
		return 1243427070;
	}
	function f3() external payable
	override
	returns (uint)
	{
		return 200599677;
	}
	function f4() virtual public pure
	
	returns (uint)
	{
		return 143244144;
	}
}
contract C3 is C3B {
	function f1() external view
	override
	returns (uint)
	{
		return 355190910;
	}
	function f4() public pure
	override
	returns (uint)
	{
		return 1869683330;
	}
	function f5() virtual public pure
	
	returns (uint)
	{
		return 1336273608;
	}
}
interface I4BBB {
	function f0() external view returns (uint);
}
interface I4BB is I4BBB {
	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
	function f2() external payable returns (uint);
}
interface I4BBBBB {
}
interface I4BBBB is I4BB, I4BBBBB {
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() external view returns (uint);
}
interface I4B is I4BB, I4BBBB {
	function f0() override
	external view returns (uint);
	function f1() override(I4BB, I4BBBB)
	external view returns (uint);
	function f2() override(I4BB, I4BBBB)
	external payable returns (uint);
	function f3() override
	external view returns (uint);
}
interface I4 is I4B {
	function f0() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() external view returns (uint);
	function f5() external payable returns (uint);
}
interface I5BBB {
	function f0() external view returns (uint);
}
interface I5BB is I5BBB {
	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
	function f2() external payable returns (uint);
}
interface I5BBBBB {
}
interface I5BBBB is I5BBB, I5BBBBB {
	function f1() external view returns (uint);
}
interface I5B is I5BB, I5BBBB {
	function f0() override(I5BB, I5BBB)
	external view returns (uint);
	function f1() override(I5BB, I5BBBB)
	external view returns (uint);
}
interface I5 is I5B {
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() external view returns (uint);
	function f4() external payable returns (uint);
}
contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}
