pragma solidity >=0.0;
interface I0B {
}
interface I0BBBBBB {
	function f0() external payable returns (uint);
}
interface I0BBBBB is I0BBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I0BBBB is I0BBBBB {
	function f1() external payable returns (uint);
}
interface I0BBB is I0BBBB {
	function f1() override
	external payable returns (uint);
}
interface I0BB is I0B, I0BBB {
}
interface I0BBBBBBB is I0BB {
}
interface I0BBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I0BBBBBBBBBBB is I0BBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I0BBBBBBBBBB is I0BBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() external payable returns (uint);
}
interface I0BBBBBBBBB is I0BBBBBBBBBB {
	function f1() override
	external payable returns (uint);
}
interface I0BBBBBBBB is I0B, I0BBBBBBBBB {
}
interface I0BBBBBBBBBBBBB is I0BBBBBBBB {
	function f1() override
	external payable returns (uint);
}
interface I0 is I0B, I0BB, I0BBBBBBB, I0BBBBBBBB, I0BBBBBBBBBBBBB {
	function f0() override(I0BBBBB, I0BBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I0BBB, I0BBBBBBBBB, I0BBBBBBBBBBBBB)
	external payable returns (uint);
}
interface I1B {
}
interface I1BBB {
	function f0() external view returns (uint);
}
interface I1BB is I1B, I1BBB {
	function f0() override
	external view returns (uint);
}
interface I1 is I1B, I1BB {
	function f0() override
	external view returns (uint);
}
interface I2BBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I2BBBBBBBBB is I2BBBBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface I2BBBBBBBBBBB is I2BBBBBBBBBB {
	function f1() external payable returns (uint);
}
interface I2BBBBBBBB is I2BBBBBBBBB, I2BBBBBBBBBBB {
	function f0() override(I2BBBBBBBBB, I2BBBBBBBBBB)
	external view returns (uint);
	function f2() external payable returns (uint);
	function f3() external view returns (uint);
}
interface I2BBBBBBB is I2BBBBBBBB {
	function f1() override
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
}
interface I2BBBBBB is I2BBBBBBB {
	function f0() override
	external view returns (uint);
}
interface I2BBBBB is I2BBBBBB {
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
}
interface I2BBBB is I2BBBBB {
	function f0() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
}
interface I2BBBBBBBBBBBB is I2BBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f4() external payable returns (uint);
}
interface I2BBB is I2BBBB, I2BBBBBBBBBBBB {
	function f0() override(I2BBBB, I2BBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I2BBBBBBB, I2BBBBBBBBBBBB)
	external payable returns (uint);
	function f3() override(I2BBBB, I2BBBBBBBBBBBB)
	external view returns (uint);
	function f5() external view returns (uint);
}
interface I2BB is I2BBB {
	function f0() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
}
interface I2B is I2BB {
	function f1() override
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f5() override
	external view returns (uint);
}
interface I2 is I2B {
	function f1() override
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override
	external view returns (uint);
}
interface I3BBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I3BBBBBBBBB is I3BBBBBBBBBB {
}
interface I3BBBBBBBBBBB is I3BBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I3BBBBBBBB is I3BBBBBBBBB, I3BBBBBBBBBBB {
	function f0() override(I3BBBBBBBBBB, I3BBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() external payable returns (uint);
	function f3() external view returns (uint);
}
interface I3BBBBBBB is I3BBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
}
interface I3BBBBBB is I3BBBBBBB {
	function f1() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
}
interface I3BBBBB is I3BBBBBB {
	function f0() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
}
interface I3BBBB is I3BBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I3BBBBBBBBBBBB is I3BBBBB {
	function f0() override
	external view returns (uint);
	function f4() external payable returns (uint);
}
interface I3BBB is I3BBBB, I3BBBBBBBBBBBB {
	function f0() override(I3BBBB, I3BBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I3BBBB, I3BBBBBB)
	external payable returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() external view returns (uint);
}
interface I3BB is I3BBB {
	function f1() override
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
}
interface I3B is I3BB {
	function f2() override
	external payable returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override
	external view returns (uint);
}
interface I3 is I3B {
	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
}
interface I5B {
	function f0() external view returns (uint);
}
interface I5 is I5B {
}
contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}
