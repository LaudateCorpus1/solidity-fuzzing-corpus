pragma solidity >=0.0;
interface C0BBBBBB {
}
interface C0BBBBB is C0BBBBBB {
	function f0() external payable returns (uint);
}
interface C0BBBB is C0BBBBB {
	function f0() override
	external payable returns (uint);
}
interface C0BBB is C0BBBB {
	function f1() external payable returns (uint);
}
interface C0BB is C0BBB {
}
contract C0B is C0BB {
	function f0() external payable
	override
	returns (uint)
	{
		return 1596680831;
	}
	function f1() external payable
	override
	returns (uint)
	{
		return 1203428207;
	}
}
contract C0 is C0B {
}
library L1 {
	function f0(uint) internal pure returns (uint)
	{
		return 1804289383;
	}
	function f1(uint) public view returns (uint)
	{
		return 846930886;
	}
}
interface C2B {
	function f0() external payable returns (uint);
}
contract C2 is C2B {
	function f0() external payable
	override
	returns (uint)
	{
		return 1098894339;
	}
}
interface I3BB {
	function f0() external payable returns (uint);
}
interface I3BBBBBB {
	function f0() external payable returns (uint);
	function f1() external view returns (uint);
}
interface I3BBBBB is I3BBBBBB {
	function f1() override
	external view returns (uint);
}
interface I3BBBB is I3BBBBB {
	function f1() override
	external view returns (uint);
	function f2() external view returns (uint);
}
interface I3BBB is I3BB, I3BBBB {
	function f0() override(I3BB, I3BBBBBB)
	external payable returns (uint);
	function f1() override
	external view returns (uint);
}
interface I3BBBBBBB is I3BBB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f3() external payable returns (uint);
	function f4() external view returns (uint);
}
interface I3B is I3BB, I3BBB, I3BBBBBBB {
	function f0() override(I3BB, I3BBB, I3BBBBBBB)
	external payable returns (uint);
	function f1() override(I3BBB, I3BBBBBBB)
	external view returns (uint);
	function f2() override(I3BBBB, I3BBBBBBB)
	external view returns (uint);
}
interface I3BBBBBBBB is I3BBBBBBB {
	function f1() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f4() override
	external view returns (uint);
}
interface I3 is I3B, I3BBBBBBBB {
	function f0() override(I3B, I3BBBBBBB)
	external payable returns (uint);
	function f1() override(I3B, I3BBBBBBBB)
	external view returns (uint);
	function f2() override(I3B, I3BBBBBBBB)
	external view returns (uint);
	function f4() override(I3BBBBBBB, I3BBBBBBBB)
	external view returns (uint);
}
contract C4B {
}
interface C4BBBBB {
	function f0() external payable returns (uint);
}
interface C4BBBB is C4BBBBB {
}
contract C4BBB is C4BBBB {
	function f0() virtual external payable
	override
	returns (uint)
	{
		return 1287522347;
	}
	function f1() external pure
	
	returns (uint)
	{
		return 1814467857;
	}
}
contract C4BB is C4B, C4BBB {
}
contract C4 is C4B, C4BB {
	function f0() external payable
	override
	returns (uint)
	{
		return 1675824860;
	}
}
library L5 {
	function f0(uint) public pure returns (uint)
	{
		return 719885386;
	}
}
library L6 {
	function f0(uint) public view returns (uint)
	{
		return 1649760492;
	}
}
interface I7BB {
	function f0() external view returns (uint);
}
interface I7B is I7BB {
}
interface I7 is I7B {
	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
}
interface I8BBBB {
	function f0() external view returns (uint);
}
interface I8BBB is I8BBBB {
}
interface I8BB is I8BBB {
}
interface I8B is I8BB {
}
interface I8 is I8B {
}
interface I9B {
	function f0() external view returns (uint);
}
interface I9 is I9B {
}
interface I10BBBB {
	function f0() external view returns (uint);
}
interface I10BBB is I10BBBB {
}
interface I10BB is I10BBB {
}
interface I10B is I10BB {
}
interface I10 is I10B {
	function f0() override
	external view returns (uint);
}
interface I11 {
	function f0() external view returns (uint);
}
interface I12BBB {
}
interface I12BB is I12BBB {
}
interface I12B is I12BB {
}
interface I12 is I12B {
	function f0() external payable returns (uint);
}
interface C13BBB {
	function f0() external payable returns (uint);
}
interface C13BB is C13BBB {
	function f0() override
	external payable returns (uint);
}
abstract contract C13B is C13BB {
	function f0() virtual external payable
	override
	returns (uint);
}
contract C13 is C13B {
	function f0() external payable
	override
	returns (uint)
	{
		return 355190910;
	}
}
library L14 {
	function f0(uint) internal view returns (uint)
	{
		return 596516649;
	}
}
library L15 {
	function f0(uint) private pure returns (uint)
	{
		return 1189641421;
	}
	function f1(uint) public view returns (uint)
	{
		return 1025202362;
	}
	function f2(uint) public view returns (uint)
	{
		return 1350490027;
	}
	function f3(uint) public view returns (uint)
	{
		return 783368690;
	}
}
interface I16BBBB {
	function f0() external view returns (uint);
}
interface I16BBB is I16BBBB {
	function f0() override
	external view returns (uint);
}
interface I16BBBBB is I16BBBB {
	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
}
interface I16BB is I16BBB, I16BBBBB {
	function f0() override(I16BBB, I16BBBBB)
	external view returns (uint);
	function f1() override
	external view returns (uint);
}
interface I16B is I16BB {
	function f1() override
	external view returns (uint);
}
interface I16BBBBBB is I16BB {
	function f1() override
	external view returns (uint);
	function f2() external view returns (uint);
}
interface I16 is I16B, I16BBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override(I16B, I16BBBBBB)
	external view returns (uint);
	function f2() override
	external view returns (uint);
}
library L17 {
	function f0(uint) external pure returns (uint)
	{
		return 1967513926;
	}
}
interface I18 {
	function f0() external view returns (uint);
}
contract C {
	function test() public returns (uint)
	{
			C0 tc0 = new C0();
			if (tc0.f0() != 1596680831)
				return 1;
			if (tc0.f1() != 1203428207)
				return 2;
			C0B tc1 = new C0B();
			if (tc1.f0() != 1596680831)
				return 3;
			if (tc1.f1() != 1203428207)
				return 4;
			C13 tc2 = new C13();
			if (tc2.f0() != 355190910)
				return 5;
			C2 tc3 = new C2();
			if (tc3.f0() != 1098894339)
				return 6;
			C4 tc4 = new C4();
			if (tc4.f0() != 1675824860)
				return 7;
			if (tc4.f1() != 1814467857)
				return 8;
			C4BB tc5 = new C4BB();
			if (tc5.f0() != 1287522347)
				return 9;
			if (tc5.f1() != 1814467857)
				return 10;
			C4BBB tc6 = new C4BBB();
			if (tc6.f0() != 1287522347)
				return 11;
			if (tc6.f1() != 1814467857)
				return 12;
			return 0;
	}
}
