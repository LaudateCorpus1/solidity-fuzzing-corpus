
pragma solidity >=0.0;




abstract contract C0B {

}





interface C0BBBBBB {

	function f0() external view returns (uint);
}
interface C0BBBBB is C0BBBBBB {

}
interface C0BBBB is C0BBBBB {

}
interface C0BBB is C0BBBB {

	function f0() override
	external view returns (uint);
}
contract C0BB is C0B, C0BBB {

	function f0() virtual external view
	override
	returns (uint)
	{
		return 1501100076;
	}
}
contract C0 is C0B, C0BB {

}
library L1 {

	function f0(uint) internal pure returns (uint)
	{
		return 846930886;
	}
}

interface I3 {

	function f0() external payable returns (uint);
}









interface C4BBBBBBBB {

	function f0() external payable returns (uint);
	function f1() external pure returns (uint);
}
interface C4BBBBBBB is C4BBBBBBBB {

	function f0() override
	external payable returns (uint);
	function f1() override
	external pure returns (uint);
}
interface C4BBBBBB is C4BBBBBBB {

	function f1() override
	external pure returns (uint);
	function f2() external view returns (uint);
	function f3() external view returns (uint);
}
interface C4BBBBB is C4BBBBBB {

	function f1() override
	external pure returns (uint);
}

interface C4BBBBBBBBB is C4BBBBBB {

	function f0() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f4() external view returns (uint);
}
interface C4BBBB is C4BBBBB, C4BBBBBBBBB {

	function f0() override(C4BBBBBBB, C4BBBBBBBBB)
	external payable returns (uint);
	function f1() override(C4BBBBB, C4BBBBBB)
	external pure returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override(C4BBBBBB, C4BBBBBBBBB)
	external view returns (uint);
	function f4() override
	external view returns (uint);
}
contract C4BBB is C4BBBB {

	function f0() virtual external payable
	override
	returns (uint)
	{
		return 654429131;
	}
	function f1() external pure
	override
	returns (uint)
	{
		return 1717502997;
	}
	function f2() virtual external view
	override
	returns (uint)
	{
		return 528691176;
	}
	function f3() external view
	override
	returns (uint)
	{
		return 1150688209;
	}
	function f4() virtual external view
	override
	returns (uint)
	{
		return 1313839054;
	}
}
contract C4BB is C4BBB {

	function f0() virtual external payable
	override
	returns (uint)
	{
		return 1735915146;
	}
	function f4() external view
	override
	returns (uint)
	{
		return 471204562;
	}
}
contract C4B is C4BB {

	function f2() external view
	override
	returns (uint)
	{
		return 1249752168;
	}
}
contract C4 is C4B {

}

contract C5 {

	function f0() external pure
	
	returns (uint)
	{
		return 489392714;
	}
}

contract C6 {

	function f0() virtual public pure
	
	returns (uint)
	{
		return 1155580494;
	}
}
library L7 {

	function f0(uint) external pure returns (uint)
	{
		return 424238335;
	}
	function f1(uint) public view returns (uint)
	{
		return 719885386;
	}
}
library L8 {

	function f0(uint) internal pure returns (uint)
	{
		return 1649760492;
	}
}




interface I9BBB {

	function f0() external payable returns (uint);
}
interface I9BB is I9BBB {

	function f1() external payable returns (uint);
}
interface I9B is I9BB {

	function f0() override
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() external view returns (uint);
}


interface I9BBBBB {

	function f0() external payable returns (uint);
}
interface I9BBBB is I9BB, I9BBBBB {

	function f0() override(I9BBB, I9BBBBB)
	external payable returns (uint);
}
interface I9 is I9B, I9BBBB {

	function f0() override(I9B, I9BBBB)
	external payable returns (uint);
	function f1() override(I9B, I9BB)
	external payable returns (uint);
	function f2() override
	external view returns (uint);
}


contract C10B {

	function f0() public view
	
	returns (uint)
	{
		return 71622072;
	}
}

contract C10BB is C10B {

}
contract C10 is C10B, C10BB {

}
library L11 {

	function f0(uint) public pure returns (uint)
	{
		return 1025202362;
	}
}
library L12 {

	function f0(uint) public view returns (uint)
	{
		return 1350490027;
	}
}


contract C {
	using L7 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f1() != 719885386)
			return 1;
		return 0;
	}
}

