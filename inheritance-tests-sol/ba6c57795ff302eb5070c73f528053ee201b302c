pragma solidity >=0.0;
contract C0 {
	function f0() external pure
	
	returns (uint)
	{
		return 1248094976;
	}
	function f1() external pure
	
	returns (uint)
	{
		return 1286353558;
	}
}
interface I1B {
}
interface I1BBB {
	function f0() external view returns (uint);
}
interface I1BBBB is I1BBB {
	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
}
interface I1BB is I1B, I1BBB, I1BBBB {
	function f0() override(I1BBB, I1BBBB)
	external view returns (uint);
	function f2() external payable returns (uint);
}
interface I1 is I1B, I1BB {
	function f1() override
	external view returns (uint);
}
interface I2BB {
	function f0() external view returns (uint);
}
interface I2B is I2BB {
	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I2BBB is I2BB {
	function f1() external payable returns (uint);
}
interface I2 is I2B, I2BBB {
	function f0() override(I2B, I2BB)
	external view returns (uint);
	function f1() override(I2B, I2BBB)
	external payable returns (uint);
}
library L3 {
	function f0(uint) external pure returns (uint)
	{
		return 1714636915;
	}
}
interface I4BB {
	function f0() external view returns (uint);
}
interface I4B is I4BB {
	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I4BBBB {
	function f0() external view returns (uint);
}
interface I4BBB is I4BB, I4BBBB {
	function f0() override(I4BB, I4BBBB)
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I4 is I4B, I4BBB {
	function f0() override(I4B, I4BBB)
	external view returns (uint);
	function f1() override(I4B, I4BBB)
	external payable returns (uint);
}
interface I5B {
	function f0() external pure returns (uint);
	function f1() external view returns (uint);
}
interface I5 is I5B {
	function f0() override
	external pure returns (uint);
	function f1() override
	external view returns (uint);
}
interface I6BB {
	function f0() external view returns (uint);
}
interface I6BBB is I6BB {
	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
}
interface I6B is I6BB, I6BBB {
	function f0() override(I6BB, I6BBB)
	external view returns (uint);
	function f2() external payable returns (uint);
}
interface I6 is I6B {
	function f1() override
	external view returns (uint);
}
library L7 {
	function f0(uint) external view returns (uint)
	{
		return 719885386;
	}
}
interface I8BB {
	function f0() external view returns (uint);
}
interface I8B is I8BB {
	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I8 is I8B {
	function f0() override
	external view returns (uint);
}
contract C {
	using L7 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 719885386)
			return 1;
		return 0;
	}
}
