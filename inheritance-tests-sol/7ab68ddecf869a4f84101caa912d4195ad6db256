
pragma solidity >=0.0;






interface I3BBB {

	function f0() external view returns (uint);
}
interface I3BB is I3BBB {

	function f1() external payable returns (uint);
}
interface I3B is I3BB {

	function f0() override
	external view returns (uint);
}



interface I3BBBBBB {

	function f0() external view returns (uint);
}
interface I3BBBBB is I3BBBBBB {

	function f0() override
	external view returns (uint);
}
interface I3BBBB is I3BB, I3BBBBB {

	function f0() override(I3BBB, I3BBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}


interface I3BBBBBBBB {

	function f0() external view returns (uint);
}
interface I3BBBBBBB is I3BBBBB, I3BBBBBBBB {

	function f0() override(I3BBBBB, I3BBBBBBBB)
	external view returns (uint);
}
interface I3 is I3B, I3BBBB, I3BBBBBBB {

	function f0() override(I3B, I3BBBB, I3BBBBBBB)
	external view returns (uint);
	function f1() override(I3BB, I3BBBB)
	external payable returns (uint);
	function f2() external payable returns (uint);
}



interface I4BB {

	function f0() external payable returns (uint);
	function f1() external payable returns (uint);
}
interface I4B is I4BB {

	function f0() override
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}



interface I4BBBBB {

	function f0() external payable returns (uint);
}
interface I4BBBB is I4BBBBB {

}
interface I4BBB is I4B, I4BBBB {

	function f0() override(I4B, I4BBBBB)
	external payable returns (uint);
}

interface I4BBBBBB is I4B {

	function f1() override
	external payable returns (uint);
	function f2() external view returns (uint);
}
interface I4 is I4B, I4BBB, I4BBBBBB {

	function f0() override(I4B, I4BBB)
	external payable returns (uint);
	function f1() override(I4B, I4BBBBBB)
	external payable returns (uint);
	function f3() external payable returns (uint);
}


contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}

