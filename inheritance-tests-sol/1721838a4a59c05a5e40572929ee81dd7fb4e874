pragma solidity >=0.0;
interface I1BBBBBB {
	function f0() external view returns (uint);
}
interface I1BBBBB is I1BBBBBB {
	function f1() external payable returns (uint);
}
interface I1BBBB is I1BBBBB {
}
interface I1BBBBBBB is I1BBBB {
	function f2() external view returns (uint);
	function f3() external payable returns (uint);
	function f4() external view returns (uint);
}
interface I1BBB is I1BBBB, I1BBBBBBB {
}
interface I1BBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I1BBBBBBBBBB is I1BBBBBBBBBBB {
}
interface I1BBBBBBBBB is I1BBBBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface I1BBBBBBBB is I1BBBB, I1BBBBBBBBB {
	function f0() override(I1BBBBBB, I1BBBBBBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I1BB is I1BBB, I1BBBBBBBB {
	function f0() override(I1BBBBBB, I1BBBBBBBB)
	external view returns (uint);
	function f1() override(I1BBBBB, I1BBBBBBBB)
	external payable returns (uint);
	function f3() override
	external payable returns (uint);
	function f4() override
	external view returns (uint);
}
interface I1B is I1BB {
	function f3() override
	external payable returns (uint);
	function f5() external payable returns (uint);
}
interface I1BBBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I1BBBBBBBBBBBB is I1BB, I1BBBBBBBBBBBBB {
	function f0() override(I1BB, I1BBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f3() override
	external payable returns (uint);
	function f5() external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I1BBBBBBBBBBBBBB is I1BB, I1BBBBBBBBBBBBBBB {
	function f0() override(I1BB, I1BBBBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override
	external payable returns (uint);
	function f5() external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBBBB {
	function f0() external view returns (uint);
	function f1() external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBBB is I1BB, I1BBBBBBBBBBBBBBBBB {
	function f0() override(I1BB, I1BBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I1BB, I1BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f2() override
	external view returns (uint);
	function f5() external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBB {
	function f1() override
	external payable returns (uint);
	function f3() override
	external payable returns (uint);
	function f6() external pure returns (uint);
}
interface I1 is I1B, I1BBBBBBBBBBBB, I1BBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBB {
	function f0() override(I1BB, I1BBBBBBBBBBBB, I1BBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I1BB, I1BBBBBBBBBBBB, I1BBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f2() override(I1BBBBBBB, I1BBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f3() override(I1B, I1BBBBBBBBBBBB, I1BBBBBBBBBBBBBB, I1BB, I1BBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f5() override(I1B, I1BBBBBBBBBBBB, I1BBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f6() override
	external pure returns (uint);
}
contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}
