
pragma solidity >=0.0;


library L0 {

	function f0(uint) public pure returns (uint)
	{
		return 1804289383;
	}
	function f1(uint) public pure returns (uint)
	{
		return 846930886;
	}
}
library L1 {

	function f0(uint) public pure returns (uint)
	{
		return 1681692777;
	}
	function f1(uint) public pure returns (uint)
	{
		return 1714636915;
	}
}
library L2 {

	function f0(uint) public view returns (uint)
	{
		return 1957747793;
	}
}



interface C3BB {

	function f0() external view returns (uint);
}
interface C3B is C3BB {

	function f0() override
	external view returns (uint);
}


interface C3BBBB {

}


interface C3BBBBBB {

	function f0() external view returns (uint);
}
interface C3BBBBB is C3BBBB, C3BBBBBB {

	function f0() override
	external view returns (uint);
}
interface C3BBB is C3BB, C3BBBB, C3BBBBB {

	function f0() override(C3BB, C3BBBBB)
	external view returns (uint);
}
contract C3 is C3B, C3BBB {

	function f0() external view
	override(C3BBB, C3B)
	returns (uint)
	{
		return 842474334;
	}
}
library L5 {

	function f0(uint) internal pure returns (uint)
	{
		return 1649760492;
	}
}
library L6 {

	function f0(uint) public pure returns (uint)
	{
		return 596516649;
	}
	function f1(uint) public pure returns (uint)
	{
		return 1189641421;
	}
}










interface I7BBBBBBBBB {

	function f0() external view returns (uint);
}

interface I7BBBBBBBBBB is I7BBBBBBBBB {

	function f1() external payable returns (uint);
}
interface I7BBBBBBBB is I7BBBBBBBBB, I7BBBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f2() external payable returns (uint);
	function f3() external view returns (uint);
}
interface I7BBBBBBB is I7BBBBBBBB {

	function f0() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
}
interface I7BBBBBB is I7BBBBBBB {

	function f3() override
	external view returns (uint);
}
interface I7BBBBB is I7BBBBBB {

	function f0() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f4() external payable returns (uint);
}
interface I7BBBB is I7BBBBB {

}

interface I7BBBBBBBBBBB is I7BBBBB {

	function f0() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f5() external payable returns (uint);
}
interface I7BBB is I7BBBB, I7BBBBBBBBBBB {

	function f0() override(I7BBBBB, I7BBBBBBBBBBB)
	external view returns (uint);
	function f2() override(I7BBBBB, I7BBBBBBBBBBB)
	external payable returns (uint);
	function f3() override(I7BBBBB, I7BBBBBBBBBBB)
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f6() external view returns (uint);
	function f7() external payable returns (uint);
	function f8() external view returns (uint);
	function f9() external payable returns (uint);
}
interface I7BB is I7BBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() override
	external view returns (uint);
	function f7() override
	external payable returns (uint);
	function f8() override
	external view returns (uint);
	function f9() override
	external payable returns (uint);
}
interface I7B is I7BB {

	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f5() override
	external payable returns (uint);
	function f9() override
	external payable returns (uint);
}

interface I7BBBBBBBBBBBB is I7B {

	function f0() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f6() override
	external view returns (uint);
	function f7() override
	external payable returns (uint);
	function f9() override
	external payable returns (uint);
	function f10() external payable returns (uint);
}

interface I7BBBBBBBBBBBBB is I7B {

	function f1() override
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override
	external payable returns (uint);
	function f7() override
	external payable returns (uint);
	function f8() override
	external view returns (uint);
	function f9() override
	external payable returns (uint);
	function f10() external payable returns (uint);
}
interface I7 is I7B, I7BBBBBBBBBBBB, I7BBBBBBBBBBBBB {

	function f0() override(I7B, I7BBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I7B, I7BBBBBBBBBBBBB)
	external payable returns (uint);
	function f2() override(I7BBB, I7BBBBBBBBBBBB, I7BBBBBBBBBBBBB)
	external payable returns (uint);
	function f3() override(I7BB, I7BBBBBBBBBBBB)
	external view returns (uint);
	function f4() override(I7BBB, I7BBBBBBBBBBBB, I7BBBBBBBBBBBBB)
	external payable returns (uint);
	function f5() override(I7B, I7BBBBBBBBBBBBB)
	external payable returns (uint);
	function f6() override(I7BB, I7BBBBBBBBBBBB)
	external view returns (uint);
	function f7() override(I7BB, I7BBBBBBBBBBBB, I7BBBBBBBBBBBBB)
	external payable returns (uint);
	function f8() override(I7BB, I7BBBBBBBBBBBBB)
	external view returns (uint);
	function f9() override(I7B, I7BBBBBBBBBBBB, I7BBBBBBBBBBBBB)
	external payable returns (uint);
	function f10() override(I7BBBBBBBBBBBB, I7BBBBBBBBBBBBB)
	external payable returns (uint);
	function f11() external payable returns (uint);
}
library L8 {

	function f0(uint) public view returns (uint)
	{
		return 2044897763;
	}
}

contract C9 {

	function f0() virtual public pure
	
	returns (uint)
	{
		return 236955907;
	}
}
library L12 {

	function f0(uint) private pure returns (uint)
	{
		return 304089172;
	}
	function f1(uint) external pure returns (uint)
	{
		return 1303455736;
	}
}


contract C {
	using L0 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1804289383)
			return 1;
		return 0;
	}
}

