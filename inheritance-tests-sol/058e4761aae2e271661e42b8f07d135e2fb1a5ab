
pragma solidity >=0.0;







interface I0BBBB {

	function f0() external view returns (uint);
}


interface I0BBBBBB {

	function f0() external view returns (uint);
}
interface I0BBBBB is I0BBBB, I0BBBBBB {

	function f0() override(I0BBBB, I0BBBBBB)
	external view returns (uint);
}
interface I0BBB is I0BBBB, I0BBBBB {

	function f0() override(I0BBBB, I0BBBBB)
	external view returns (uint);
	function f1() external view returns (uint);
}
interface I0BB is I0BBB {

	function f0() override
	external view returns (uint);
}
interface I0B is I0BB {

}
interface I0 is I0B {

}




interface I2BBB {

	function f0() external view returns (uint);
}
interface I2BB is I2BBB {

}
interface I2B is I2BB {

	function f0() override
	external view returns (uint);
}
interface I2 is I2B {

	function f0() override
	external view returns (uint);
}


interface I4B {

	function f0() external view returns (uint);
}
interface I4 is I4B {

}


interface I5B {

	function f0() external payable returns (uint);
}
interface I5 is I5B {

}
library L6 {

	function f0(uint) public view returns (uint)
	{
		return 1957747793;
	}
}




interface I7BBB {

}
interface I7BB is I7BBB {

	function f0() external view returns (uint);
}
interface I7B is I7BB {

	function f0() override
	external view returns (uint);
}



interface I7BBBBBB {

	function f0() external view returns (uint);
}
interface I7BBBBB is I7BBBBBB {

	function f1() external payable returns (uint);
}
interface I7BBBB is I7BB, I7BBBBB {

	function f0() override(I7BB, I7BBBBBB)
	external view returns (uint);
}
interface I7 is I7B, I7BBBB {

	function f0() override(I7B, I7BBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() external view returns (uint);
}




interface I8BBB {

	function f0() external payable returns (uint);
	function f1() external payable returns (uint);
}
interface I8BB is I8BBB {

	function f1() override
	external payable returns (uint);
}
interface I8B is I8BB {

	function f0() override
	external payable returns (uint);
}


interface I8BBBBB {

	function f0() external payable returns (uint);
}
interface I8BBBB is I8B, I8BBBBB {

	function f0() override(I8B, I8BBBBB)
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I8 is I8B, I8BBBB {

	function f0() override(I8B, I8BBBB)
	external payable returns (uint);
	function f1() override(I8BB, I8BBBB)
	external payable returns (uint);
}






interface I9BBBBB {

	function f0() external view returns (uint);
}

interface I9BBBBBB is I9BBBBB {

	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
}
interface I9BBBB is I9BBBBB, I9BBBBBB {

	function f0() override(I9BBBBB, I9BBBBBB)
	external view returns (uint);
}
interface I9BBB is I9BBBB {

	function f0() override
	external view returns (uint);
}
interface I9BB is I9BBB {

	function f1() override
	external view returns (uint);
}


interface I9BBBBBBBB {

	function f0() external view returns (uint);
}
interface I9BBBBBBB is I9BBB, I9BBBBBBBB {

	function f0() override(I9BBB, I9BBBBBBBB)
	external view returns (uint);
	function f1() override
	external view returns (uint);
}
interface I9B is I9BB, I9BBBBBBB {

	function f0() override(I9BBB, I9BBBBBBB)
	external view returns (uint);
	function f1() override(I9BB, I9BBBBBBB)
	external view returns (uint);
}

interface I9BBBBBBBBB is I9BBBBBBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() external payable returns (uint);
}
interface I9 is I9B, I9BBBBBBBBB {

	function f0() override(I9B, I9BBBBBBBBB)
	external view returns (uint);
	function f1() override(I9B, I9BBBBBBBBB)
	external view returns (uint);
	function f2() override
	external payable returns (uint);
}





interface I10BBBB {

	function f0() external payable returns (uint);
}
interface I10BBB is I10BBBB {

}
interface I10BB is I10BBB {

	function f0() override
	external payable returns (uint);
}




interface I10BBBBBBBB {

	function f0() external payable returns (uint);
}
interface I10BBBBBBB is I10BBBBBBBB {

	function f0() override
	external payable returns (uint);
}
interface I10BBBBBB is I10BBBBBBB {

	function f0() override
	external payable returns (uint);
}
interface I10BBBBB is I10BB, I10BBBBBB {

	function f0() override(I10BB, I10BBBBBB)
	external payable returns (uint);
}
interface I10B is I10BB, I10BBBBB {

	function f0() override(I10BB, I10BBBBB)
	external payable returns (uint);
}
interface I10 is I10B {

	function f0() override
	external payable returns (uint);
}


contract C {
	using L6 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1957747793)
			return 1;
		return 0;
	}
}

