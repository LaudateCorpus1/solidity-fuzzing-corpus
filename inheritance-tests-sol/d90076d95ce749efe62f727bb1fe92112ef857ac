
pragma solidity >=0.0;


library L0 {

	function f0(uint) public pure returns (uint)
	{
		return 1804289383;
	}
}

contract C1 {

	function f0() public view
	
	returns (uint)
	{
		return 182605794;
	}
}





interface C2BBBB {

	function f0() external view returns (uint);
}
interface C2BBB is C2BBBB {

	function f0() override
	external view returns (uint);
}
interface C2BB is C2BBB {

}
interface C2B is C2BB {

}
contract C2 is C2B {

	function f0() external view
	override
	returns (uint)
	{
		return 1596680831;
	}
}



abstract contract C3BB {

}
contract C3B is C3BB {

}



interface C3BBBBB {

	function f0() external payable returns (uint);
}
interface C3BBBB is C3BBBBB {

}
interface C3BBB is C3BBBB {

}
contract C3 is C3B, C3BBB {

	function f0() external payable
	override
	returns (uint)
	{
		return 1882556969;
	}
}



interface I4BB {

	function f0() external view returns (uint);
}
interface I4B is I4BB {

	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I4 is I4B {

	function f1() override
	external payable returns (uint);
}
library L5 {

	function f0(uint) public pure returns (uint)
	{
		return 1681692777;
	}
}







interface C6BBBBBB {

	function f0() external view returns (uint);
}
interface C6BBBBB is C6BBBBBB {

	function f0() override
	external view returns (uint);
}
interface C6BBBB is C6BBBBB {

}
interface C6BBB is C6BBBB {

	function f0() override
	external view returns (uint);
}



interface C6BBBBBBBBB {

}
interface C6BBBBBBBB is C6BBBBBBBBB {

}
interface C6BBBBBBB is C6BBBB, C6BBBBBBBB {

}
interface C6BB is C6BBB, C6BBBBBBB {

	function f0() override(C6BBB, C6BBBBB)
	external view returns (uint);
}
interface C6B is C6BB {

}
contract C6 is C6B {

	function f0() virtual external view
	override
	returns (uint)
	{
		return 1696049367;
	}
}




interface C7BBB {

	function f0() external view returns (uint);
}
interface C7BB is C7BBB {

	function f0() override
	external view returns (uint);
}
abstract contract C7B is C7BB {

	function f0() virtual external view
	override
	returns (uint);
}
contract C7 is C7B {

	function f0() external view
	override
	returns (uint)
	{
		return 1814467857;
	}
}

contract C8 {

	function f0() virtual public pure
	
	returns (uint)
	{
		return 1057382352;
	}
}





interface C9BBBB {

	function f0() external payable returns (uint);
}
interface C9BBB is C9BBBB {

}
interface C9BB is C9BBB {

	function f0() override
	external payable returns (uint);
	function f1() external payable returns (uint);
}
interface C9B is C9BB {

	function f0() override
	external payable returns (uint);
}



interface C9BBBBBBB {

}


interface C9BBBBBBBBB {

	function f0() external payable returns (uint);
	function f1() external payable returns (uint);
}
interface C9BBBBBBBB is C9BBBBBBB, C9BBBBBBBBB {

}
interface C9BBBBBB is C9BBBBBBB, C9BBBBBBBB {

	function f1() override
	external payable returns (uint);
}
interface C9BBBBB is C9BB, C9BBBBBB {

	function f0() override(C9BB, C9BBBBBBBBB)
	external payable returns (uint);
	function f1() override(C9BB, C9BBBBBB)
	external payable returns (uint);
}
contract C9 is C9B, C9BBBBB {

	function f0() external payable
	override(C9BBBBB, C9B)
	returns (uint)
	{
		return 1239222494;
	}
	function f1() external payable
	override(C9BBBBB, C9BB)
	returns (uint)
	{
		return 1500063655;
	}
}
library L10 {

	function f0(uint) public pure returns (uint)
	{
		return 719885386;
	}
}
library L11 {

	function f0(uint) public pure returns (uint)
	{
		return 1649760492;
	}
}
library L12 {

	function f0(uint) public view returns (uint)
	{
		return 596516649;
	}
}


contract C {
	function test() public returns (uint)
	{
			C1 tc0 = new C1();
			if (tc0.f0() != 182605794)
				return 1;
			C2 tc1 = new C2();
			if (tc1.f0() != 1596680831)
				return 2;
			C3 tc2 = new C3();
			if (tc2.f0() != 1882556969)
				return 3;
			C6 tc3 = new C6();
			if (tc3.f0() != 1696049367)
				return 4;
			C7 tc4 = new C7();
			if (tc4.f0() != 1814467857)
				return 5;
			C8 tc5 = new C8();
			if (tc5.f0() != 1057382352)
				return 6;
			C9 tc6 = new C9();
			if (tc6.f0() != 1239222494)
				return 7;
			if (tc6.f1() != 1500063655)
				return 8;
			return 0;
	}
}

