
pragma solidity >=0.0;




contract C0B {

}
contract C0 is C0B {

	function f0() public payable
	
	returns (uint)
	{
		return 48271;
	}
}





interface C1BBBB {

	function f0() external view returns (uint);
}
contract C1BBB is C1BBBB {

	function f0() virtual external view
	override
	returns (uint)
	{
		return 1291394886;
	}
	function f1() external pure
	
	returns (uint)
	{
		return 1914720637;
	}
}
contract C1BB is C1BBB {

}
contract C1B is C1BB {

}
contract C1 is C1B {

}


interface I2B {

	function f0() external payable returns (uint);
}
interface I2 is I2B {

}





interface I3BBBB {

	function f0() external payable returns (uint);
}
interface I3BBB is I3BBBB {

}
interface I3BB is I3BBB {

}
interface I3B is I3BB {

}
interface I3 is I3B {

	function f0() override
	external payable returns (uint);
	function f1() external payable returns (uint);
	function f2() external payable returns (uint);
	function f3() external view returns (uint);
}


interface I4B {

	function f0() external payable returns (uint);
}
interface I4 is I4B {

}
library L5 {

	function f0(uint) external pure returns (uint)
	{
		return 1804289383;
	}
}


interface I6B {

	function f0() external view returns (uint);
}
interface I6 is I6B {

	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
	function f2() external view returns (uint);
}

contract C7 {

	function f0() virtual public view
	
	returns (uint)
	{
		return 914937185;
	}
}



interface I8BB {

	function f0() external view returns (uint);
	function f1() external payable returns (uint);
}
interface I8B is I8BB {

	function f0() override
	external view returns (uint);
	function f2() external view returns (uint);
}
interface I8 is I8B {

	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
}





interface I9BBBB {

}
interface I9BBB is I9BBBB {

}
interface I9BB is I9BBB {

}
interface I9B is I9BB {

}
interface I9 is I9B {

	function f0() external payable returns (uint);
	function f1() external payable returns (uint);
	function f2() external view returns (uint);
}




contract C10BBB {

	function f0() virtual public pure
	
	returns (uint)
	{
		return 890442452;
	}
}
contract C10BB is C10BBB {

}
contract C10B is C10BB {

	function f0() public pure
	override
	returns (uint)
	{
		return 1479919876;
	}
}
contract C10 is C10B {

	function f1() virtual public pure
	
	returns (uint)
	{
		return 1272185027;
	}
}


contract C11B {

}
contract C11 is C11B {

	function f0() public view
	
	returns (uint)
	{
		return 201068705;
	}
}




interface I12BBB {

	function f0() external view returns (uint);
}
interface I12BB is I12BBB {

	function f0() override
	external view returns (uint);
}
interface I12B is I12BB {

}
interface I12 is I12B {

	function f0() override
	external view returns (uint);
}


contract C {
	function test() public returns (uint)
	{
			C0 tc0 = new C0();
			if (tc0.f0() != 48271)
				return 1;
			C1 tc1 = new C1();
			if (tc1.f0() != 1291394886)
				return 2;
			if (tc1.f1() != 1914720637)
				return 3;
			C10 tc2 = new C10();
			if (tc2.f0() != 1479919876)
				return 4;
			if (tc2.f1() != 1272185027)
				return 5;
			C10B tc3 = new C10B();
			if (tc3.f0() != 1479919876)
				return 6;
			C10BB tc4 = new C10BB();
			if (tc4.f0() != 890442452)
				return 7;
			C10BBB tc5 = new C10BBB();
			if (tc5.f0() != 890442452)
				return 8;
			C11 tc6 = new C11();
			if (tc6.f0() != 201068705)
				return 9;
			C1B tc7 = new C1B();
			if (tc7.f0() != 1291394886)
				return 10;
			if (tc7.f1() != 1914720637)
				return 11;
			C1BB tc8 = new C1BB();
			if (tc8.f0() != 1291394886)
				return 12;
			if (tc8.f1() != 1914720637)
				return 13;
			C1BBB tc9 = new C1BBB();
			if (tc9.f0() != 1291394886)
				return 14;
			if (tc9.f1() != 1914720637)
				return 15;
			C7 tc10 = new C7();
			if (tc10.f0() != 914937185)
				return 16;
			return 0;
	}
}

