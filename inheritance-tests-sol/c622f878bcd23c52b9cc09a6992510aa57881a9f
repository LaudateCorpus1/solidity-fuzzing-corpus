
pragma solidity >=0.0;





interface I0BB {

	function f0() external view returns (uint);
}
interface I0B is I0BB {

	function f1() external payable returns (uint);
}

interface I0BBB is I0BB {

	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I0 is I0B, I0BBB {

	function f0() override(I0BB, I0BBB)
	external view returns (uint);
	function f1() override(I0B, I0BBB)
	external payable returns (uint);
}




interface C1BBB {

	function f0() external view returns (uint);
}
interface C1BB is C1BBB {

}
interface C1B is C1BB {

}
contract C1 is C1B {

	function f0() external view
	override
	returns (uint)
	{
		return 1596680831;
	}
}


interface I2B {

	function f0() external pure returns (uint);
	function f1() external pure returns (uint);
}
interface I2 is I2B {

}



interface I3BB {

	function f0() external view returns (uint);
}
interface I3B is I3BB {

	function f1() external payable returns (uint);
}
interface I3 is I3B {

}
library L4 {

	function f0(uint) external pure returns (uint)
	{
		return 846930886;
	}
}
library L5 {

	function f0(uint) external pure returns (uint)
	{
		return 1681692777;
	}
}



interface I6BB {

	function f0() external view returns (uint);
}
interface I6B is I6BB {

	function f1() external payable returns (uint);
}
interface I6 is I6B {

	function f0() override
	external view returns (uint);
}
library L8 {

	function f0(uint) external pure returns (uint)
	{
		return 1957747793;
	}
}


interface C9B {

	function f0() external payable returns (uint);
}
contract C9 is C9B {

	function f0() virtual external payable
	override
	returns (uint)
	{
		return 353718330;
	}
}


contract C {
	function test() public returns (uint)
	{
			C1 tc0 = new C1();
			if (tc0.f0() != 1596680831)
				return 1;
			C9 tc1 = new C9();
			if (tc1.f0() != 353718330)
				return 2;
			return 0;
	}
}

