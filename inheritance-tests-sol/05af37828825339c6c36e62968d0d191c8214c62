pragma solidity >=0.0;
library L0 {
	function f0(uint) public pure returns (uint)
	{
		return 1804289383;
	}
}
library L1 {
	function f0(uint) external pure returns (uint)
	{
		return 846930886;
	}
}
library L2 {
	function f0(uint) external pure returns (uint)
	{
		return 1681692777;
	}
}
interface C3BBBBB {
	function f0() external view returns (uint);
}
interface C3BBBB is C3BBBBB {
}
interface C3BBB is C3BBBB {
}
interface C3BB is C3BBB {
}
contract C3B is C3BB {
	function f0() external view
	override
	returns (uint)
	{
		return 192302371;
	}
}
contract C3 is C3B {
}
interface I6B {
	function f0() external payable returns (uint);
	function f1() external view returns (uint);
}
interface I6BBBBB {
	function f0() external payable returns (uint);
}
interface I6BBBB is I6BBBBB {
}
interface I6BBB is I6BBBB {
	function f0() override
	external payable returns (uint);
}
interface I6BB is I6B, I6BBB {
	function f0() override(I6B, I6BBB)
	external payable returns (uint);
	function f1() override
	external view returns (uint);
}
interface I6 is I6B, I6BB {
	function f0() override(I6B, I6BB)
	external payable returns (uint);
	function f1() override(I6B, I6BB)
	external view returns (uint);
}
interface I7B {
	function f0() external payable returns (uint);
	function f1() external view returns (uint);
}
interface I7BBBBB {
	function f0() external payable returns (uint);
}
interface I7BBBB is I7BBBBB {
}
interface I7BBB is I7BBBB {
	function f0() override
	external payable returns (uint);
}
interface I7BB is I7B, I7BBB {
	function f0() override(I7B, I7BBB)
	external payable returns (uint);
}
interface I7 is I7B, I7BB {
	function f0() override(I7B, I7BB)
	external payable returns (uint);
}
interface I8B {
	function f0() external payable returns (uint);
	function f1() external view returns (uint);
}
interface I8BBBBB {
	function f0() external payable returns (uint);
}
interface I8BBBB is I8BBBBB {
	function f0() override
	external payable returns (uint);
}
interface I8BBB is I8BBBB {
	function f0() override
	external payable returns (uint);
}
interface I8BB is I8B, I8BBB {
	function f0() override(I8B, I8BBB)
	external payable returns (uint);
}
interface I8 is I8B, I8BB {
	function f0() override(I8B, I8BB)
	external payable returns (uint);
}
contract C11 {
	function f0() virtual public pure
	
	returns (uint)
	{
		return 928270262;
	}
}
contract C {
	function test() public returns (uint)
	{
			C11 tc0 = new C11();
			if (tc0.f0() != 928270262)
				return 1;
			C3 tc1 = new C3();
			if (tc1.f0() != 192302371)
				return 2;
			C3B tc2 = new C3B();
			if (tc2.f0() != 192302371)
				return 3;
			return 0;
	}
}
