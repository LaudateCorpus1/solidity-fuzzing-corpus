pragma solidity >=0.0;
interface I0B {
	function f0() external view returns (uint);
}
interface I0BBBBB {
	function f0() external view returns (uint);
}
interface I0BBBB is I0BBBBB {
}
interface I0BBB is I0BBBB {
}
interface I0BB is I0B, I0BBB {
	function f0() override(I0B, I0BBBBB)
	external view returns (uint);
}
interface I0 is I0B, I0BB {
	function f0() override(I0B, I0BB)
	external view returns (uint);
}
interface I1BBBBBB {
}
interface I1BBBBB is I1BBBBBB {
}
interface I1BBBB is I1BBBBB {
}
interface I1BBBBBBBBBB {
}
interface I1BBBBBBBBB is I1BBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I1BBBBBBBB is I1BBBBBBBBB {
}
interface I1BBBBBBB is I1BBBB, I1BBBBBBBB {
}
interface I1BBB is I1BBBB, I1BBBBBBB {
	function f1() external payable returns (uint);
}
interface I1BB is I1BBB {
	function f0() override
	external view returns (uint);
	function f2() external view returns (uint);
}
interface I1B is I1BB {
}
interface I1BBBBBBBBBBBBBB {
}
interface I1BBBBBBBBBBBBB is I1BBBBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I1BBBBBBBBBBBB is I1BBBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface I1BBBBBBBBBBB is I1BB, I1BBBBBBBBBBBB {
	function f0() override(I1BB, I1BBBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
}
interface I1 is I1B, I1BBBBBBBBBBB {
	function f0() override(I1BB, I1BBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I1BBB, I1BBBBBBBBBBB)
	external payable returns (uint);
	function f2() override(I1BB, I1BBBBBBBBBBB)
	external view returns (uint);
	function f3() external payable returns (uint);
}
interface I2BBBB {
	function f0() external view returns (uint);
}
interface I2BBB is I2BBBB {
	function f0() override
	external view returns (uint);
}
interface I2BB is I2BBB {
}
interface I2B is I2BB {
	function f0() override
	external view returns (uint);
}
interface I2BBBBB is I2BB {
	function f1() external view returns (uint);
}
interface I2 is I2B, I2BBBBB {
	function f0() override(I2B, I2BBB)
	external view returns (uint);
}
interface I3 {
	function f0() external payable returns (uint);
}
library L4 {
	function f0(uint) external pure returns (uint)
	{
		return 1957747793;
	}
}
contract C {
	using L4 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1957747793)
			return 1;
		return 0;
	}
}
