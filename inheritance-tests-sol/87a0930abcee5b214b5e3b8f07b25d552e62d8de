pragma solidity >=0.0;
contract C0B {
	function f0() virtual public pure
	
	returns (uint)
	{
		return 494295040;
	}
}
abstract contract C0 is C0B {
	function f0() public pure
	override
	returns (uint)
	{
		return 213625770;
	}
}
interface I1 {
	function f0() external view returns (uint);
}
interface I2BBBBBB {
	function f0() external view returns (uint);
}
interface I2BBBBB is I2BBBBBB {
	function f1() external view returns (uint);
}
interface I2BBBB is I2BBBBB {
}
interface I2BBB is I2BBBB {
	function f1() override
	external view returns (uint);
	function f2() external payable returns (uint);
}
interface I2BB is I2BBB {
	function f0() override
	external view returns (uint);
}
interface I2B is I2BB {
	function f0() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
}
interface I2 is I2B {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
}
interface I3BBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I3BBBBBBBBB is I3BBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I3BBBBBBBB is I3BBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I3BBBBBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I3BBBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBBB {
}
interface I3BBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I3BBBBBBBBBBBBB is I3BBBBBBBBBBBBBB {
}
interface I3BBBBBBBBBBBB is I3BBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I3BBBBBBBBBBB is I3BBBBBBBBB, I3BBBBBBBBBBBB {
	function f0() override(I3BBBBBBBBB, I3BBBBBBBBBBBB)
	external payable returns (uint);
}
interface I3BBBBBBB is I3BBBBBBBB, I3BBBBBBBBBBB {
	function f0() override(I3BBBBBBBB, I3BBBBBBBBBBB)
	external payable returns (uint);
}
interface I3BBBBBB is I3BBBBBBB {
}
interface I3BBBBB is I3BBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I3BBBBBBBBBBBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I3BBBBBBBBBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I3BBBBBBBBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I3BBBBBBBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBBBBBBB {
}
interface I3BBBBBBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I3BBBBBBBBBBBBBBBBB is I3BBBBB, I3BBBBBBBBBBBBBBBBBB {
	function f0() override(I3BBBBB, I3BBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
}
interface I3BBBB is I3BBBBB, I3BBBBBBBBBBBBBBBBB {
	function f0() override(I3BBBBB, I3BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
}
interface I3BBB is I3BBBB {
	function f0() override
	external payable returns (uint);
}
interface I3BB is I3BBB {
	function f0() override
	external payable returns (uint);
}
interface I3BBBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I3BBBBBBBBBBBBBBBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I3BBBBBBBBBBBBBBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I3BBBBBBBBBBBBBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBBBBBBBBBBBBB {
}
interface I3BBBBBBBBBBBBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I3BBBBBBBBBBBBBBBBBBBBBBB is I3BBB, I3BBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I3BBB, I3BBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
}
interface I3B is I3BB, I3BBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I3BB, I3BBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
}
interface I3 is I3B {
	function f0() override
	external payable returns (uint);
}
library L4 {
	function f0(uint) private pure returns (uint)
	{
		return 1714636915;
	}
	function f1(uint) public pure returns (uint)
	{
		return 1957747793;
	}
}
library L5 {
	function f0(uint) private pure returns (uint)
	{
		return 424238335;
	}
}
library L6 {
	function f0(uint) external pure returns (uint)
	{
		return 719885386;
	}
	function f1(uint) internal pure returns (uint)
	{
		return 1649760492;
	}
}
library L7 {
	function f0(uint) private pure returns (uint)
	{
		return 596516649;
	}
}
contract C {
	using L6 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 719885386)
			return 1;
		return 0;
	}
}
