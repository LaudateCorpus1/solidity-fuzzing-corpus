pragma solidity >=0.0;
interface I0 {
	function f0() external view returns (uint);
}
library L1 {
	function f0(uint) public pure returns (uint)
	{
		return 1804289383;
	}
}
interface C7B {
	function f0() external payable returns (uint);
}
contract C7 is C7B {
	function f0() virtual external payable
	override
	returns (uint)
	{
		return 285379567;
	}
}
interface C8B {
}
contract C8 is C8B {
	function f0() virtual public pure
	
	returns (uint)
	{
		return 1596966799;
	}
}
interface I10BB {
	function f0() external payable returns (uint);
}
interface I10B is I10BB {
}
interface I10BBB is I10B {
	function f1() external view returns (uint);
	function f2() external view returns (uint);
}
interface I10 is I10B, I10BBB {
	function f1() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
}
interface C13BBB {
	function f0() external payable returns (uint);
}
interface C13BB is C13BBB {
	function f0() override
	external payable returns (uint);
}
interface C13B is C13BB {
	function f0() override
	external payable returns (uint);
}
contract C13 is C13B {
	function f0() external payable
	override
	returns (uint)
	{
		return 2063036823;
	}
}
library L15 {
	function f0(uint) external pure returns (uint)
	{
		return 1681692777;
	}
}
interface C26B {
	function f0() external payable returns (uint);
}
contract C26 is C26B {
	function f0() virtual external payable
	override
	returns (uint)
	{
		return 877046539;
	}
}
interface C27BBB {
	function f0() external payable returns (uint);
}
interface C27BB is C27BBB {
}
interface C27B is C27BB {
}
contract C27 is C27B {
	function f0() external payable
	override
	returns (uint)
	{
		return 1855208358;
	}
}
contract C {
	using L1 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1804289383)
			return 1;
		return 0;
	}
}
