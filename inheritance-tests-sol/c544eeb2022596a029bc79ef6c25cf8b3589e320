pragma solidity >=0.0;
interface I0BBB {
	function f0() external view returns (uint);
}
interface I0BBBBB {
	function f0() external view returns (uint);
	function f1() external view returns (uint);
}
interface I0BBBB is I0BBB, I0BBBBB {
	function f0() override(I0BBB, I0BBBBB)
	external view returns (uint);
}
interface I0BB is I0BBB, I0BBBB {
	function f0() override(I0BBB, I0BBBB)
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() external view returns (uint);
}
interface I0B is I0BB {
}
interface I0 is I0B {
	function f3() external view returns (uint);
	function f4() external payable returns (uint);
}
interface I1BBB {
	function f0() external payable returns (uint);
	function f1() external payable returns (uint);
}
interface I1BB is I1BBB {
}
interface I1B is I1BB {
}
interface I1BBBBB {
	function f0() external payable returns (uint);
}
interface I1BBBB is I1B, I1BBBBB {
	function f0() override(I1BBB, I1BBBBB)
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() external payable returns (uint);
}
interface I1 is I1B, I1BBBB {
	function f0() override(I1BBB, I1BBBB)
	external payable returns (uint);
	function f1() override(I1BBB, I1BBBB)
	external payable returns (uint);
}
interface C2BBBB {
	function f0() external payable returns (uint);
}
interface C2BBB is C2BBBB {
	function f0() override
	external payable returns (uint);
}
contract C2BB is C2BBB {
	function f0() virtual external payable
	override
	returns (uint)
	{
		return 1402304087;
	}
}
abstract contract C2B is C2BB {
	function f0() virtual external payable
	override
	returns (uint)
	{
		return 1842513780;
	}
}
contract C2 is C2B {
	function f1() public view
	
	returns (uint)
	{
		return 2010567813;
	}
}
interface I3BBB {
}
interface I3BB is I3BBB {
	function f0() external view returns (uint);
}
interface I3B is I3BB {
}
interface I3BBBBBB {
	function f0() external view returns (uint);
}
interface I3BBBBB is I3BBBBBB {
	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I3BBBB is I3BB, I3BBBBB {
	function f0() override(I3BB, I3BBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I3 is I3B, I3BBBB {
	function f0() override(I3BB, I3BBBB)
	external view returns (uint);
	function f2() external payable returns (uint);
}
interface I4 {
	function f0() external pure returns (uint);
}
interface I5BBBBB {
	function f0() external view returns (uint);
}
interface I5BBBB is I5BBBBB {
}
interface I5BBB is I5BBBB {
	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I5BB is I5BBB {
	function f1() override
	external payable returns (uint);
}
interface I5B is I5BB {
	function f1() override
	external payable returns (uint);
}
interface I5 is I5B {
	function f0() override
	external view returns (uint);
}
contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}
