
pragma solidity >=0.0;



interface I1 {

	function f0() external view returns (uint);
}

interface I2 {

	function f0() external view returns (uint);
}






interface I3BBBBB {

	function f0() external view returns (uint);
}

interface I3BBBBBB is I3BBBBB {

	function f1() external view returns (uint);
}
interface I3BBBB is I3BBBBB, I3BBBBBB {

}
interface I3BBB is I3BBBB {

	function f0() override
	external view returns (uint);
}
interface I3BB is I3BBB {

	function f0() override
	external view returns (uint);
}


interface I3BBBBBBBB {

	function f0() external view returns (uint);
}
interface I3BBBBBBB is I3BBB, I3BBBBBBBB {

	function f0() override(I3BBB, I3BBBBBBBB)
	external view returns (uint);
}
interface I3B is I3BB, I3BBBBBBB {

	function f0() override(I3BB, I3BBBBBBB)
	external view returns (uint);
	function f1() override
	external view returns (uint);
}

interface I3BBBBBBBBB is I3BB {

	function f0() override
	external view returns (uint);
}

interface I3BBBBBBBBBB is I3BB {

	function f1() override
	external view returns (uint);
	function f2() external view returns (uint);
	function f3() external payable returns (uint);
	function f4() external payable returns (uint);
}
interface I3 is I3B, I3BBBBBBBBB, I3BBBBBBBBBB {

	function f0() override(I3B, I3BBBBBBBBB, I3BB)
	external view returns (uint);
	function f1() override(I3B, I3BBBBBB, I3BBBBBBBBBB)
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override
	external payable returns (uint);
}
library L4 {

	function f0(uint) public view returns (uint)
	{
		return 719885386;
	}
}


contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}

