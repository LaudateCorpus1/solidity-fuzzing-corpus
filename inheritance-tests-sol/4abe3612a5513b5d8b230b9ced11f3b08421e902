pragma solidity >=0.0;
interface I1BBB {
}
interface I1BB is I1BBB {
	function f0() external view returns (uint);
}
interface I1BBBBB {
	function f0() external view returns (uint);
}
interface I1BBBB is I1BBB, I1BBBBB {
	function f1() external payable returns (uint);
}
interface I1B is I1BB, I1BBBB {
	function f0() override(I1BB, I1BBBBB)
	external view returns (uint);
}
interface I1 is I1B {
}
library L2 {
	function f0(uint) public view returns (uint)
	{
		return 846930886;
	}
	function f1(uint) public view returns (uint)
	{
		return 1681692777;
	}
}
interface I4B {
}
interface I4 is I4B {
}
library L5 {
	function f0(uint) public view returns (uint)
	{
		return 1714636915;
	}
	function f1(uint) private pure returns (uint)
	{
		return 1957747793;
	}
}
interface I6BBB {
	function f0() external payable returns (uint);
}
interface I6BB is I6BBB {
}
interface I6B is I6BB {
}
interface I6BBBB is I6BB {
	function f0() override
	external payable returns (uint);
	function f1() external view returns (uint);
}
interface I6 is I6B, I6BBBB {
	function f0() override(I6BBB, I6BBBB)
	external payable returns (uint);
	function f1() override
	external view returns (uint);
	function f2() external payable returns (uint);
}
interface I7B {
	function f0() external view returns (uint);
}
interface I7 is I7B {
}
interface I8 {
	function f0() external view returns (uint);
}
interface I9BBB {
}
interface I9BB is I9BBB {
	function f0() external payable returns (uint);
}
interface I9B is I9BB {
	function f0() override
	external payable returns (uint);
}
interface I9BBBBBB {
	function f0() external payable returns (uint);
}
interface I9BBBBB is I9BBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() external payable returns (uint);
}
interface I9BBBB is I9B, I9BBBBB {
	function f0() override(I9B, I9BBBBB)
	external payable returns (uint);
}
interface I9 is I9B, I9BBBB {
	function f0() override(I9B, I9BBBB)
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() external payable returns (uint);
}
contract C {
	using L5 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1714636915)
			return 1;
		return 0;
	}
}
