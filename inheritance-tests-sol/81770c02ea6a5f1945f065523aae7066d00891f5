
pragma solidity >=0.0;










interface C0BBBBBBB {

	function f0() external view returns (uint);
}
interface C0BBBBBB is C0BBBBBBB {

}
interface C0BBBBB is C0BBBBBB {

	function f0() override
	external view returns (uint);
}
interface C0BBBB is C0BBBBB {

}
interface C0BBB is C0BBBB {

}
interface C0BB is C0BBB {

}
contract C0B is C0BB {

	function f0() external view
	override
	returns (uint)
	{
		return 1203428207;
	}
}
contract C0 is C0B {

}


interface I1B {

	function f0() external pure returns (uint);
}
interface I1 is I1B {

}



interface I2BB {

	function f0() external view returns (uint);
}
interface I2B is I2BB {

	function f1() external payable returns (uint);
}


interface I2BBBB {

	function f0() external view returns (uint);
}
interface I2BBB is I2BB, I2BBBB {

	function f0() override(I2BB, I2BBBB)
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I2 is I2B, I2BBB {

	function f0() override(I2BB, I2BBB)
	external view returns (uint);
	function f1() override(I2B, I2BBB)
	external payable returns (uint);
}
library L4 {

	function f0(uint) internal view returns (uint)
	{
		return 846930886;
	}
}
library L5 {

	function f0(uint) private pure returns (uint)
	{
		return 1681692777;
	}
}
library L6 {

	function f0(uint) private pure returns (uint)
	{
		return 1714636915;
	}
}
library L7 {

	function f0(uint) internal pure returns (uint)
	{
		return 1957747793;
	}
	function f1(uint) private pure returns (uint)
	{
		return 424238335;
	}
}



interface C8BB {

	function f0() external payable returns (uint);
}
interface C8B is C8BB {

	function f0() override
	external payable returns (uint);
}
contract C8 is C8B {

	function f0() external payable
	override
	returns (uint)
	{
		return 638022372;
	}
	function f1() public view
	
	returns (uint)
	{
		return 914937185;
	}
	function f2() public payable
	
	returns (uint)
	{
		return 1931656580;
	}
	function f3() public pure
	
	returns (uint)
	{
		return 1402304087;
	}
}


interface I9B {

	function f0() external pure returns (uint);
}
interface I9 is I9B {

}



interface I10BB {

	function f0() external payable returns (uint);
}
interface I10B is I10BB {

	function f0() override
	external payable returns (uint);
	function f1() external pure returns (uint);
}
interface I10 is I10B {

	function f0() override
	external payable returns (uint);
}


contract C {
	function test() public returns (uint)
	{
			C0 tc0 = new C0();
			if (tc0.f0() != 1203428207)
				return 1;
			C0B tc1 = new C0B();
			if (tc1.f0() != 1203428207)
				return 2;
			C8 tc2 = new C8();
			if (tc2.f0() != 638022372)
				return 3;
			if (tc2.f1() != 914937185)
				return 4;
			if (tc2.f2() != 1931656580)
				return 5;
			if (tc2.f3() != 1402304087)
				return 6;
			return 0;
	}
}

