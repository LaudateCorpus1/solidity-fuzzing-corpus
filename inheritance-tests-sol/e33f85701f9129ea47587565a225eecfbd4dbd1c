
pragma solidity >=0.0;









interface I1BBBBBB {

}
interface I1BBBBB is I1BBBBBB {

	function f0() external view returns (uint);
}
interface I1BBBB is I1BBBBB {

}




interface I1BBBBBBBBBB {

}
interface I1BBBBBBBBB is I1BBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I1BBBBBBBB is I1BBBBBBBBB {

}
interface I1BBBBBBB is I1BBBB, I1BBBBBBBB {

	function f0() override(I1BBBBB, I1BBBBBBBBB)
	external view returns (uint);
}
interface I1BBB is I1BBBB, I1BBBBBBB {

	function f0() override(I1BBBBB, I1BBBBBBB)
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I1BB is I1BBB {

	function f2() external view returns (uint);
}
interface I1B is I1BB {

	function f2() override
	external view returns (uint);
}





interface I1BBBBBBBBBBBBBBB {

}
interface I1BBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I1BBBBBBBBBBBBB is I1BBBBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I1BBBBBBBBBBBB is I1BBBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I1BBBBBBBBBBB is I1BB, I1BBBBBBBBBBBB {

	function f0() override(I1BBB, I1BBBBBBBBBBBB)
	external view returns (uint);
	function f2() override
	external view returns (uint);
}
interface I1 is I1B, I1BBBBBBBBBBB {

	function f0() override(I1BBB, I1BBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override(I1B, I1BBBBBBBBBBB)
	external view returns (uint);
	function f3() external payable returns (uint);
}

interface I2 {

	function f0() external payable returns (uint);
}


interface I4B {

	function f0() external view returns (uint);
}




interface I4BBBBB {

	function f0() external view returns (uint);
}
interface I4BBBB is I4BBBBB {

}
interface I4BBB is I4BBBB {

}
interface I4BB is I4B, I4BBB {

	function f0() override(I4B, I4BBBBB)
	external view returns (uint);
}
interface I4 is I4B, I4BB {

	function f0() override(I4B, I4BB)
	external view returns (uint);
}

contract C6 {

	function f0() virtual public pure
	
	returns (uint)
	{
		return 1105724094;
	}
}


interface I7B {

	function f0() external payable returns (uint);
}




interface I7BBBBB {

	function f0() external payable returns (uint);
}
interface I7BBBB is I7BBBBB {

	function f0() override
	external payable returns (uint);
}
interface I7BBB is I7BBBB {

	function f0() override
	external payable returns (uint);
}
interface I7BB is I7B, I7BBB {

	function f0() override(I7B, I7BBB)
	external payable returns (uint);
}
interface I7 is I7B, I7BB {

	function f0() override(I7B, I7BB)
	external payable returns (uint);
}
library L8 {

	function f0(uint) external pure returns (uint)
	{
		return 424238335;
	}
}

interface I9 {

	function f0() external payable returns (uint);
}


interface I11B {

	function f0() external view returns (uint);
}
interface I11 is I11B {

	function f0() override
	external view returns (uint);
}



interface I12BB {

	function f0() external payable returns (uint);
}
interface I12B is I12BB {

	function f1() external view returns (uint);
}
interface I12 is I12B {

	function f0() override
	external payable returns (uint);
}


contract C {
	function test() public returns (uint)
	{
			C6 tc0 = new C6();
			if (tc0.f0() != 1105724094)
				return 1;
			return 0;
	}
}

