
pragma solidity >=0.0;





interface I0BB {

	function f0() external payable returns (uint);
}
interface I0B is I0BB {

}
interface I0 is I0B {

	function f0() override
	external payable returns (uint);
}
library L1 {

	function f0(uint) internal pure returns (uint)
	{
		return 1804289383;
	}
	function f1(uint) internal pure returns (uint)
	{
		return 846930886;
	}
}
library L2 {

	function f0(uint) public view returns (uint)
	{
		return 1681692777;
	}
}



abstract contract C3BB {

	function f0() virtual public pure
	
	returns (uint);
	function f1() virtual public view
	
	returns (uint);
}
contract C3B is C3BB {

	function f0() public pure
	override
	returns (uint)
	{
		return 1596680831;
	}
	function f1() public view
	override
	returns (uint)
	{
		return 1203428207;
	}
}
contract C3 is C3B {

}










interface I4BBBBBBBBB {

}
interface I4BBBBBBBB is I4BBBBBBBBB {

	function f0() external view returns (uint);
}
interface I4BBBBBBB is I4BBBBBBBB {

}
interface I4BBBBBB is I4BBBBBBB {

}
interface I4BBBBB is I4BBBBBB {

}
interface I4BBBB is I4BBBBB {

	function f0() override
	external view returns (uint);
}




interface I4BBBBBBBBBBBBB {

}
interface I4BBBBBBBBBBBB is I4BBBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I4BBBBBBBBBBB is I4BBBBBBBBBBBB {

}
interface I4BBBBBBBBBB is I4BBBBB, I4BBBBBBBBBBB {

	function f0() override(I4BBBBBBBB, I4BBBBBBBBBBBB)
	external view returns (uint);
}
interface I4BBB is I4BBBB, I4BBBBBBBBBB {

	function f0() override(I4BBBB, I4BBBBBBBBBB)
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I4BB is I4BBB {

	function f0() override
	external view returns (uint);
	function f2() external view returns (uint);
}
interface I4B is I4BB {

	function f1() override
	external payable returns (uint);
}




interface I4BBBBBBBBBBBBBBBBB {

}
interface I4BBBBBBBBBBBBBBBB is I4BBBBBBBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I4BBBBBBBBBBBBBBB is I4BBBBBBBBBBBBBBBB {

}
interface I4BBBBBBBBBBBBBB is I4BB, I4BBBBBBBBBBBBBBB {

	function f0() override(I4BB, I4BBBBBBBBBBBBBBBB)
	external view returns (uint);
}
interface I4 is I4B, I4BBBBBBBBBBBBBB {

	function f0() override(I4BB, I4BBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I4B, I4BBB)
	external payable returns (uint);
	function f2() override
	external view returns (uint);
	function f3() external payable returns (uint);
}
library L6 {

	function f0(uint) internal view returns (uint)
	{
		return 424238335;
	}
	function f1(uint) public view returns (uint)
	{
		return 719885386;
	}
}
library L7 {

	function f0(uint) private pure returns (uint)
	{
		return 1649760492;
	}
}


interface I8B {

	function f0() external view returns (uint);
}
interface I8 is I8B {

	function f0() override
	external view returns (uint);
}

interface I10 {

	function f0() external payable returns (uint);
}
library L11 {

	function f0(uint) internal pure returns (uint)
	{
		return 596516649;
	}
	function f1(uint) public view returns (uint)
	{
		return 1189641421;
	}
}







interface I13BBBBBB {

}
interface I13BBBBB is I13BBBBBB {

}
interface I13BBBB is I13BBBBB {

}




interface I13BBBBBBBBBB {

}
interface I13BBBBBBBBB is I13BBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I13BBBBBBBB is I13BBBBBBBBB {

}
interface I13BBBBBBB is I13BBBB, I13BBBBBBBB {

}
interface I13BBB is I13BBBB, I13BBBBBBB {

	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I13BB is I13BBB {

	function f0() override
	external view returns (uint);
	function f2() external view returns (uint);
}
interface I13B is I13BB {

	function f1() override
	external payable returns (uint);
}




interface I13BBBBBBBBBBBBBB {

}
interface I13BBBBBBBBBBBBB is I13BBBBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I13BBBBBBBBBBBB is I13BBBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I13BBBBBBBBBBB is I13BB, I13BBBBBBBBBBBB {

	function f0() override(I13BB, I13BBBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I13 is I13B, I13BBBBBBBBBBB {

	function f0() override(I13BB, I13BBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I13B, I13BBBBBBBBBBB)
	external payable returns (uint);
	function f2() override
	external view returns (uint);
	function f3() external payable returns (uint);
}


contract C {
	function test() public returns (uint)
	{
			C3 tc0 = new C3();
			if (tc0.f0() != 1596680831)
				return 1;
			if (tc0.f1() != 1203428207)
				return 2;
			C3B tc1 = new C3B();
			if (tc1.f0() != 1596680831)
				return 3;
			if (tc1.f1() != 1203428207)
				return 4;
			return 0;
	}
}

