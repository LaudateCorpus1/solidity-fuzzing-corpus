
pragma solidity >=0.0;







interface I0BBBB {

	function f0() external payable returns (uint);
}
interface I0BBB is I0BBBB {

	function f0() override
	external payable returns (uint);
}
interface I0BB is I0BBB {

	function f0() override
	external payable returns (uint);
}




interface I0BBBBBBBB {

	function f0() external payable returns (uint);
}
interface I0BBBBBBB is I0BBBBBBBB {

}
interface I0BBBBBB is I0BBBBBBB {

	function f0() override
	external payable returns (uint);
}
interface I0BBBBB is I0BBB, I0BBBBBB {

	function f0() override(I0BBB, I0BBBBBB)
	external payable returns (uint);
}
interface I0B is I0BB, I0BBBBB {

	function f0() override(I0BB, I0BBBBB)
	external payable returns (uint);
}
interface I0 is I0B {

	function f0() override
	external payable returns (uint);
}




interface I1BBB {

	function f0() external payable returns (uint);
}
interface I1BB is I1BBB {

	function f0() override
	external payable returns (uint);
}
interface I1B is I1BB {

}
interface I1 is I1B {

	function f0() override
	external payable returns (uint);
}





interface I2BBBB {

	function f0() external payable returns (uint);
}
interface I2BBB is I2BBBB {

}
interface I2BB is I2BBB {

	function f0() override
	external payable returns (uint);
}




interface I2BBBBBBBB {

	function f0() external payable returns (uint);
}
interface I2BBBBBBB is I2BBBBBBBB {

}
interface I2BBBBBB is I2BBBBBBB {

}
interface I2BBBBB is I2BB, I2BBBBBB {

	function f0() override(I2BB, I2BBBBBBBB)
	external payable returns (uint);
}
interface I2B is I2BB, I2BBBBB {

	function f0() override(I2BB, I2BBBBB)
	external payable returns (uint);
}
interface I2 is I2B {

	function f0() override
	external payable returns (uint);
}


contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}

