
pragma solidity >=0.0;





interface I0BB {

	function f0() external payable returns (uint);
}
interface I0B is I0BB {

	function f1() external view returns (uint);
}
interface I0 is I0B {

	function f0() override
	external payable returns (uint);
}


interface I1B {

	function f0() external view returns (uint);
}
interface I1 is I1B {

}







interface I2BBBBBB {

}
interface I2BBBBB is I2BBBBBB {

}
interface I2BBBB is I2BBBBB {

}




interface I2BBBBBBBBBB {

}
interface I2BBBBBBBBB is I2BBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I2BBBBBBBB is I2BBBBBBBBB {

}
interface I2BBBBBBB is I2BBBBB, I2BBBBBBBB {

}
interface I2BBB is I2BBBB, I2BBBBBBB {

	function f1() external payable returns (uint);
}
interface I2BB is I2BBB {

	function f2() external view returns (uint);
}





interface I2BBBBBBBBBBBBBBB {

}
interface I2BBBBBBBBBBBBBB is I2BBBBBBBBBBBBBBB {

}
interface I2BBBBBBBBBBBBB is I2BBBBBBBBBBBBBB {

}




interface I2BBBBBBBBBBBBBBBBBBB {

}
interface I2BBBBBBBBBBBBBBBBBB is I2BBBBBBBBBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I2BBBBBBBBBBBBBBBBB is I2BBBBBBBBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I2BBBBBBBBBBBBBBBB is I2BBBBBBBBBBBBBB, I2BBBBBBBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I2BBBBBBBBBBBB is I2BBBBBBBBBBBBB, I2BBBBBBBBBBBBBBBB {

	function f1() external payable returns (uint);
}
interface I2BBBBBBBBBBB is I2BB, I2BBBBBBBBBBBB {

	function f0() override(I2BBBBBBBBB, I2BBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I2BBB, I2BBBBBBBBBBBB)
	external payable returns (uint);
	function f2() override
	external view returns (uint);
	function f3() external view returns (uint);
}
interface I2B is I2BB, I2BBBBBBBBBBB {

	function f0() override(I2BBBBBBBBB, I2BBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I2BBB, I2BBBBBBBBBBB)
	external payable returns (uint);
	function f2() override(I2BB, I2BBBBBBBBBBB)
	external view returns (uint);
}




interface I2BBBBBBBBBBBBBBBBBBBBBBB {

}
interface I2BBBBBBBBBBBBBBBBBBBBBB is I2BBBBBBBBBBBBBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I2BBBBBBBBBBBBBBBBBBBBB is I2BBBBBBBBBBBBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I2BBBBBBBBBBBBBBBBBBBB is I2BBBBBBBBBBB, I2BBBBBBBBBBBBBBBBBBBBB {

	function f0() override(I2BBBBBBBBBBB, I2BBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
}




interface I2BBBBBBBBBBBBBBBBBBBBBBBBBBB {

}
interface I2BBBBBBBBBBBBBBBBBBBBBBBBBB is I2BBBBBBBBBBBBBBBBBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I2BBBBBBBBBBBBBBBBBBBBBBBBB is I2BBBBBBBBBBBBBBBBBBBBBBBBBB {

}
interface I2BBBBBBBBBBBBBBBBBBBBBBBB is I2BBBBBBBBBBB, I2BBBBBBBBBBBBBBBBBBBBBBBBB {

	function f0() override(I2BBBBBBBBBBB, I2BBBBBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
}
interface I2 is I2B, I2BBBBBBBBBBBBBBBBBBBB, I2BBBBBBBBBBBBBBBBBBBBBBBB {

	function f0() override(I2B, I2BBBBBBBBBBBBBBBBBBBB, I2BBBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I2B, I2BBBBBBBBBBBBBBBBBBBB, I2BBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f2() override(I2B, I2BBBBBBBBBBBBBBBBBBBB, I2BBBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() external payable returns (uint);
}


contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}

