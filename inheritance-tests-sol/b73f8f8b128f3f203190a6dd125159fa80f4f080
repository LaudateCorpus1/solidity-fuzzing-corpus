
pragma solidity >=0.0;



interface I0 {

	function f0() external payable returns (uint);
}



interface I1BB {

}
interface I1B is I1BB {

	function f0() external view returns (uint);
}
interface I1 is I1B {

	function f0() override
	external view returns (uint);
}







interface I2BBBBBB {

}
interface I2BBBBB is I2BBBBBB {

	function f0() external view returns (uint);
	function f1() external pure returns (uint);
}
interface I2BBBB is I2BBBBB {

}




interface I2BBBBBBBBBB {

}
interface I2BBBBBBBBB is I2BBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I2BBBBBBBB is I2BBBBBBBBB {

}
interface I2BBBBBBB is I2BBBBB, I2BBBBBBBB {

	function f0() override(I2BBBBB, I2BBBBBBBBB)
	external view returns (uint);
}
interface I2BBB is I2BBBB, I2BBBBBBB {

	function f0() override(I2BBBBB, I2BBBBBBB)
	external view returns (uint);
	function f2() external payable returns (uint);
}
interface I2BB is I2BBB {

	function f3() external view returns (uint);
}
interface I2B is I2BB {

	function f0() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
}


interface I2BBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I2BBBBBBBBBBB is I2B, I2BBBBBBBBBBBB {

	function f0() override(I2B, I2BBBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external pure returns (uint);
}




interface I2BBBBBBBBBBBBBBBB {

}
interface I2BBBBBBBBBBBBBBB is I2BBBBBBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I2BBBBBBBBBBBBBB is I2BBBBBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I2BBBBBBBBBBBBB is I2BB, I2BBBBBBBBBBBBBB {

	function f0() override(I2BBB, I2BBBBBBBBBBBBBB)
	external view returns (uint);
	function f3() override
	external view returns (uint);
}
interface I2 is I2B, I2BBBBBBBBBBB, I2BBBBBBBBBBBBB {

	function f0() override(I2B, I2BBBBBBBBBBB, I2BBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I2BBBBB, I2BBBBBBBBBBB)
	external pure returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override(I2B, I2BBBBBBBBBBBBB)
	external view returns (uint);
	function f4() external payable returns (uint);
}



interface C3BB {

	function f0() external view returns (uint);
}
interface C3B is C3BB {

	function f0() override
	external view returns (uint);
}
contract C3 is C3B {

	function f0() virtual external view
	override
	returns (uint)
	{
		return 1168816941;
	}
}


contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}

