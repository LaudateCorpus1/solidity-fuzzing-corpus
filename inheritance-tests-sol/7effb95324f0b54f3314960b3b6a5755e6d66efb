
pragma solidity >=0.0;


library L0 {

	function f0(uint) public pure returns (uint)
	{
		return 1804289383;
	}
	function f1(uint) public pure returns (uint)
	{
		return 846930886;
	}
}



interface I1BB {

	function f0() external view returns (uint);
}
interface I1B is I1BB {

	function f0() override
	external view returns (uint);
}

interface I1BBB is I1BB {

	function f1() external view returns (uint);
}
interface I1 is I1B, I1BBB {

	function f0() override(I1B, I1BB)
	external view returns (uint);
}


interface I2B {

	function f0() external view returns (uint);
}
interface I2 is I2B {

}
library L3 {

	function f0(uint) internal view returns (uint)
	{
		return 1714636915;
	}
}
library L4 {

	function f0(uint) internal view returns (uint)
	{
		return 1957747793;
	}
}
library L5 {

	function f0(uint) internal pure returns (uint)
	{
		return 424238335;
	}
}

contract C6 {

	function f0() public payable
	
	returns (uint)
	{
		return 854716505;
	}
}








interface C7BBBBBBB {

	function f0() external payable returns (uint);
}
interface C7BBBBBB is C7BBBBBBB {

}
interface C7BBBBB is C7BBBBBB {

}

interface C7BBBBBBBB is C7BBBBB {

	function f1() external view returns (uint);
}
interface C7BBBB is C7BBBBB, C7BBBBBBBB {

}
interface C7BBB is C7BBBB {

	function f0() override
	external payable returns (uint);
}
contract C7BB is C7BBB {

	function f0() virtual external payable
	override
	returns (uint)
	{
		return 914937185;
	}
	function f1() virtual external view
	override
	returns (uint)
	{
		return 1402304087;
	}
}
contract C7B is C7BB {

	function f0() virtual external payable
	override
	returns (uint)
	{
		return 1842513780;
	}
}
abstract contract C7 is C7B {

	function f1() external view
	override
	returns (uint)
	{
		return 1105724094;
	}
}
library L8 {

	function f0(uint) internal pure returns (uint)
	{
		return 1649760492;
	}
}



interface I9BB {

	function f0() external payable returns (uint);
}
interface I9B is I9BB {

	function f0() override
	external payable returns (uint);
}
interface I9 is I9B {

	function f0() override
	external payable returns (uint);
}


contract C {
	using L0 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f1() != 846930886)
			return 1;
		return 0;
	}
}

