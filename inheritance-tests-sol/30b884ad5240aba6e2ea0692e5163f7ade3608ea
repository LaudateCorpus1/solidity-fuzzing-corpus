pragma solidity >=0.0;
library L0 {
	function f0(uint) public pure returns (uint)
	{
		return 1804289383;
	}
}
interface I1BBB {
}
interface I1BB is I1BBB {
	function f0() external view returns (uint);
}
interface I1B is I1BB {
	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I1 is I1B {
	function f0() override
	external view returns (uint);
}
interface I2BBBBBBBBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I2BBBBBBBBBBBBBBBBBBB is I2BBBBBBBBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
}
interface I2BBBBBBBBBBBBBBBBB is I2BBBBBBBBBBBBBBBBBB, I2BBBBBBBBBBBBBBBBBBB {
	function f0() override(I2BBBBBBBBBBBBBBBBBB, I2BBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() external view returns (uint);
	function f3() external view returns (uint);
}
interface I2BBBBBBBBBBBBBBBB is I2BBBBBBBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface I2BBBBBBBBBBBBBBB is I2BBBBBBBBBBBBBBBB {
	function f1() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() external pure returns (uint);
}
interface I2BBBBBBBBBBBBBB is I2BBBBBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f5() external payable returns (uint);
}
interface I2BBBBBBBBBBBBB is I2BBBBBBBBBBBBBB {
	function f2() override
	external view returns (uint);
}
interface I2BBBBBBBBBBBBBBBBBBBB is I2BBBBBBBBBBBBBB {
	function f1() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() external payable returns (uint);
}
interface I2BBBBBBBBBBBB is I2BBBBBBBBBBBBB, I2BBBBBBBBBBBBBBBBBBBB {
	function f1() override(I2BBBBBBBBBBBBBB, I2BBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override(I2BBBBBBBBBBBBB, I2BBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f3() override(I2BBBBBBBBBBBBBB, I2BBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f4() override
	external pure returns (uint);
	function f5() override(I2BBBBBBBBBBBBBB, I2BBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f7() external view returns (uint);
	function f8() external pure returns (uint);
	function f9() external payable returns (uint);
	function f10() external payable returns (uint);
}
interface I2BBBBBBBBBBB is I2BBBBBBBBBBBB {
	function f2() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f7() override
	external view returns (uint);
	function f8() override
	external pure returns (uint);
	function f9() override
	external payable returns (uint);
	function f10() override
	external payable returns (uint);
}
interface I2BBBBBBBBBB is I2BBBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f6() override
	external payable returns (uint);
	function f8() override
	external pure returns (uint);
	function f9() override
	external payable returns (uint);
	function f10() override
	external payable returns (uint);
}
interface I2BBBBBBBBB is I2BBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external pure returns (uint);
	function f5() override
	external payable returns (uint);
	function f8() override
	external pure returns (uint);
	function f9() override
	external payable returns (uint);
	function f10() override
	external payable returns (uint);
}
interface I2BBBBBBBBBBBBBBBBBBBBB is I2BBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f4() override
	external pure returns (uint);
	function f7() override
	external view returns (uint);
	function f8() override
	external pure returns (uint);
	function f9() override
	external payable returns (uint);
	function f10() override
	external payable returns (uint);
	function f11() external payable returns (uint);
}
interface I2BBBBBBBB is I2BBBBBBBBB, I2BBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I2BBBBBBBBB, I2BBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I2BBBBBBBBBB, I2BBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override(I2BBBBBBBBBBB, I2BBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f3() override(I2BBBBBBBBB, I2BBBBBBBBBBB)
	external view returns (uint);
	function f4() override(I2BBBBBBBBB, I2BBBBBBBBBBBBBBBBBBBBB)
	external pure returns (uint);
	function f5() override(I2BBBBBBBBB, I2BBBBBBBBBBB)
	external payable returns (uint);
	function f7() override(I2BBBBBBBBBBB, I2BBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f8() override(I2BBBBBBBBB, I2BBBBBBBBBBBBBBBBBBBBB)
	external pure returns (uint);
	function f9() override(I2BBBBBBBBB, I2BBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f10() override(I2BBBBBBBBB, I2BBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f11() override
	external payable returns (uint);
	function f12() external payable returns (uint);
}
interface I2BBBBBBBBBBBBBBBBBBBBBB is I2BBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f4() override
	external pure returns (uint);
	function f5() override
	external payable returns (uint);
	function f7() override
	external view returns (uint);
	function f9() override
	external payable returns (uint);
	function f10() override
	external payable returns (uint);
}
interface I2BBBBBBB is I2BBBBBBBB, I2BBBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I2BBBBBBBB, I2BBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I2BBBBBBBB, I2BBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override(I2BBBBBBBB, I2BBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f3() override(I2BBBBBBBB, I2BBBBBBBBB)
	external view returns (uint);
	function f4() override(I2BBBBBBBB, I2BBBBBBBBBBBBBBBBBBBBBB)
	external pure returns (uint);
	function f5() override(I2BBBBBBBB, I2BBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f6() override
	external payable returns (uint);
	function f7() override(I2BBBBBBBB, I2BBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f8() override(I2BBBBBBBB, I2BBBBBBBBB)
	external pure returns (uint);
	function f9() override(I2BBBBBBBB, I2BBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f10() override(I2BBBBBBBB, I2BBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f12() override
	external payable returns (uint);
	function f13() external view returns (uint);
	function f14() external pure returns (uint);
	function f15() external payable returns (uint);
	function f16() external payable returns (uint);
}
interface I2BBBBBB is I2BBBBBBB {
	function f0() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f8() override
	external pure returns (uint);
	function f9() override
	external payable returns (uint);
	function f12() override
	external payable returns (uint);
	function f13() override
	external view returns (uint);
	function f14() override
	external pure returns (uint);
	function f15() override
	external payable returns (uint);
}
interface I2BBBBB is I2BBBBBB {
	function f2() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f7() override
	external view returns (uint);
	function f10() override
	external payable returns (uint);
	function f11() override
	external payable returns (uint);
	function f12() override
	external payable returns (uint);
	function f13() override
	external view returns (uint);
	function f15() override
	external payable returns (uint);
	function f17() external payable returns (uint);
}
interface I2BBBB is I2BBBBB {
	function f1() override
	external view returns (uint);
	function f4() override
	external pure returns (uint);
	function f9() override
	external payable returns (uint);
	function f10() override
	external payable returns (uint);
	function f11() override
	external payable returns (uint);
	function f13() override
	external view returns (uint);
}
interface I2BBBBBBBBBBBBBBBBBBBBBBB is I2BBBBB {
	function f1() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f4() override
	external pure returns (uint);
	function f5() override
	external payable returns (uint);
	function f9() override
	external payable returns (uint);
	function f10() override
	external payable returns (uint);
	function f12() override
	external payable returns (uint);
	function f13() override
	external view returns (uint);
	function f14() override
	external pure returns (uint);
	function f15() override
	external payable returns (uint);
	function f17() override
	external payable returns (uint);
	function f18() external payable returns (uint);
}
interface I2BBB is I2BBBB, I2BBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override(I2BBBB, I2BBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override(I2BBBBB, I2BBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f4() override(I2BBBB, I2BBBBBBBBBBBBBBBBBBBBBBB)
	external pure returns (uint);
	function f5() override(I2BBBBB, I2BBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f6() override
	external payable returns (uint);
	function f8() override
	external pure returns (uint);
	function f9() override(I2BBBB, I2BBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f10() override(I2BBBB, I2BBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f11() override(I2BBBB, I2BBBBB)
	external payable returns (uint);
	function f12() override(I2BBBBB, I2BBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f13() override(I2BBBB, I2BBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f14() override(I2BBBBBB, I2BBBBBBBBBBBBBBBBBBBBBBB)
	external pure returns (uint);
	function f15() override(I2BBBBB, I2BBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f16() override
	external payable returns (uint);
	function f17() override(I2BBBBB, I2BBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f19() external view returns (uint);
}
interface I2BB is I2BBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f9() override
	external payable returns (uint);
	function f10() override
	external payable returns (uint);
	function f11() override
	external payable returns (uint);
	function f13() override
	external view returns (uint);
	function f14() override
	external pure returns (uint);
	function f15() override
	external payable returns (uint);
	function f16() override
	external payable returns (uint);
	function f18() override
	external payable returns (uint);
	function f19() override
	external view returns (uint);
}
interface I2B is I2BB {
	function f0() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external pure returns (uint);
	function f8() override
	external pure returns (uint);
	function f9() override
	external payable returns (uint);
	function f11() override
	external payable returns (uint);
	function f12() override
	external payable returns (uint);
	function f14() override
	external pure returns (uint);
	function f15() override
	external payable returns (uint);
	function f17() override
	external payable returns (uint);
	function f18() override
	external payable returns (uint);
}
interface I2BBBBBBBBBBBBBBBBBBBBBBBB is I2B {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f7() override
	external view returns (uint);
	function f13() override
	external view returns (uint);
	function f19() override
	external view returns (uint);
	function f20() external payable returns (uint);
}
interface I2 is I2B, I2BBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I2B, I2BBBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I2BB, I2BBBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override(I2BB, I2BBBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f3() override(I2B, I2BBBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f5() override(I2BBB, I2BBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f7() override(I2BBBBB, I2BBBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f8() override
	external pure returns (uint);
	function f11() override
	external payable returns (uint);
	function f12() override
	external payable returns (uint);
	function f13() override(I2BB, I2BBBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f15() override
	external payable returns (uint);
	function f17() override
	external payable returns (uint);
	function f18() override
	external payable returns (uint);
	function f19() override(I2BB, I2BBBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
}
contract C {
	using L0 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1804289383)
			return 1;
		return 0;
	}
}
