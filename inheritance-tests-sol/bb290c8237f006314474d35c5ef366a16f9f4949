pragma solidity >=0.0;
interface I0 {
	function f0() external view returns (uint);
	function f1() external view returns (uint);
}
interface I1BBBBBBB {
	function f0() external payable returns (uint);
}
interface I1BBBBBB is I1BBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I1BBBBB is I1BBBBBB {
}
interface I1BBBBBBBBB {
}
interface I1BBBBBBBB is I1BBBBBB, I1BBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I1BBBB is I1BBBBB, I1BBBBBBBB {
	function f0() override(I1BBBBBB, I1BBBBBBBB)
	external payable returns (uint);
}
interface I1BBB is I1BBBB {
	function f0() override
	external payable returns (uint);
}
interface I1BB is I1BBB {
	function f0() override
	external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I1BBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I1BBBBBBBBBBBBB is I1BBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I1BBBBBBBBBBBB is I1BBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I1BBBBBBBBBBB is I1BBBBBBBBBBBB {
}
interface I1BBBBBBBBBB is I1BB, I1BBBBBBBBBBB {
	function f0() override(I1BB, I1BBBBBBBBBBBB)
	external payable returns (uint);
}
interface I1B is I1BB, I1BBBBBBBBBB {
	function f0() override(I1BB, I1BBBBBBBBBB)
	external payable returns (uint);
}
interface I1 is I1B {
}
interface C2BB {
	function f0() external view returns (uint);
}
interface C2BBB is C2BB {
}
interface C2B is C2BB, C2BBB {
}
interface C2BBBBB {
	function f0() external view returns (uint);
}
interface C2BBBB is C2BBB, C2BBBBB {
	function f0() override(C2BB, C2BBBBB)
	external view returns (uint);
}
contract C2 is C2B, C2BBBB {
	function f0() virtual external view
	override(C2BBBB, C2BB)
	returns (uint)
	{
		return 1363731580;
	}
}
library L3 {
	function f0(uint) private view returns (uint)
	{
		return 1957747793;
	}
	function f1(uint) public view returns (uint)
	{
		return 424238335;
	}
}
interface I4BBBBBBB {
	function f0() external payable returns (uint);
}
interface I4BBBBBB is I4BBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I4BBBBB is I4BBBBBB {
}
interface I4BBBBBBBBB {
}
interface I4BBBBBBBB is I4BBBBB, I4BBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I4BBBB is I4BBBBB, I4BBBBBBBB {
	function f0() override(I4BBBBBB, I4BBBBBBBB)
	external payable returns (uint);
}
interface I4BBB is I4BBBB {
	function f0() override
	external payable returns (uint);
}
interface I4BB is I4BBB {
}
interface I4BBBBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I4BBBBBBBBBBBBBB is I4BBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I4BBBBBBBBBBBBB is I4BBBBBBBBBBBBBB {
}
interface I4BBBBBBBBBBBB is I4BBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I4BBBBBBBBBBB is I4BBBBBBBBBBBB {
}
interface I4BBBBBBBBBB is I4BB, I4BBBBBBBBBBB {
	function f0() override(I4BBB, I4BBBBBBBBBBBB)
	external payable returns (uint);
}
interface I4B is I4BB, I4BBBBBBBBBB {
	function f0() override(I4BBB, I4BBBBBBBBBB)
	external payable returns (uint);
}
interface I4 is I4B {
	function f0() override
	external payable returns (uint);
}
interface I5 {
	function f0() external view returns (uint);
}
interface I6BBBBB {
	function f0() external view returns (uint);
}
interface I6BBBB is I6BBBBB {
	function f1() external payable returns (uint);
}
interface I6BBB is I6BBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I6BB is I6BBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() external payable returns (uint);
}
interface I6B is I6BB {
	function f0() override
	external view returns (uint);
}
interface I6 is I6B {
}
interface I7BBBBBB {
	function f0() external view returns (uint);
}
interface I7BBBBB is I7BBBBBB {
	function f1() external view returns (uint);
}
interface I7BBBB is I7BBBBB {
	function f0() override
	external view returns (uint);
}
interface I7BBB is I7BBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() external payable returns (uint);
}
interface I7BB is I7BBB {
	function f0() override
	external view returns (uint);
}
interface I7B is I7BB {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
}
interface I7 is I7B {
	function f0() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
}
contract C {
	using L3 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f1() != 424238335)
			return 1;
		return 0;
	}
}
