pragma solidity >=0.0;
interface I0BB {
	function f0() external payable returns (uint);
	function f1() external view returns (uint);
}
interface I0B is I0BB {
	function f1() override
	external view returns (uint);
	function f2() external payable returns (uint);
}
interface I0 is I0B {
}
contract C1 {
	function f0() public view
	
	returns (uint)
	{
		return 1105902161;
	}
}
interface C2BBBB {
	function f0() external payable returns (uint);
}
interface C2BBB is C2BBBB {
}
interface C2BB is C2BBB {
	function f1() external view returns (uint);
}
interface C2B is C2BB {
}
contract C2 is C2B {
	function f0() external payable
	override
	returns (uint)
	{
		return 1098894339;
	}
	function f1() external view
	override
	returns (uint)
	{
		return 2136927794;
	}
}
interface I4BBB {
	function f0() external payable returns (uint);
}
interface I4BB is I4BBB {
	function f1() external payable returns (uint);
}
interface I4B is I4BB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() external view returns (uint);
}
interface I4BBBBB {
	function f0() external payable returns (uint);
}
interface I4BBBB is I4B, I4BBBBB {
	function f0() override(I4B, I4BBBBB)
	external payable returns (uint);
}
interface I4 is I4B, I4BBBB {
	function f0() override(I4B, I4BBBB)
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I5B {
	function f0() external view returns (uint);
}
interface I5 is I5B {
	function f0() override
	external view returns (uint);
}
interface C6BBBBBBBB {
	function f0() external payable returns (uint);
	function f1() external pure returns (uint);
}
interface C6BBBBBBB is C6BBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface C6BBBBBB is C6BBBBBBB {
	function f2() external view returns (uint);
	function f3() external view returns (uint);
}
interface C6BBBBB is C6BBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external pure returns (uint);
}
interface C6BBBBBBBBB is C6BBBBBB {
	function f2() override
	external view returns (uint);
	function f4() external view returns (uint);
}
interface C6BBBB is C6BBBBB, C6BBBBBBBBB {
	function f0() override(C6BBBBB, C6BBBBBBB)
	external payable returns (uint);
	function f1() override(C6BBBBB, C6BBBBBBBB)
	external pure returns (uint);
	function f2() override(C6BBBBBB, C6BBBBBBBBB)
	external view returns (uint);
	function f4() override
	external view returns (uint);
	function f5() external payable returns (uint);
}
abstract contract C6BBB is C6BBBB {
	function f0() virtual external payable
	override
	returns (uint);
	function f1() external pure
	override
	returns (uint)
	{
		return 1951824771;
	}
	function f2() virtual external view
	override
	returns (uint);
	function f3() virtual external view
	override
	returns (uint);
	function f4() virtual external view
	override
	returns (uint);
	function f5() virtual external payable
	override
	returns (uint);
}
contract C6BB is C6BBB {
	function f0() virtual external payable
	override
	returns (uint)
	{
		return 1447645967;
	}
	function f2() external view
	override
	returns (uint)
	{
		return 143244144;
	}
	function f3() external view
	override
	returns (uint)
	{
		return 837051536;
	}
	function f4() external view
	override
	returns (uint)
	{
		return 355190910;
	}
	function f5() external payable
	override
	returns (uint)
	{
		return 2127735996;
	}
}
contract C6B is C6BB {
	function f0() virtual external payable
	override
	returns (uint)
	{
		return 1444510476;
	}
}
contract C6 is C6B {
}
library L7 {
	function f0(uint) public pure returns (uint)
	{
		return 1714636915;
	}
}
contract C {
	using L7 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1714636915)
			return 1;
		return 0;
	}
}
