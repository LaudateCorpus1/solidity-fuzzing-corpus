
pragma solidity >=0.0;




contract C0B {

	function f0() public view
	
	returns (uint)
	{
		return 1073765959;
	}
}
contract C0 is C0B {

}



















interface I1BBBBBBBBBBBBBBBBBB {

	function f0() external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBBBB {

	function f1() external view returns (uint);
}

interface I1BBBBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBBBB {

	function f0() override
	external payable returns (uint);
	function f1() external view returns (uint);
}
interface I1BBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBB {

	function f0() override(I1BBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I1BBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f2() external payable returns (uint);
	function f3() external view returns (uint);
}
interface I1BBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBB {

	function f0() override
	external payable returns (uint);
	function f1() override
	external view returns (uint);
}
interface I1BBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBB {

	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
}
interface I1BBBBBBBBBBBBB is I1BBBBBBBBBBBBBB {

	function f0() override
	external payable returns (uint);
	function f4() external payable returns (uint);
}
interface I1BBBBBBBBBBBB is I1BBBBBBBBBBBBB {

	function f0() override
	external payable returns (uint);
	function f1() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
}

interface I1BBBBBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBB {

	function f0() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() external view returns (uint);
}
interface I1BBBBBBBBBBB is I1BBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBB {

	function f0() override(I1BBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override(I1BBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f4() override(I1BBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f6() external payable returns (uint);
	function f7() external view returns (uint);
	function f8() external payable returns (uint);
}
interface I1BBBBBBBBBB is I1BBBBBBBBBBB {

	function f0() override
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
	function f6() override
	external payable returns (uint);
	function f7() override
	external view returns (uint);
}
interface I1BBBBBBBBB is I1BBBBBBBBBB {

	function f0() override
	external payable returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override
	external view returns (uint);
	function f7() override
	external view returns (uint);
	function f9() external view returns (uint);
}

interface I1BBBBBBBBBBBBBBBBBBBBB is I1BBBBBBBBBB {

	function f2() override
	external payable returns (uint);
	function f4() override
	external payable returns (uint);
	function f7() override
	external view returns (uint);
	function f8() override
	external payable returns (uint);
	function f9() external view returns (uint);
}
interface I1BBBBBBBB is I1BBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBB {

	function f0() override(I1BBBBBBBBB, I1BBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I1BBBBBBBBB, I1BBBBBBBBBBBB)
	external view returns (uint);
	function f2() override(I1BBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f3() override(I1BBBBBBBBB, I1BBBBBBBBBBB)
	external view returns (uint);
	function f4() override(I1BBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f5() override(I1BBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f7() override(I1BBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f8() override(I1BBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f9() override(I1BBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f10() external payable returns (uint);
	function f11() external view returns (uint);
}
interface I1BBBBBBB is I1BBBBBBBB {

	function f0() override
	external payable returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f5() override
	external view returns (uint);
	function f6() override
	external payable returns (uint);
	function f8() override
	external payable returns (uint);
	function f11() override
	external view returns (uint);
}
interface I1BBBBBB is I1BBBBBBB {

	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f10() override
	external payable returns (uint);
}
interface I1BBBBB is I1BBBBBB {

	function f0() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f8() override
	external payable returns (uint);
	function f9() override
	external view returns (uint);
	function f10() override
	external payable returns (uint);
	function f11() override
	external view returns (uint);
	function f12() external payable returns (uint);
}
interface I1BBBB is I1BBBBB {

	function f0() override
	external payable returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f7() override
	external view returns (uint);
	function f9() override
	external view returns (uint);
	function f10() override
	external payable returns (uint);
}

interface I1BBBBBBBBBBBBBBBBBBBBBB is I1BBBBB {

	function f0() override
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f5() override
	external view returns (uint);
	function f6() override
	external payable returns (uint);
	function f7() override
	external view returns (uint);
	function f8() override
	external payable returns (uint);
	function f9() override
	external view returns (uint);
	function f10() override
	external payable returns (uint);
	function f12() override
	external payable returns (uint);
	function f13() external payable returns (uint);
}
interface I1BBB is I1BBBB, I1BBBBBBBBBBBBBBBBBBBBBB {

	function f0() override(I1BBBB, I1BBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I1BBBB, I1BBBBBBB)
	external view returns (uint);
	function f2() override(I1BBBB, I1BBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f3() override(I1BBBB, I1BBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f4() override(I1BBBB, I1BBBBBB)
	external payable returns (uint);
	function f5() override(I1BBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f6() override(I1BBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f7() override(I1BBBB, I1BBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f8() override(I1BBBBB, I1BBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f9() override(I1BBBB, I1BBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f10() override(I1BBBB, I1BBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f12() override(I1BBBBB, I1BBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f13() override
	external payable returns (uint);
	function f14() external view returns (uint);
	function f15() external payable returns (uint);
}
interface I1BB is I1BBB {

	function f9() override
	external view returns (uint);
}
interface I1B is I1BB {

	function f2() override
	external payable returns (uint);
	function f12() override
	external payable returns (uint);
	function f13() override
	external payable returns (uint);
}

interface I1BBBBBBBBBBBBBBBBBBBBBBB is I1BB {

	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f4() override
	external payable returns (uint);
	function f6() override
	external payable returns (uint);
	function f8() override
	external payable returns (uint);
	function f9() override
	external view returns (uint);
	function f10() override
	external payable returns (uint);
	function f13() override
	external payable returns (uint);
	function f15() override
	external payable returns (uint);
	function f16() external pure returns (uint);
	function f17() external payable returns (uint);
}
interface I1 is I1B, I1BBBBBBBBBBBBBBBBBBBBBBB {

	function f0() override
	external payable returns (uint);
	function f1() override(I1BBB, I1BBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override(I1B, I1BBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override(I1BBB, I1BBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f5() override
	external view returns (uint);
	function f6() override(I1BBB, I1BBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f8() override(I1BBB, I1BBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f9() override(I1BB, I1BBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f10() override(I1BBB, I1BBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f12() override(I1B, I1BBB)
	external payable returns (uint);
	function f13() override(I1B, I1BBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f15() override(I1BBB, I1BBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
}


contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}

