pragma solidity >=0.0;
interface I0BBBB {
	function f0() external payable returns (uint);
}
interface I0BBB is I0BBBB {
}
interface I0BB is I0BBB {
	function f0() override
	external payable returns (uint);
}
interface I0B is I0BB {
}
interface I0BBBBB is I0BB {
}
interface I0BBBBBBBB {
}
interface I0BBBBBBB is I0BBBBBBBB {
}
interface I0BBBBBB is I0BBBBB, I0BBBBBBB {
}
interface I0 is I0B, I0BBBBB, I0BBBBBB {
	function f1() external view returns (uint);
	function f2() external payable returns (uint);
}
interface I1BB {
	function f0() external view returns (uint);
}
interface I1B is I1BB {
	function f1() external payable returns (uint);
}
interface I1 is I1B {
}
interface I2B {
	function f0() external view returns (uint);
}
interface I2 is I2B {
}
interface I3BBBBBBB {
	function f0() external payable returns (uint);
}
interface I3BBBBBB is I3BBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I3BBBBB is I3BBBBBB {
}
interface I3BBBB is I3BBBBB {
}
interface I3BBB is I3BBBB {
}
interface I3BB is I3BBB {
	function f0() override
	external payable returns (uint);
}
interface I3B is I3BB {
	function f0() override
	external payable returns (uint);
}
interface I3 is I3B {
	function f1() external payable returns (uint);
	function f2() external payable returns (uint);
	function f3() external view returns (uint);
}
interface I4BBB {
}
interface I4BB is I4BBB {
}
interface I4B is I4BB {
}
interface I4 is I4B {
}
contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}
