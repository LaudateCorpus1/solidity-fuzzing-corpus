
pragma solidity >=0.0;











interface C1BBBBBBBB {

	function f0() external view returns (uint);
}
interface C1BBBBBBB is C1BBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface C1BBBBBB is C1BBBBBBB {

	function f0() override
	external view returns (uint);
}
interface C1BBBBB is C1BBBBBB {

	function f0() override
	external view returns (uint);
}
interface C1BBBB is C1BBBBB {

}
interface C1BBB is C1BBBB {

	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface C1BB is C1BBB {

}
contract C1B is C1BB {

	function f0() external view
	override
	returns (uint)
	{
		return 399257814;
	}
	function f1() virtual external payable
	override
	returns (uint)
	{
		return 1640882073;
	}
}
contract C1 is C1B {

}




interface C2BBB {

	function f0() external payable returns (uint);
}
interface C2BB is C2BBB {

}
interface C2B is C2BB {

}
contract C2 is C2B {

	function f0() virtual external payable
	override
	returns (uint)
	{
		return 170423502;
	}
}




interface C5BBB {

	function f0() external payable returns (uint);
}
interface C5BB is C5BBB {

	function f0() override
	external payable returns (uint);
}
interface C5B is C5BB {

	function f0() override
	external payable returns (uint);
}
contract C5 is C5B {

	function f0() external payable
	override
	returns (uint)
	{
		return 730512509;
	}
}
library L6 {

	function f0(uint) internal pure returns (uint)
	{
		return 1804289383;
	}
	function f1(uint) internal pure returns (uint)
	{
		return 846930886;
	}
}
library L7 {

	function f0(uint) public view returns (uint)
	{
		return 1681692777;
	}
}


contract C {
	using L7 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1681692777)
			return 1;
		return 0;
	}
}

