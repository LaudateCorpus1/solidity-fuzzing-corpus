
pragma solidity >=0.0;


library L0 {

	function f0(uint) internal pure returns (uint)
	{
		return 1804289383;
	}
}
library L1 {

	function f0(uint) external pure returns (uint)
	{
		return 846930886;
	}
	function f1(uint) internal pure returns (uint)
	{
		return 1681692777;
	}
}
library L2 {

	function f0(uint) external pure returns (uint)
	{
		return 1714636915;
	}
}
library L3 {

	function f0(uint) internal pure returns (uint)
	{
		return 1957747793;
	}
}



interface I4BB {

}
interface I4B is I4BB {

}
interface I4 is I4B {

}
library L5 {

	function f0(uint) external pure returns (uint)
	{
		return 424238335;
	}
}








interface I6BBBBBBB {

	function f0() external payable returns (uint);
}
interface I6BBBBBB is I6BBBBBBB {

}
interface I6BBBBB is I6BBBBBB {

}






interface I6BBBBBBBBBBBBB {

	function f0() external payable returns (uint);
}
interface I6BBBBBBBBBBBB is I6BBBBBBBBBBBBB {

	function f0() override
	external payable returns (uint);
}
interface I6BBBBBBBBBBB is I6BBBBBBBBBBBB {

	function f0() override
	external payable returns (uint);
}
interface I6BBBBBBBBBB is I6BBBBBBBBBBB {

	function f0() override
	external payable returns (uint);
}
interface I6BBBBBBBBB is I6BBBBBBBBBB {

}
interface I6BBBBBBBB is I6BBBBB, I6BBBBBBBBB {

	function f0() override(I6BBBBBBB, I6BBBBBBBBBB)
	external payable returns (uint);
}
interface I6BBBB is I6BBBBB, I6BBBBBBBB {

	function f0() override(I6BBBBBBB, I6BBBBBBBB)
	external payable returns (uint);
}
interface I6BBB is I6BBBB {

	function f0() override
	external payable returns (uint);
}
interface I6BB is I6BBB {

	function f0() override
	external payable returns (uint);
}






interface I6BBBBBBBBBBBBBBBBBBB {

	function f0() external payable returns (uint);
}
interface I6BBBBBBBBBBBBBBBBBB is I6BBBBBBBBBBBBBBBBBBB {

	function f0() override
	external payable returns (uint);
}
interface I6BBBBBBBBBBBBBBBBB is I6BBBBBBBBBBBBBBBBBB {

}
interface I6BBBBBBBBBBBBBBBB is I6BBBBBBBBBBBBBBBBB {

	function f0() override
	external payable returns (uint);
}
interface I6BBBBBBBBBBBBBBB is I6BBBBBBBBBBBBBBBB {

	function f0() override
	external payable returns (uint);
}
interface I6BBBBBBBBBBBBBB is I6BB, I6BBBBBBBBBBBBBBB {

	function f0() override(I6BB, I6BBBBBBBBBBBBBBB)
	external payable returns (uint);
}
interface I6B is I6BB, I6BBBBBBBBBBBBBB {

	function f0() override(I6BB, I6BBBBBBBBBBBBBB)
	external payable returns (uint);
}
interface I6 is I6B {

	function f0() override
	external payable returns (uint);
}

interface I7 {

	function f0() external view returns (uint);
}

interface I8 {

	function f0() external payable returns (uint);
}







interface I9BBBBBB {

	function f0() external view returns (uint);
}
interface I9BBBBB is I9BBBBBB {

	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
}
interface I9BBBB is I9BBBBB {

	function f1() override
	external view returns (uint);
}
interface I9BBB is I9BBBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() external payable returns (uint);
}
interface I9BB is I9BBB {

	function f0() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
}
interface I9B is I9BB {

	function f2() override
	external payable returns (uint);
}
interface I9 is I9B {

	function f0() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
}








interface I10BBBBBBB {

	function f0() external payable returns (uint);
}
interface I10BBBBBB is I10BBBBBBB {

	function f0() override
	external payable returns (uint);
}
interface I10BBBBB is I10BBBBBB {

	function f0() override
	external payable returns (uint);
}






interface I10BBBBBBBBBBBBB {

	function f0() external payable returns (uint);
}
interface I10BBBBBBBBBBBB is I10BBBBBBBBBBBBB {

}
interface I10BBBBBBBBBBB is I10BBBBBBBBBBBB {

}
interface I10BBBBBBBBBB is I10BBBBBBBBBBB {

}
interface I10BBBBBBBBB is I10BBBBBBBBBB {

	function f0() override
	external payable returns (uint);
}
interface I10BBBBBBBB is I10BBBBBB, I10BBBBBBBBB {

	function f0() override(I10BBBBBB, I10BBBBBBBBB)
	external payable returns (uint);
}
interface I10BBBB is I10BBBBB, I10BBBBBBBB {

	function f0() override(I10BBBBB, I10BBBBBBBB)
	external payable returns (uint);
}
interface I10BBB is I10BBBB {

	function f0() override
	external payable returns (uint);
}
interface I10BB is I10BBB {

}






interface I10BBBBBBBBBBBBBBBBBBB {

	function f0() external payable returns (uint);
}
interface I10BBBBBBBBBBBBBBBBBB is I10BBBBBBBBBBBBBBBBBBB {

	function f0() override
	external payable returns (uint);
}
interface I10BBBBBBBBBBBBBBBBB is I10BBBBBBBBBBBBBBBBBB {

}
interface I10BBBBBBBBBBBBBBBB is I10BBBBBBBBBBBBBBBBB {

	function f0() override
	external payable returns (uint);
}
interface I10BBBBBBBBBBBBBBB is I10BBBBBBBBBBBBBBBB {

	function f0() override
	external payable returns (uint);
}
interface I10BBBBBBBBBBBBBB is I10BBB, I10BBBBBBBBBBBBBBB {

	function f0() override(I10BBB, I10BBBBBBBBBBBBBBB)
	external payable returns (uint);
}
interface I10B is I10BB, I10BBBBBBBBBBBBBB {

	function f0() override(I10BBB, I10BBBBBBBBBBBBBB)
	external payable returns (uint);
}
interface I10 is I10B {

}


contract C11B {

	function f0() virtual public pure
	
	returns (uint)
	{
		return 1795000225;
	}
}
abstract contract C11 is C11B {

	function f0() public pure
	override
	returns (uint)
	{
		return 1823430883;
	}
}


contract C {
	using L2 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1714636915)
			return 1;
		return 0;
	}
}

