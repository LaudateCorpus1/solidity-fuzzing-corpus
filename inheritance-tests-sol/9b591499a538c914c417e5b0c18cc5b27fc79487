
pragma solidity >=0.0;





interface I1BB {

	function f0() external payable returns (uint);
	function f1() external view returns (uint);
}
interface I1B is I1BB {

	function f2() external payable returns (uint);
}
interface I1 is I1B {

	function f0() override
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() external payable returns (uint);
}



interface I2BB {

	function f0() external payable returns (uint);
	function f1() external view returns (uint);
}
interface I2B is I2BB {

	function f0() override
	external payable returns (uint);
	function f2() external payable returns (uint);
}
interface I2 is I2B {

}

interface I3 {

	function f0() external view returns (uint);
}

interface I4 {

	function f0() external view returns (uint);
}

contract C6 {

	function f0() public view
	
	returns (uint)
	{
		return 1709309780;
	}
	function f1() public pure
	
	returns (uint)
	{
		return 1623188993;
	}
}



interface C7BB {

	function f0() external payable returns (uint);
}
contract C7B is C7BB {

	function f0() virtual external payable
	override
	returns (uint)
	{
		return 1068463897;
	}
	function f1() public view
	
	returns (uint)
	{
		return 1853505735;
	}
}
contract C7 is C7B {

	function f0() virtual external payable
	override
	returns (uint)
	{
		return 965828290;
	}
}








interface C8BBBBBBB {

	function f0() external view returns (uint);
}
interface C8BBBBBB is C8BBBBBBB {

}
interface C8BBBBB is C8BBBBBB {

	function f0() override
	external view returns (uint);
}

interface C8BBBBBBBB is C8BBBBBB {

	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface C8BBBB is C8BBBBB, C8BBBBBBBB {

	function f0() override(C8BBBBB, C8BBBBBBBB)
	external view returns (uint);
	function f2() external payable returns (uint);
}
interface C8BBB is C8BBBB {

	function f0() override
	external view returns (uint);
}
interface C8BB is C8BBB {

	function f1() override
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
}
contract C8B is C8BB {

	function f0() virtual external view
	override
	returns (uint)
	{
		return 654429131;
	}
	function f1() external payable
	override
	returns (uint)
	{
		return 1717502997;
	}
	function f2() virtual external payable
	override
	returns (uint)
	{
		return 528691176;
	}
}
contract C8 is C8B {

	function f2() virtual external payable
	override
	returns (uint)
	{
		return 837912430;
	}
}




interface C9BBB {

	function f0() external view returns (uint);
	function f1() external payable returns (uint);
}
interface C9BB is C9BBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}
interface C9B is C9BB {

	function f1() override
	external payable returns (uint);
}
contract C9 is C9B {

	function f0() virtual external view
	override
	returns (uint)
	{
		return 1516106925;
	}
	function f1() external payable
	override
	returns (uint)
	{
		return 2139221702;
	}
}





interface C10BBBB {

	function f0() external payable returns (uint);
}
interface C10BBB is C10BBBB {

}
abstract contract C10BB is C10BBB {

	function f0() virtual external payable
	override
	returns (uint);
}
contract C10B is C10BB {

	function f0() external payable
	override
	returns (uint)
	{
		return 1261135403;
	}
}
contract C10 is C10B {

}
library L13 {

	function f0(uint) external view returns (uint)
	{
		return 1681692777;
	}
}


contract C {
	using L13 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1681692777)
			return 1;
		return 0;
	}
}

