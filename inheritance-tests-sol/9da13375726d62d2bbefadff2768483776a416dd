pragma solidity >=0.0;
interface I0B {
}
interface I0BBBBBB {
	function f0() external payable returns (uint);
}
interface I0BBBBB is I0BBBBBB {
}
interface I0BBBB is I0BBBBB {
	function f0() override
	external payable returns (uint);
	function f1() external payable returns (uint);
}
interface I0BBB is I0BBBB {
}
interface I0BB is I0B, I0BBB {
}
interface I0BBBBBBB is I0BB {
}
interface I0BBBBBBBB is I0BBB {
}
interface I0BBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I0BBBBBBBBBBBB is I0BBBBBBBBBBBBB {
}
interface I0BBBBBBBBBBB is I0BBBBBBBBBBBB {
	function f1() external payable returns (uint);
}
interface I0BBBBBBBBBB is I0BBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I0BBBBBBBBB is I0BBBBBBBB, I0BBBBBBBBBB {
	function f0() override(I0BBBB, I0BBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I0BBBB, I0BBBBBBBBBBB)
	external payable returns (uint);
}
interface I0BBBBBBBBBBBBBB is I0BBBBBBBB {
	function f1() override
	external payable returns (uint);
}
interface I0BBBBBBBBBBBBBBB is I0BB {
	function f0() override
	external payable returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBBBB {
}
interface I0BBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBBB {
	function f1() external payable returns (uint);
}
interface I0BBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I0BBBBBBBBBBBBBBBB is I0BB, I0BBBBBBBBBBBBBBBBB {
	function f0() override(I0BBBB, I0BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I0BBBB, I0BBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBBBBBBBBB {
}
interface I0BBBBBBBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() external payable returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBBBBBBB {
}
interface I0BBBBBBBBBBBBBBBBBBBBB is I0BB, I0BBBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I0BBBB, I0BBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I0BBBB, I0BBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBB {
	function f1() override
	external payable returns (uint);
}
interface I0 is I0B, I0BB, I0BBBBBBB, I0BBBBBBBB, I0BBBBBBBBB, I0BBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I0BBBB, I0BBBBBBBBB, I0BBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I0BBBB, I0BBBBBBBBB, I0BBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
}
interface C1BBB {
	function f0() external payable returns (uint);
}
interface C1BB is C1BBB {
	function f0() override
	external payable returns (uint);
}
contract C1B is C1BB {
	function f0() virtual external payable
	override
	returns (uint)
	{
		return 1324346645;
	}
}
contract C1 is C1B {
	function f0() external payable
	override
	returns (uint)
	{
		return 942409124;
	}
}
interface I2B {
	function f0() external payable returns (uint);
}
interface I2 is I2B {
}
interface I3BBBBB {
	function f0() external payable returns (uint);
}
interface I3BBBB is I3BBBBB {
}
interface I3BBB is I3BBBB {
	function f0() override
	external payable returns (uint);
	function f1() external payable returns (uint);
}
interface I3BB is I3BBB {
}
interface I3B is I3BB {
	function f1() override
	external payable returns (uint);
}
interface I3BBBBBB is I3BB {
	function f1() override
	external payable returns (uint);
}
interface I3BBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I3BBBBBBBBBB is I3BBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I3BBBBBBBBB is I3BBBBBBBBBB {
	function f1() external payable returns (uint);
}
interface I3BBBBBBBB is I3BBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I3BBBBBBB is I3BBBBBB, I3BBBBBBBB {
	function f0() override(I3BBB, I3BBBBBBBB)
	external payable returns (uint);
	function f1() override(I3BBBBBB, I3BBBBBBBBB)
	external payable returns (uint);
}
interface I3BBBBBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I3BBBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I3BBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() external payable returns (uint);
}
interface I3BBBBBBBBBBBBB is I3BBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I3BBBBBBBBBBBB is I3BB, I3BBBBBBBBBBBBB {
	function f0() override(I3BBB, I3BBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I3BBB, I3BBBBBBBBBBBBB)
	external payable returns (uint);
}
interface I3BBBBBBBBBBBBBBBBB is I3BBBBBB {
	function f1() override
	external payable returns (uint);
}
interface I3BBBBBBBBBBBBBBBBBB is I3BBBBBB {
	function f1() override
	external payable returns (uint);
}
interface I3BBBBBBBBBBBBBBBBBBB is I3BBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() external payable returns (uint);
}
interface I3BBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I3BBBBBBBBBBBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBBBBBBBBBBB {
}
interface I3BBBBBBBBBBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() external payable returns (uint);
}
interface I3BBBBBBBBBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBBBBBBBBB {
}
interface I3BBBBBBBBBBBBBBBBBBBB is I3B, I3BBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I3BBB, I3BBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I3B, I3BBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
}
interface I3BBBBBBBBBBBBBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBBBBBB {
	function f1() override
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
}
interface I3BBBBBBBBBBBBBBBBBBBBBBBBBB is I3B {
	function f0() override
	external payable returns (uint);
}
interface I3 is I3B, I3BBBBBB, I3BBBBBBB, I3BBBBBBBBBBBB, I3BBBBBBBBBBBBBBBBB, I3BBBBBBBBBBBBBBBBBB, I3BBBBBBBBBBBBBBBBBBB, I3BBBBBBBBBBBBBBBBBBBB, I3BBBBBBBBBBBBBBBBBBBBBBBBB, I3BBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I3BBB, I3BBBBBBB, I3BBBBBBBBBBBB, I3BBBBBBBBBBBBBBBBBBB, I3BBBBBBBBBBBBBBBBBBBB, I3BBBBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I3B, I3BBBBBB, I3BBBBBBB, I3BBBBBBBBBBBB, I3BBBBBBBBBBBBBBBBB, I3BBBBBBBBBBBBBBBBBB, I3BBBBBBBBBBBBBBBBBBB, I3BBBBBBBBBBBBBBBBBBBB, I3BBBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f2() override(I3BBBBBBBBBBBBBBBBBBB, I3BBBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
}
library L4 {
	function f0(uint) public pure returns (uint)
	{
		return 304089172;
	}
	function f1(uint) private view returns (uint)
	{
		return 1303455736;
	}
	function f2(uint) internal view returns (uint)
	{
		return 35005211;
	}
}
interface I5B {
}
interface I5BBBBBB {
	function f0() external payable returns (uint);
}
interface I5BBBBB is I5BBBBBB {
}
interface I5BBBB is I5BBBBB {
	function f1() external payable returns (uint);
}
interface I5BBB is I5BBBB {
}
interface I5BB is I5B, I5BBB {
	function f1() override
	external payable returns (uint);
}
interface I5BBBBBBB is I5B {
}
interface I5BBBBBBBB is I5B {
}
interface I5BBBBBBBBBBBB {
}
interface I5BBBBBBBBBBB is I5BBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I5BBBBBBBBBB is I5BBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I5BBBBBBBBB is I5B, I5BBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I5BBBBBBBBBBBBB is I5B {
}
interface I5BBBBBBBBBBBBBB is I5B {
}
interface I5BBBBBBBBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I5BBBBBBBBBBBBBBBBBB is I5BBBBBBBBBBBBBBBBBBB {
}
interface I5BBBBBBBBBBBBBBBBB is I5BBBBBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() external payable returns (uint);
}
interface I5BBBBBBBBBBBBBBBB is I5BBBBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I5BBBBBBBBBBBBBBB is I5BBBBBBB, I5BBBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I5BBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I5BBBBBBBBBBBBBBBBBBBBBBB is I5BBBBBBBBBBBBBBBBBBBBBBBB {
}
interface I5BBBBBBBBBBBBBBBBBBBBBB is I5BBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() external payable returns (uint);
}
interface I5BBBBBBBBBBBBBBBBBBBBB is I5BBBBBBBBBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I5BBBBBBBBBBBBBBBBBBBB is I5BBBBBBBBB, I5BBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I5BBBBBBBBB, I5BBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
}
interface I5BBBBBBBBBBBBBBBBBBBBBBBBB is I5BBBBBBBBBBBBBB {
}
interface I5 is I5B, I5BB, I5BBBBBBB, I5BBBBBBBB, I5BBBBBBBBB, I5BBBBBBBBBBBBB, I5BBBBBBBBBBBBBB, I5BBBBBBBBBBBBBBB, I5BBBBBBBBBBBBBBBBBBBB, I5BBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I5BBBBBB, I5BBBBBBBBB, I5BBBBBBBBBBBBBBB, I5BBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I5BB, I5BBBBBBBBBBBBBBB, I5BBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
}
contract C {
	using L4 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 304089172)
			return 1;
		return 0;
	}
}
