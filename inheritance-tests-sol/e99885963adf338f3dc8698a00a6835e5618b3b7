
pragma solidity >=0.0;


library L0 {

	function f0(uint) public pure returns (uint)
	{
		return 1804289383;
	}
	function f1(uint) public pure returns (uint)
	{
		return 846930886;
	}
	function f2(uint) public view returns (uint)
	{
		return 1681692777;
	}
}










interface I2BBBBBBBBB {

	function f0() external view returns (uint);
}

interface I2BBBBBBBBBB is I2BBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I2BBBBBBBB is I2BBBBBBBBB, I2BBBBBBBBBB {

	function f0() override(I2BBBBBBBBB, I2BBBBBBBBBB)
	external view returns (uint);
	function f2() external payable returns (uint);
	function f3() external view returns (uint);
}
interface I2BBBBBBB is I2BBBBBBBB {

	function f1() override
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
}
interface I2BBBBBB is I2BBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I2BBBBB is I2BBBBBB {

	function f1() override
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f4() external payable returns (uint);
}
interface I2BBBB is I2BBBBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
}

interface I2BBBBBBBBBBB is I2BBBBB {

	function f2() override
	external payable returns (uint);
	function f5() external payable returns (uint);
}
interface I2BBB is I2BBBB, I2BBBBBBBBBBB {

	function f0() override(I2BBBB, I2BBBBBB)
	external view returns (uint);
	function f1() override(I2BBBB, I2BBBBB)
	external payable returns (uint);
	function f2() override(I2BBBBB, I2BBBBBBBBBBB)
	external payable returns (uint);
	function f3() override(I2BBBB, I2BBBBB)
	external view returns (uint);
	function f6() external view returns (uint);
	function f7() external payable returns (uint);
	function f8() external view returns (uint);
	function f9() external payable returns (uint);
}
interface I2BB is I2BBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f6() override
	external view returns (uint);
	function f8() override
	external view returns (uint);
}
interface I2B is I2BB {

	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() override
	external view returns (uint);
	function f7() override
	external payable returns (uint);
	function f8() override
	external view returns (uint);
}

interface I2BBBBBBBBBBBB is I2BB {

	function f0() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f7() override
	external payable returns (uint);
	function f8() override
	external view returns (uint);
	function f9() override
	external payable returns (uint);
	function f10() external payable returns (uint);
}

interface I2BBBBBBBBBBBBB is I2BBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override
	external payable returns (uint);
	function f8() override
	external view returns (uint);
	function f9() override
	external payable returns (uint);
	function f10() override
	external payable returns (uint);
	function f11() external payable returns (uint);
}

interface I2BBBBBBBBBBBBBB is I2B {

	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
	function f4() override
	external payable returns (uint);
	function f7() override
	external payable returns (uint);
	function f8() override
	external view returns (uint);
	function f9() override
	external payable returns (uint);
	function f10() external payable returns (uint);
}
interface I2 is I2B, I2BBBBBBBBBBBB, I2BBBBBBBBBBBBB, I2BBBBBBBBBBBBBB {

	function f0() override(I2B, I2BBBBBBBBBBBB, I2BBBBBBBBBBBBB, I2BBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I2B, I2BB, I2BBBBBBBBBBBBBB)
	external payable returns (uint);
	function f2() override(I2BBB, I2BBBBBBBBBBBBBB)
	external payable returns (uint);
	function f3() override(I2B, I2BB, I2BBBBBBBBBBBBB)
	external view returns (uint);
	function f4() override(I2BB, I2BBBBBBBBBBBBB, I2BBBBBBBBBBBBBB)
	external payable returns (uint);
	function f5() override(I2B, I2BBBBBBBBBBBB, I2BBBBBBBBBBBBB)
	external payable returns (uint);
	function f6() override(I2B, I2BB)
	external view returns (uint);
	function f7() override(I2B, I2BBBBBBBBBBBB, I2BBBBBBBBBBBBBB)
	external payable returns (uint);
	function f8() override(I2B, I2BBBBBBBBBBBB, I2BBBBBBBBBBBBB, I2BBBBBBBBBBBBBB)
	external view returns (uint);
	function f9() override(I2BBB, I2BBBBBBBBBBBB, I2BBBBBBBBBBBBB, I2BBBBBBBBBBBBBB)
	external payable returns (uint);
	function f10() override(I2BBBBBBBBBBBB, I2BBBBBBBBBBBBB, I2BBBBBBBBBBBBBB)
	external payable returns (uint);
	function f12() external payable returns (uint);
}

contract C3 {

	function f0() virtual public pure
	
	returns (uint)
	{
		return 1347434655;
	}
}
library L5 {

	function f0(uint) public pure returns (uint)
	{
		return 596516649;
	}
	function f1(uint) public pure returns (uint)
	{
		return 1189641421;
	}
}


contract C {
	using L0 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f2() != 1681692777)
			return 1;
		return 0;
	}
}

