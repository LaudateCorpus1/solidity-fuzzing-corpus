pragma solidity >=0.0;
interface C0BBB {
	function f0() external payable returns (uint);
}
interface C0BB is C0BBB {
	function f0() override
	external payable returns (uint);
}
contract C0B is C0BB {
	function f0() external payable
	override
	returns (uint)
	{
		return 992596462;
	}
}
contract C0 is C0B {
}
contract C2B {
}
interface C2BBBB {
	function f0() external payable returns (uint);
	function f1() external payable returns (uint);
}
interface C2BBB is C2BBBB {
	function f0() override
	external payable returns (uint);
}
interface C2BB is C2BBB {
	function f0() override
	external payable returns (uint);
}
contract C2 is C2B, C2BB {
	function f0() external payable
	override
	returns (uint)
	{
		return 1805831206;
	}
	function f1() external payable
	override
	returns (uint)
	{
		return 399257814;
	}
}
interface C4BBB {
	function f0() external payable returns (uint);
}
interface C4BB is C4BBB {
	function f0() override
	external payable returns (uint);
}
contract C4B is C4BB {
	function f0() virtual external payable
	override
	returns (uint)
	{
		return 908028975;
	}
}
interface C4BBBBBB {
	function f0() external payable returns (uint);
}
interface C4BBBBB is C4BBBBBB {
}
interface C4BBBB is C4BBBBB {
}
contract C4 is C4B, C4BBBB {
	function f0() virtual external payable
	override(C4B, C4BBBBBB)
	returns (uint)
	{
		return 1650497032;
	}
}
interface C6BBB {
	function f0() external payable returns (uint);
}
interface C6BB is C6BBB {
	function f0() override
	external payable returns (uint);
}
contract C6B is C6BB {
	function f0() virtual external payable
	override
	returns (uint)
	{
		return 447122901;
	}
}
contract C6 is C6B {
}
library L7 {
	function f0(uint) public pure returns (uint)
	{
		return 1681692777;
	}
}
library L8 {
	function f0(uint) public pure returns (uint)
	{
		return 1714636915;
	}
}
contract C {
	using L7 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1681692777)
			return 1;
		return 0;
	}
}
