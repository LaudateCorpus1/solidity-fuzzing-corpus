pragma solidity >=0.0;
interface I0BBBBBBBBBBBBB {
}
interface I0BBBBBBBBBBBBBB is I0BBBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I0BBBBBBBBBBBB is I0BBBBBBBBBBBBB, I0BBBBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
	function f2() external view returns (uint);
}
interface I0BBBBBBBBBBB is I0BBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
}
interface I0BBBBBBBBBB is I0BBBBBBBBBBB {
	function f1() override
	external payable returns (uint);
}
interface I0BBBBBBBBB is I0BBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f3() external payable returns (uint);
}
interface I0BBBBBBBB is I0BBBBBBBBB {
	function f1() override
	external payable returns (uint);
	function f3() override
	external payable returns (uint);
}
interface I0BBBBBBBBBBBBBBB is I0BBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override
	external payable returns (uint);
	function f4() external payable returns (uint);
}
interface I0BBBBBBB is I0BBBBBBBB, I0BBBBBBBBBBBBBBB {
	function f0() override(I0BBBBBBBBB, I0BBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I0BBBBBBBB, I0BBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f2() override(I0BBBBBBBBBBB, I0BBBBBBBBBBBBBBB)
	external view returns (uint);
	function f3() override(I0BBBBBBBB, I0BBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() external view returns (uint);
	function f6() external pure returns (uint);
	function f7() external view returns (uint);
	function f8() external payable returns (uint);
}
interface I0BBBBBB is I0BBBBBBB {
	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
	function f5() override
	external view returns (uint);
	function f6() override
	external pure returns (uint);
}
interface I0BBBBB is I0BBBBBB {
	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f6() override
	external pure returns (uint);
	function f9() external view returns (uint);
}
interface I0BBBB is I0BBBBB {
	function f0() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override
	external view returns (uint);
	function f6() override
	external pure returns (uint);
	function f7() override
	external view returns (uint);
	function f8() override
	external payable returns (uint);
}
interface I0BBBBBBBBBBBBBBBB is I0BBBBB {
	function f3() override
	external payable returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override
	external view returns (uint);
	function f7() override
	external view returns (uint);
	function f8() override
	external payable returns (uint);
	function f10() external payable returns (uint);
}
interface I0BBB is I0BBBB, I0BBBBBBBBBBBBBBBB {
	function f0() override(I0BBBB, I0BBBBBBB)
	external view returns (uint);
	function f2() override(I0BBBB, I0BBBBB)
	external view returns (uint);
	function f3() override(I0BBBBBBB, I0BBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f4() override(I0BBBB, I0BBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f5() override(I0BBBB, I0BBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f6() override(I0BBBB, I0BBBBB)
	external pure returns (uint);
	function f7() override(I0BBBB, I0BBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f8() override(I0BBBB, I0BBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f9() override
	external view returns (uint);
	function f10() override
	external payable returns (uint);
	function f11() external view returns (uint);
}
interface I0BB is I0BBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f3() override
	external payable returns (uint);
	function f5() override
	external view returns (uint);
	function f9() override
	external view returns (uint);
}
interface I0B is I0BB {
	function f1() override
	external payable returns (uint);
	function f5() override
	external view returns (uint);
	function f7() override
	external view returns (uint);
	function f10() override
	external payable returns (uint);
	function f11() override
	external view returns (uint);
}
interface I0BBBBBBBBBBBBBBBBB is I0BB {
	function f1() override
	external payable returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override
	external view returns (uint);
	function f6() override
	external pure returns (uint);
	function f10() override
	external payable returns (uint);
	function f11() override
	external view returns (uint);
	function f12() external payable returns (uint);
}
interface I0 is I0B, I0BBBBBBBBBBBBBBBBB {
	function f1() override(I0B, I0BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f4() override(I0BBB, I0BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f5() override(I0B, I0BBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f6() override(I0BBB, I0BBBBBBBBBBBBBBBBB)
	external pure returns (uint);
	function f7() override(I0B, I0BBB)
	external view returns (uint);
	function f8() override
	external payable returns (uint);
	function f9() override
	external view returns (uint);
	function f10() override(I0B, I0BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f11() override(I0B, I0BBBBBBBBBBBBBBBBB)
	external view returns (uint);
}
interface I1BBBBBBBBBBBBB {
}
interface I1BBBBBBBBBBBBBB is I1BBBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I1BBBBBBBBBBBB is I1BBBBBBBBBBBBB, I1BBBBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
	function f2() external view returns (uint);
}
interface I1BBBBBBBBBBB is I1BBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I1BBBBBBBBBB is I1BBBBBBBBBBB {
	function f1() override
	external payable returns (uint);
}
interface I1BBBBBBBBB is I1BBBBBBBBBB {
	function f3() external payable returns (uint);
}
interface I1BBBBBBBB is I1BBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override
	external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBB is I1BBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f3() override
	external payable returns (uint);
	function f4() external payable returns (uint);
}
interface I1BBBBBBB is I1BBBBBBBB, I1BBBBBBBBBBBBBBB {
	function f0() override(I1BBBBBBBB, I1BBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I1BBBBBBBBBB, I1BBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f2() override(I1BBBBBBBB, I1BBBBBBBBBBBB)
	external view returns (uint);
	function f3() override(I1BBBBBBBB, I1BBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() external view returns (uint);
	function f6() external pure returns (uint);
	function f7() external view returns (uint);
	function f8() external payable returns (uint);
}
interface I1BBBBBB is I1BBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f3() override
	external payable returns (uint);
	function f4() override
	external payable returns (uint);
	function f6() override
	external pure returns (uint);
}
interface I1BBBBB is I1BBBBBB {
	function f0() override
	external view returns (uint);
	function f5() override
	external view returns (uint);
	function f7() override
	external view returns (uint);
	function f9() external view returns (uint);
}
interface I1BBBB is I1BBBBB {
	function f0() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override
	external payable returns (uint);
	function f6() override
	external pure returns (uint);
	function f7() override
	external view returns (uint);
	function f8() override
	external payable returns (uint);
	function f9() override
	external view returns (uint);
}
interface I1BBBBBBBBBBBBBBBB is I1BBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override
	external payable returns (uint);
	function f4() override
	external payable returns (uint);
	function f6() override
	external pure returns (uint);
	function f10() external payable returns (uint);
}
interface I1BBB is I1BBBB, I1BBBBBBBBBBBBBBBB {
	function f0() override(I1BBBB, I1BBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I1BBBBBB, I1BBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f2() override(I1BBBB, I1BBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f3() override(I1BBBB, I1BBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f4() override(I1BBBBBB, I1BBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f5() override
	external view returns (uint);
	function f6() override(I1BBBB, I1BBBBBBBBBBBBBBBB)
	external pure returns (uint);
	function f8() override
	external payable returns (uint);
	function f11() external view returns (uint);
}
interface I1BB is I1BBB {
	function f2() override
	external view returns (uint);
	function f3() override
	external payable returns (uint);
	function f4() override
	external payable returns (uint);
	function f7() override
	external view returns (uint);
	function f10() override
	external payable returns (uint);
}
interface I1B is I1BB {
	function f2() override
	external view returns (uint);
	function f7() override
	external view returns (uint);
	function f8() override
	external payable returns (uint);
	function f10() override
	external payable returns (uint);
	function f11() override
	external view returns (uint);
}
interface I1BBBBBBBBBBBBBBBBB is I1B {
	function f0() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f6() override
	external pure returns (uint);
	function f8() override
	external payable returns (uint);
	function f10() override
	external payable returns (uint);
	function f11() override
	external view returns (uint);
	function f12() external payable returns (uint);
}
interface I1 is I1B, I1BBBBBBBBBBBBBBBBB {
	function f0() override(I1BBB, I1BBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
	function f4() override(I1BB, I1BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f5() override
	external view returns (uint);
	function f6() override(I1BBB, I1BBBBBBBBBBBBBBBBB)
	external pure returns (uint);
	function f8() override(I1B, I1BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f9() override
	external view returns (uint);
	function f10() override(I1B, I1BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f11() override(I1B, I1BBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f12() override
	external payable returns (uint);
}
interface I2B {
	function f0() external view returns (uint);
}
interface I2BBBB {
}
interface I2BBB is I2BBBB {
}
interface I2BB is I2B, I2BBB {
}
interface I2 is I2B, I2BB {
}
contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}
