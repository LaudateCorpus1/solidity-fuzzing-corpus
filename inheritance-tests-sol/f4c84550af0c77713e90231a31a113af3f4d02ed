pragma solidity >=0.0;
interface I0BBBBBBB {
	function f0() external payable returns (uint);
}
interface I0BBBBBB is I0BBBBBBB {
}
interface I0BBBBB is I0BBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I0BBBB is I0BBBBB {
}
interface I0BBB is I0BBBB {
}
interface I0BB is I0BBB {
}
interface I0B is I0BB {
}
interface I0 is I0B {
	function f1() external payable returns (uint);
	function f2() external payable returns (uint);
	function f3() external view returns (uint);
}
interface I1BBBB {
	function f0() external payable returns (uint);
}
interface I1BBB is I1BBBB {
}
interface I1BB is I1BBB {
}
interface I1B is I1BB {
	function f0() override
	external payable returns (uint);
}
interface I1BBBBB is I1BB {
}
interface I1BBBBBBBB {
}
interface I1BBBBBBB is I1BBBBBBBB {
}
interface I1BBBBBB is I1BBBBB, I1BBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I1 is I1B, I1BBBBB, I1BBBBBB {
	function f0() override(I1B, I1BBBB, I1BBBBBB)
	external payable returns (uint);
	function f1() external view returns (uint);
	function f2() external payable returns (uint);
}
interface I2BBB {
}
interface I2BB is I2BBB {
}
interface I2B is I2BB {
}
interface I2 is I2B {
}
interface I3BB {
	function f0() external view returns (uint);
}
interface I3B is I3BB {
	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I3 is I3B {
}
contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}
