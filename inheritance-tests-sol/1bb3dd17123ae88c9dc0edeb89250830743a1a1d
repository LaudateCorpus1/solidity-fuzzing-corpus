
pragma solidity >=0.0;






interface I0BBB {

}
interface I0BB is I0BBB {

	function f0() external view returns (uint);
}
interface I0B is I0BB {

}



interface I0BBBBBB {

	function f0() external view returns (uint);
}
interface I0BBBBB is I0BBBBBB {

	function f1() external pure returns (uint);
}
interface I0BBBB is I0BB, I0BBBBB {

	function f0() override(I0BB, I0BBBBBB)
	external view returns (uint);
}
interface I0 is I0B, I0BBBB {

	function f0() override(I0BB, I0BBBB)
	external view returns (uint);
	function f1() override
	external pure returns (uint);
	function f2() external view returns (uint);
}
library L1 {

	function f0(uint) internal view returns (uint)
	{
		return 846930886;
	}
}
library L2 {

	function f0(uint) private pure returns (uint)
	{
		return 1681692777;
	}
}


contract C3B {

	function f0() public view
	
	returns (uint)
	{
		return 1521991514;
	}
}
abstract contract C3 is C3B {

}

interface I4 {

	function f0() external view returns (uint);
}

interface I5 {

	function f0() external view returns (uint);
}








interface I6BBBBBBB {

	function f0() external payable returns (uint);
}
interface I6BBBBBB is I6BBBBBBB {

}
interface I6BBBBB is I6BBBBBB {

	function f0() override
	external payable returns (uint);
}


interface I6BBBBBBBBB {

}
interface I6BBBBBBBB is I6BBBBBB, I6BBBBBBBBB {

	function f0() override
	external payable returns (uint);
}
interface I6BBBB is I6BBBBB, I6BBBBBBBB {

	function f0() override(I6BBBBB, I6BBBBBBBB)
	external payable returns (uint);
}
interface I6BBB is I6BBBB {

}
interface I6BB is I6BBB {

}






interface I6BBBBBBBBBBBBBBB {

	function f0() external payable returns (uint);
}
interface I6BBBBBBBBBBBBBB is I6BBBBBBBBBBBBBBB {

}
interface I6BBBBBBBBBBBBB is I6BBBBBBBBBBBBBB {

	function f0() override
	external payable returns (uint);
}
interface I6BBBBBBBBBBBB is I6BBBBBBBBBBBBB {

	function f0() override
	external payable returns (uint);
}
interface I6BBBBBBBBBBB is I6BBBBBBBBBBBB {

}
interface I6BBBBBBBBBB is I6BBB, I6BBBBBBBBBBB {

	function f0() override(I6BBBB, I6BBBBBBBBBBBB)
	external payable returns (uint);
}
interface I6B is I6BB, I6BBBBBBBBBB {

	function f0() override(I6BBBB, I6BBBBBBBBBB)
	external payable returns (uint);
}
interface I6 is I6B {

	function f0() override
	external payable returns (uint);
}



interface C7BB {

	function f0() external view returns (uint);
}

interface C7BBB is C7BB {

}
interface C7B is C7BB, C7BBB {

}


interface C7BBBBB {

	function f0() external view returns (uint);
}
interface C7BBBB is C7B, C7BBBBB {

	function f0() override(C7BB, C7BBBBB)
	external view returns (uint);
}
contract C7 is C7B, C7BBBB {

	function f0() external view
	override(C7BBBB, C7BB)
	returns (uint)
	{
		return 778400499;
	}
}







interface I8BBBBBB {

	function f0() external view returns (uint);
}
interface I8BBBBB is I8BBBBBB {

	function f1() external view returns (uint);
}
interface I8BBBB is I8BBBBB {

	function f0() override
	external view returns (uint);
}
interface I8BBB is I8BBBB {

	function f0() override
	external view returns (uint);
	function f2() external payable returns (uint);
}
interface I8BB is I8BBB {

	function f1() override
	external view returns (uint);
}
interface I8B is I8BB {

}
interface I8 is I8B {

	function f1() override
	external view returns (uint);
}






interface I9BBBBB {

	function f0() external view returns (uint);
}
interface I9BBBB is I9BBBBB {

	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I9BBB is I9BBBB {

	function f1() override
	external payable returns (uint);
}
interface I9BB is I9BBB {

	function f2() external payable returns (uint);
}
interface I9B is I9BB {

	function f0() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
}
interface I9 is I9B {

	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
}
library L10 {

	function f0(uint) external pure returns (uint)
	{
		return 1649760492;
	}
}
library L11 {

	function f0(uint) external pure returns (uint)
	{
		return 596516649;
	}
}
library L12 {

	function f0(uint) external pure returns (uint)
	{
		return 1189641421;
	}
}


contract C {
	using L12 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1189641421)
			return 1;
		return 0;
	}
}

