
pragma solidity >=0.0;


library L1 {

	function f0(uint) internal pure returns (uint)
	{
		return 846930886;
	}
}



interface I2BB {

	function f0() external view returns (uint);
}
interface I2B is I2BB {

	function f1() external payable returns (uint);
}
interface I2 is I2B {

	function f0() override
	external view returns (uint);
}
library L3 {

	function f0(uint) public pure returns (uint)
	{
		return 1681692777;
	}
}
library L4 {

	function f0(uint) internal pure returns (uint)
	{
		return 1714636915;
	}
}
library L5 {

	function f0(uint) public pure returns (uint)
	{
		return 1957747793;
	}
}

interface I6 {

	function f0() external payable returns (uint);
}




interface I7BBB {

	function f0() external payable returns (uint);
}
interface I7BB is I7BBB {

	function f1() external payable returns (uint);
}
interface I7B is I7BB {

	function f2() external view returns (uint);
}


interface I7BBBBB {

	function f0() external payable returns (uint);
}
interface I7BBBB is I7BB, I7BBBBB {

	function f0() override(I7BBB, I7BBBBB)
	external payable returns (uint);
}

interface I7BBBBBB is I7BBBB {

	function f2() external view returns (uint);
}
interface I7 is I7B, I7BBBB, I7BBBBBB {

	function f0() override(I7BBB, I7BBBB)
	external payable returns (uint);
	function f2() override(I7B, I7BBBBBB)
	external view returns (uint);
}









interface C8BBBBBBBB {

	function f0() external pure returns (uint);
}
interface C8BBBBBBB is C8BBBBBBBB {

	function f0() override
	external pure returns (uint);
}
interface C8BBBBBB is C8BBBBBBB {

	function f1() external view returns (uint);
	function f2() external view returns (uint);
}
interface C8BBBBB is C8BBBBBB {

	function f1() override
	external view returns (uint);
}

interface C8BBBBBBBBB is C8BBBBB {

	function f0() override
	external pure returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f3() external view returns (uint);
}
interface C8BBBB is C8BBBBB, C8BBBBBBBBB {

	function f0() override(C8BBBBBBB, C8BBBBBBBBB)
	external pure returns (uint);
	function f1() override(C8BBBBB, C8BBBBBBBBB)
	external view returns (uint);
	function f2() override(C8BBBBBB, C8BBBBBBBBB)
	external view returns (uint);
}
contract C8BBB is C8BBBB {

	function f0() virtual external pure
	override
	returns (uint)
	{
		return 662405787;
	}
	function f1() virtual external view
	override
	returns (uint)
	{
		return 849178936;
	}
	function f2() external view
	override
	returns (uint)
	{
		return 1479919876;
	}
	function f3() external view
	override
	returns (uint)
	{
		return 1272185027;
	}
}
contract C8BB is C8BBB {

	function f0() virtual external pure
	override
	returns (uint)
	{
		return 1287522347;
	}
}
contract C8B is C8BB {

}
contract C8 is C8B {

	function f1() external view
	override
	returns (uint)
	{
		return 389431516;
	}
}

contract C9 {

	function f0() virtual public pure
	
	returns (uint)
	{
		return 1324346645;
	}
}




interface I10BBB {

	function f0() external payable returns (uint);
}
interface I10BB is I10BBB {

	function f1() external payable returns (uint);
}
interface I10B is I10BB {

	function f1() override
	external payable returns (uint);
	function f2() external view returns (uint);
}


interface I10BBBBB {

	function f0() external payable returns (uint);
}
interface I10BBBB is I10BB, I10BBBBB {

	function f0() override(I10BBB, I10BBBBB)
	external payable returns (uint);
}
interface I10 is I10B, I10BBBB {

	function f0() override(I10BBB, I10BBBB)
	external payable returns (uint);
	function f1() override(I10B, I10BB)
	external payable returns (uint);
	function f2() override
	external view returns (uint);
}


contract C {
	using L5 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1957747793)
			return 1;
		return 0;
	}
}

