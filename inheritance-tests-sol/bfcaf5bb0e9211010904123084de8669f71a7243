pragma solidity >=0.0;
interface I0B {
	function f0() external payable returns (uint);
}
interface I0BBB {
	function f0() external payable returns (uint);
}
interface I0BB is I0B, I0BBB {
	function f0() override(I0B, I0BBB)
	external payable returns (uint);
	function f1() external payable returns (uint);
}
interface I0 is I0B, I0BB {
	function f0() override(I0B, I0BB)
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I1BBBBBB {
	function f0() external payable returns (uint);
}
interface I1BBBBB is I1BBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I1BBBB is I1BBBBB {
	function f1() external view returns (uint);
}
interface I1BBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I1BBBBBBBBB is I1BBBBBBBBBB {
}
interface I1BBBBBBBB is I1BBBBBBBBB {
}
interface I1BBBBBBB is I1BBBB, I1BBBBBBBB {
	function f0() override(I1BBBBB, I1BBBBBBBBBB)
	external payable returns (uint);
}
interface I1BBB is I1BBBB, I1BBBBBBB {
	function f0() override(I1BBBBB, I1BBBBBBB)
	external payable returns (uint);
}
interface I1BB is I1BBB {
}
interface I1BBBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I1BBBBBBBBBBBBB is I1BBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I1BBBBBBBBBBBB is I1BBBBBBBBBBBBB {
}
interface I1BBBBBBBBBBB is I1BBB, I1BBBBBBBBBBBB {
	function f0() override(I1BBB, I1BBBBBBBBBBBBB)
	external payable returns (uint);
}
interface I1B is I1BB, I1BBBBBBBBBBB {
	function f0() override(I1BBB, I1BBBBBBBBBBB)
	external payable returns (uint);
}
interface I1 is I1B {
	function f0() override
	external payable returns (uint);
	function f1() override
	external view returns (uint);
}
contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}
