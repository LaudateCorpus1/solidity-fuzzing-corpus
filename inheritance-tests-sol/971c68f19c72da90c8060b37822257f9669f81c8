pragma solidity >=0.0;
interface I0BBBBBB {
	function f0() external payable returns (uint);
}
interface I0BBBBB is I0BBBBBB {
}
interface I0BBBB is I0BBBBB {
	function f0() override
	external payable returns (uint);
}
interface I0BBB is I0BBBB {
}
interface I0BB is I0BBB {
}
interface I0B is I0BB {
}
interface I0 is I0B {
}
contract C1 {
	function f0() virtual public pure
	
	returns (uint)
	{
		return 1203428207;
	}
}
contract C2 {
	function f0() public view
	
	returns (uint)
	{
		return 1250328747;
	}
}
contract C3 {
	function f0() public view
	
	returns (uint)
	{
		return 1738531149;
	}
}
interface I4B {
}
interface I4 is I4B {
}
interface I5B {
	function f0() external pure returns (uint);
}
interface I5 is I5B {
}
interface I6BBBB {
	function f0() external payable returns (uint);
}
interface I6BBB is I6BBBB {
}
interface I6BB is I6BBB {
	function f0() override
	external payable returns (uint);
}
interface I6B is I6BB {
}
interface I6 is I6B {
	function f1() external payable returns (uint);
	function f2() external payable returns (uint);
	function f3() external view returns (uint);
}
abstract contract C7B {
}
contract C7 is C7B {
	function f0() public view
	
	returns (uint)
	{
		return 1931656580;
	}
}
contract C {
	function test() public returns (uint)
	{
			C1 tc0 = new C1();
			if (tc0.f0() != 1203428207)
				return 1;
			C2 tc1 = new C2();
			if (tc1.f0() != 1250328747)
				return 2;
			C3 tc2 = new C3();
			if (tc2.f0() != 1738531149)
				return 3;
			C7 tc3 = new C7();
			if (tc3.f0() != 1931656580)
				return 4;
			return 0;
	}
}
