
pragma solidity >=0.0;





interface I1BB {

	function f0() external view returns (uint);
}
interface I1B is I1BB {

	function f1() external payable returns (uint);
}
interface I1 is I1B {

}



interface I3BB {

}
interface I3B is I3BB {

}

interface I3BBB is I3BB {

}



interface I3BBBBBB {

}
interface I3BBBBB is I3BBBBBB {

}
interface I3BBBB is I3BBB, I3BBBBB {

}
interface I3 is I3B, I3BBB, I3BBBB {

	function f0() external view returns (uint);
	function f1() external payable returns (uint);
}

contract C4 {

	function f0() public view
	
	returns (uint)
	{
		return 1203428207;
	}
}



abstract contract C5BB {

}
contract C5B is C5BB {

	function f0() external pure
	
	returns (uint)
	{
		return 1250328747;
	}
}

abstract contract C5BBB is C5BB {

}
abstract contract C5 is C5B, C5BBB {

}


contract C6B {

}
contract C6 is C6B {

	function f0() public view
	
	returns (uint)
	{
		return 1098894339;
	}
}


interface C9B {

}


contract C9BBB {

	function f0() virtual public view
	
	returns (uint)
	{
		return 2136927794;
	}
}
abstract contract C9BB is C9B, C9BBB {

	function f1() virtual public payable
	
	returns (uint);
}
abstract contract C9 is C9B, C9BB {

	function f0() public view
	override
	returns (uint)
	{
		return 1936030137;
	}
	function f1() virtual public payable
	override
	returns (uint);
	function f2() external pure
	
	returns (uint)
	{
		return 1842513780;
	}
}


interface I10B {

	function f0() external view returns (uint);
}

interface I10BB is I10B {

	function f1() external view returns (uint);
}
interface I10 is I10B, I10BB {

	function f1() override
	external view returns (uint);
}


contract C {
	function test() public returns (uint)
	{
			C4 tc0 = new C4();
			if (tc0.f0() != 1203428207)
				return 1;
			C5B tc1 = new C5B();
			if (tc1.f0() != 1250328747)
				return 2;
			C6 tc2 = new C6();
			if (tc2.f0() != 1098894339)
				return 3;
			C9BBB tc3 = new C9BBB();
			if (tc3.f0() != 2136927794)
				return 4;
			return 0;
	}
}

