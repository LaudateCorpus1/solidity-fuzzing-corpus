pragma solidity >=0.0;
interface C0BBB {
}
interface C0BBBBB {
	function f0() external payable returns (uint);
	function f1() external payable returns (uint);
}
interface C0BBBB is C0BBB, C0BBBBB {
	function f1() override
	external payable returns (uint);
}
interface C0BB is C0BBB, C0BBBB {
}
interface C0B is C0BB {
}
contract C0 is C0B {
	function f0() external payable
	override
	returns (uint)
	{
		return 192302371;
	}
	function f1() external payable
	override
	returns (uint)
	{
		return 1250328747;
	}
}
interface I1 {
	function f0() external view returns (uint);
}
interface I3 {
	function f0() external view returns (uint);
}
contract C4 {
	function f0() public payable
	
	returns (uint)
	{
		return 1271135913;
	}
}
interface I5BB {
	function f0() external view returns (uint);
}
interface I5B is I5BB {
	function f1() external payable returns (uint);
}
interface I5 is I5B {
	function f0() override
	external view returns (uint);
}
interface I6BB {
	function f0() external payable returns (uint);
}
interface I6B is I6BB {
	function f1() external payable returns (uint);
}
interface I6 is I6B {
	function f1() override
	external payable returns (uint);
}
contract C7BB {
	function f0() virtual public pure
	
	returns (uint)
	{
		return 1402304087;
	}
}
contract C7B is C7BB {
}
abstract contract C7 is C7B {
	function f0() virtual public pure
	override
	returns (uint)
	{
		return 1947433875;
	}
}
contract C {
	function test() public returns (uint)
	{
			C0 tc0 = new C0();
			if (tc0.f0() != 192302371)
				return 1;
			if (tc0.f1() != 1250328747)
				return 2;
			C4 tc1 = new C4();
			if (tc1.f0() != 1271135913)
				return 3;
			C7B tc2 = new C7B();
			if (tc2.f0() != 1402304087)
				return 4;
			C7BB tc3 = new C7BB();
			if (tc3.f0() != 1402304087)
				return 5;
			return 0;
	}
}
