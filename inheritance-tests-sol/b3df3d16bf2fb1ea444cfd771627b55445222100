
pragma solidity >=0.0;



interface I0 {

	function f0() external payable returns (uint);
}



interface I1BB {

}
interface I1B is I1BB {

}
interface I1 is I1B {

}

contract C2 {

	function f0() public view
	
	returns (uint)
	{
		return 1847580730;
	}
}






interface I3BBBBB {

	function f0() external view returns (uint);
}
interface I3BBBB is I3BBBBB {

}
interface I3BBB is I3BBBB {

	function f1() external payable returns (uint);
}
interface I3BB is I3BBB {

	function f0() override
	external view returns (uint);
}
interface I3B is I3BB {

	function f0() override
	external view returns (uint);
}
interface I3 is I3B {

	function f1() override
	external payable returns (uint);
}



abstract contract C4BB {

}
contract C4B is C4BB {

}



interface C4BBBBB {

	function f0() external payable returns (uint);
}
interface C4BBBB is C4BBBBB {

	function f0() override
	external payable returns (uint);
}
interface C4BBB is C4BBBB {

	function f1() external pure returns (uint);
}
contract C4 is C4B, C4BBB {

	function f0() external payable
	override
	returns (uint)
	{
		return 1325416955;
	}
	function f1() external pure
	override
	returns (uint)
	{
		return 1760838767;
	}
}
library L5 {

	function f0(uint) public view returns (uint)
	{
		return 846930886;
	}
}




interface I6BBB {

}
interface I6BB is I6BBB {

}
interface I6B is I6BB {

}
interface I6 is I6B {

}



interface I7BB {

}
interface I7B is I7BB {

}
interface I7 is I7B {

}




interface C8BBB {

}
interface C8BB is C8BBB {

}
interface C8B is C8BB {

	function f0() external view returns (uint);
}
contract C8 is C8B {

	function f0() virtual external view
	override
	returns (uint)
	{
		return 1096328782;
	}
}


contract C {
	function test() public returns (uint)
	{
			C2 tc0 = new C2();
			if (tc0.f0() != 1847580730)
				return 1;
			C4 tc1 = new C4();
			if (tc1.f0() != 1325416955)
				return 2;
			if (tc1.f1() != 1760838767)
				return 3;
			C8 tc2 = new C8();
			if (tc2.f0() != 1096328782)
				return 4;
			return 0;
	}
}

