pragma solidity >=0.0;
interface C0BBB {
	function f0() external view returns (uint);
	function f1() external payable returns (uint);
}
interface C0BB is C0BBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}
interface C0B is C0BB {
}
contract C0 is C0B {
	function f0() external view
	override
	returns (uint)
	{
		return 2077369900;
	}
	function f1() virtual external payable
	override
	returns (uint)
	{
		return 803079650;
	}
}
interface C1BBB {
	function f0() external payable returns (uint);
}
interface C1BB is C1BBB {
}
abstract contract C1B is C1BB {
	function f0() virtual external payable
	override
	returns (uint);
}
abstract contract C1BBBBB {
}
contract C1BBBB is C1BB, C1BBBBB {
	function f0() virtual external payable
	override
	returns (uint)
	{
		return 176365511;
	}
}
contract C1 is C1B, C1BBBB {
	function f0() external payable
	override(C1BBBB, C1B)
	returns (uint)
	{
		return 1133844973;
	}
}
interface C3B {
	function f0() external view returns (uint);
}
interface C3BB is C3B {
	function f1() external view returns (uint);
}
contract C3 is C3B, C3BB {
	function f0() virtual external view
	override
	returns (uint)
	{
		return 820216093;
	}
	function f1() external view
	override
	returns (uint)
	{
		return 461049841;
	}
	function f2() virtual public pure
	
	returns (uint)
	{
		return 963841050;
	}
}
interface I4BBBBBBB {
	function f0() external payable returns (uint);
}
interface I4BBBBBB is I4BBBBBBB {
}
interface I4BBBBB is I4BBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I4BBBB is I4BBBBB {
	function f0() override
	external payable returns (uint);
}
interface I4BBB is I4BBBB {
}
interface I4BB is I4BBB {
	function f0() override
	external payable returns (uint);
}
interface I4B is I4BB {
	function f0() override
	external payable returns (uint);
}
interface I4BBBBBBBB is I4BB {
	function f1() external payable returns (uint);
}
interface I4 is I4B, I4BBBBBBBB {
	function f0() override(I4B, I4BB)
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
contract C5 {
	function f0() external pure
	
	returns (uint)
	{
		return 306816042;
	}
}
library L6 {
	function f0(uint) public pure returns (uint)
	{
		return 1714636915;
	}
}
interface I7BBBB {
	function f0() external view returns (uint);
}
interface I7BBB is I7BBBB {
	function f1() external payable returns (uint);
}
interface I7BBBBB is I7BBBB {
	function f1() external payable returns (uint);
}
interface I7BB is I7BBB, I7BBBBB {
	function f0() override
	external view returns (uint);
	function f1() override(I7BBB, I7BBBBB)
	external payable returns (uint);
}
interface I7B is I7BB {
	function f0() override
	external view returns (uint);
	function f2() external payable returns (uint);
}
interface I7BBBBBBB {
	function f0() external view returns (uint);
}
interface I7BBBBBB is I7BB, I7BBBBBBB {
	function f0() override(I7BB, I7BBBBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() external payable returns (uint);
}
interface I7 is I7B, I7BBBBBB {
	function f0() override(I7B, I7BBBBBB)
	external view returns (uint);
	function f1() override(I7BB, I7BBBBBB)
	external payable returns (uint);
	function f2() override(I7B, I7BBBBBB)
	external payable returns (uint);
}
interface C8BBB {
	function f0() external payable returns (uint);
}
interface C8BB is C8BBB {
	function f0() override
	external payable returns (uint);
}
interface C8B is C8BB {
}
contract C8 is C8B {
	function f0() virtual external payable
	override
	returns (uint)
	{
		return 949992754;
	}
}
interface C10BBB {
	function f0() external payable returns (uint);
}
interface C10BB is C10BBB {
	function f0() override
	external payable returns (uint);
}
contract C10B is C10BB {
	function f0() virtual external payable
	override
	returns (uint)
	{
		return 137545673;
	}
}
contract C10 is C10B {
}
interface C12BBB {
	function f0() external payable returns (uint);
}
interface C12BB is C12BBB {
}
contract C12B is C12BB {
	function f0() virtual external payable
	override
	returns (uint)
	{
		return 265022506;
	}
}
contract C12 is C12B {
	function f0() virtual external payable
	override
	returns (uint)
	{
		return 60896737;
	}
}
contract C {
	using L6 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1714636915)
			return 1;
		return 0;
	}
}
