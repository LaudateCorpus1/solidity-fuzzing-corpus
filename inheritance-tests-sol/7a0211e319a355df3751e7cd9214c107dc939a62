
pragma solidity >=0.0;




interface I0B {

	function f0() external view returns (uint);
}
interface I0 is I0B {

	function f0() override
	external view returns (uint);
}





interface I1BBBB {

	function f0() external view returns (uint);
}
interface I1BBB is I1BBBB {

}
interface I1BB is I1BBB {

}
interface I1B is I1BB {

}

interface I1BBBBB is I1BB {

	function f1() external view returns (uint);
}




interface I1BBBBBBBBB {

	function f0() external view returns (uint);
}
interface I1BBBBBBBB is I1BBBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I1BBBBBBB is I1BBBBBBBB {

}
interface I1BBBBBB is I1BBBBB, I1BBBBBBB {

	function f0() override(I1BBBB, I1BBBBBBBB)
	external view returns (uint);
}
interface I1 is I1B, I1BBBBB, I1BBBBBB {

	function f0() override(I1BBBB, I1BBBBBB)
	external view returns (uint);
	function f1() override
	external view returns (uint);
}




interface I2BBB {

	function f0() external view returns (uint);
}
interface I2BB is I2BBB {

}
interface I2B is I2BB {

	function f0() override
	external view returns (uint);
}
interface I2 is I2B {

	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
}





interface I3BBBB {

	function f0() external view returns (uint);
}
interface I3BBB is I3BBBB {

}
interface I3BB is I3BBB {

	function f1() external view returns (uint);
}
interface I3B is I3BB {

	function f1() override
	external view returns (uint);
}




interface I3BBBBBBBB {

	function f0() external view returns (uint);
}
interface I3BBBBBBB is I3BBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I3BBBBBB is I3BBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I3BBBBB is I3BB, I3BBBBBB {

	function f0() override(I3BBBB, I3BBBBBB)
	external view returns (uint);
}
interface I3 is I3B, I3BBBBB {

	function f0() override(I3BBBB, I3BBBBB)
	external view returns (uint);
	function f1() override(I3B, I3BB)
	external view returns (uint);
}


interface I4B {

	function f0() external view returns (uint);
}

interface I4BB is I4B {

	function f0() override
	external view returns (uint);
}

interface I4BBB is I4B {

	function f0() override
	external view returns (uint);
}
interface I4 is I4B, I4BB, I4BBB {

	function f0() override(I4B, I4BB, I4BBB)
	external view returns (uint);
}
library L5 {

	function f0(uint) private pure returns (uint)
	{
		return 424238335;
	}
}




interface I6BBB {

	function f0() external view returns (uint);
}
interface I6BB is I6BBB {

	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
	function f2() external payable returns (uint);
}


interface I6BBBBB {

	function f0() external view returns (uint);
}
interface I6BBBB is I6BB, I6BBBBB {

	function f0() override(I6BB, I6BBBBB)
	external view returns (uint);
	function f3() external view returns (uint);
}
interface I6B is I6BB, I6BBBB {

	function f0() override(I6BB, I6BBBB)
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
}


interface I6BBBBBBB {

	function f0() external view returns (uint);
}
interface I6BBBBBB is I6B, I6BBBBBBB {

	function f0() override(I6B, I6BBBBBBB)
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() external payable returns (uint);
}
interface I6 is I6B, I6BBBBBB {

	function f0() override(I6B, I6BBBBBB)
	external view returns (uint);
	function f1() override(I6B, I6BBBBBB)
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override(I6B, I6BBBBBB)
	external view returns (uint);
	function f5() external payable returns (uint);
	function f6() external view returns (uint);
}
library L8 {

	function f0(uint) private pure returns (uint)
	{
		return 596516649;
	}
}


interface I9B {

	function f0() external view returns (uint);
}

interface I9BB is I9B {

}
interface I9 is I9B, I9BB {

	function f1() external view returns (uint);
}


interface I10B {

	function f0() external view returns (uint);
}

interface I10BB is I10B {

	function f0() override
	external view returns (uint);
}
interface I10 is I10B, I10BB {

	function f0() override(I10B, I10BB)
	external view returns (uint);
}


contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}

