pragma solidity >=0.0;
interface C0BB {
	function f0() external view returns (uint);
	function f1() external view returns (uint);
}
interface C0B is C0BB {
	function f1() override
	external view returns (uint);
}
contract C0 is C0B {
	function f0() external view
	override
	returns (uint)
	{
		return 2078669041;
	}
	function f1() external view
	override
	returns (uint)
	{
		return 1105902161;
	}
}
interface C1BBB {
	function f0() external view returns (uint);
}
interface C1BB is C1BBB {
}
abstract contract C1B is C1BB {
	function f0() virtual external view
	override
	returns (uint);
}
contract C1 is C1B {
	function f0() external view
	override
	returns (uint)
	{
		return 1271135913;
	}
}
interface I2BBBBB {
	function f0() external payable returns (uint);
}
interface I2BBBB is I2BBBBB {
}
interface I2BBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I2BBBBBBBBBBB is I2BBBBBBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() external payable returns (uint);
}
interface I2BBBBBBBBB is I2BBBBBBBBBB, I2BBBBBBBBBBB {
	function f0() override(I2BBBBBBBBBB, I2BBBBBBBBBBB)
	external payable returns (uint);
}
interface I2BBBBBBBB is I2BBBBBBBBB {
	function f1() override
	external payable returns (uint);
}
interface I2BBBBBBB is I2BBBBBBBB {
	function f1() override
	external payable returns (uint);
}
interface I2BBBBBB is I2BBBBB, I2BBBBBBB {
	function f0() override(I2BBBBB, I2BBBBBBBBB)
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I2BBB is I2BBBB, I2BBBBBB {
	function f0() override(I2BBBBB, I2BBBBBB)
	external payable returns (uint);
}
interface I2BB is I2BBB {
	function f0() override
	external payable returns (uint);
}
interface I2B is I2BB {
	function f0() override
	external payable returns (uint);
}
interface I2 is I2B {
	function f2() external payable returns (uint);
}
interface I3B {
	function f0() external payable returns (uint);
}
interface I3 is I3B {
}
library L4 {
	function f0(uint) external pure returns (uint)
	{
		return 1681692777;
	}
}
library L5 {
	function f0(uint) internal pure returns (uint)
	{
		return 1714636915;
	}
}
interface C6BB {
	function f0() external payable returns (uint);
}
interface C6B is C6BB {
	function f0() override
	external payable returns (uint);
}
interface C6BBBBB {
}
interface C6BBBBBBB {
	function f0() external payable returns (uint);
	function f1() external payable returns (uint);
}
interface C6BBBBBB is C6BBBBB, C6BBBBBBB {
	function f1() override
	external payable returns (uint);
}
interface C6BBBB is C6BBBBB, C6BBBBBB {
	function f1() override
	external payable returns (uint);
}
interface C6BBB is C6BB, C6BBBB {
	function f0() override(C6BB, C6BBBBBBB)
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
contract C6 is C6B, C6BBB {
	function f0() virtual external payable
	override(C6BBB, C6B)
	returns (uint)
	{
		return 1324346645;
	}
	function f1() external payable
	override
	returns (uint)
	{
		return 1587659744;
	}
}
library L7 {
	function f0(uint) private pure returns (uint)
	{
		return 719885386;
	}
}
contract C8BBB {
	function f0() external pure
	
	returns (uint)
	{
		return 674592135;
	}
}
contract C8BB is C8BBB {
}
contract C8B is C8BB {
}
contract C8 is C8B {
}
library L9 {
	function f0(uint) public view returns (uint)
	{
		return 1649760492;
	}
}
library L10 {
	function f0(uint) private pure returns (uint)
	{
		return 596516649;
	}
}
library L11 {
	function f0(uint) public pure returns (uint)
	{
		return 1189641421;
	}
	function f1(uint) public view returns (uint)
	{
		return 1025202362;
	}
}
library L12 {
	function f0(uint) private pure returns (uint)
	{
		return 1350490027;
	}
	function f1(uint) external pure returns (uint)
	{
		return 783368690;
	}
}
interface I13BBB {
	function f0() external payable returns (uint);
}
interface I13BB is I13BBB {
}
interface I13B is I13BB {
}
interface I13 is I13B {
}
contract C {
	function test() public returns (uint)
	{
			C0 tc0 = new C0();
			if (tc0.f0() != 2078669041)
				return 1;
			if (tc0.f1() != 1105902161)
				return 2;
			C1 tc1 = new C1();
			if (tc1.f0() != 1271135913)
				return 3;
			C6 tc2 = new C6();
			if (tc2.f0() != 1324346645)
				return 4;
			if (tc2.f1() != 1587659744)
				return 5;
			C8 tc3 = new C8();
			if (tc3.f0() != 674592135)
				return 6;
			C8B tc4 = new C8B();
			if (tc4.f0() != 674592135)
				return 7;
			C8BB tc5 = new C8BB();
			if (tc5.f0() != 674592135)
				return 8;
			C8BBB tc6 = new C8BBB();
			if (tc6.f0() != 674592135)
				return 9;
			return 0;
	}
}
