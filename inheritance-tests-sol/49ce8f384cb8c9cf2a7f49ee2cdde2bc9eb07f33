
pragma solidity >=0.0;








interface I0BBBBB {

	function f0() external view returns (uint);
}

interface I0BBBBBB is I0BBBBB {

	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
}
interface I0BBBB is I0BBBBB, I0BBBBBB {

	function f0() override(I0BBBBB, I0BBBBBB)
	external view returns (uint);
}
interface I0BBB is I0BBBB {

	function f0() override
	external view returns (uint);
}
interface I0BB is I0BBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
}


interface I0BBBBBBBB {

	function f0() external view returns (uint);
}
interface I0BBBBBBB is I0BB, I0BBBBBBBB {

	function f0() override(I0BB, I0BBBBBBBB)
	external view returns (uint);
	function f1() override
	external view returns (uint);
}
interface I0B is I0BB, I0BBBBBBB {

	function f0() override(I0BB, I0BBBBBBB)
	external view returns (uint);
	function f1() override(I0BB, I0BBBBBBB)
	external view returns (uint);
}

interface I0BBBBBBBBB is I0BBBBBBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() external payable returns (uint);
}
interface I0 is I0B, I0BBBBBBBBB {

	function f0() override(I0B, I0BBBBBBBBB)
	external view returns (uint);
	function f1() override(I0B, I0BBBBBBBBB)
	external view returns (uint);
	function f2() override
	external payable returns (uint);
}

interface I1 {

	function f0() external view returns (uint);
}









interface C2BBBBBBBB {

	function f0() external view returns (uint);
}
interface C2BBBBBBB is C2BBBBBBBB {

}
interface C2BBBBBB is C2BBBBBBB {

}
interface C2BBBBB is C2BBBBBB {

}
interface C2BBBB is C2BBBBB {

}
interface C2BBB is C2BBBB {

}
interface C2BB is C2BBB {

	function f0() override
	external view returns (uint);
}
interface C2B is C2BB {

}
contract C2 is C2B {

	function f0() virtual external view
	override
	returns (uint)
	{
		return 1356611075;
	}
}
library L3 {

	function f0(uint) external pure returns (uint)
	{
		return 1714636915;
	}
}


contract C {
	function test() public returns (uint)
	{
			C2 tc0 = new C2();
			if (tc0.f0() != 1356611075)
				return 1;
			return 0;
	}
}

