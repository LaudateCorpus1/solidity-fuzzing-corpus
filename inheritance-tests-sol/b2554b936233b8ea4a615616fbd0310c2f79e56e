pragma solidity >=0.0;
interface I0 {
	function f0() external view returns (uint);
}
library L1 {
	function f0(uint) external pure returns (uint)
	{
		return 1804289383;
	}
	function f1(uint) private pure returns (uint)
	{
		return 846930886;
	}
}
interface I2B {
	function f0() external view returns (uint);
}
interface I2 is I2B {
	function f0() override
	external view returns (uint);
}
interface C3BB {
	function f0() external view returns (uint);
}
interface C3BBB is C3BB {
	function f1() external view returns (uint);
}
interface C3B is C3BB, C3BBB {
	function f0() override
	external view returns (uint);
}
contract C3 is C3B {
	function f0() virtual external view
	override
	returns (uint)
	{
		return 160099598;
	}
	function f1() virtual external view
	override
	returns (uint)
	{
		return 1986052792;
	}
}
interface I4BBBB {
	function f0() external payable returns (uint);
}
interface I4BBB is I4BBBB {
	function f0() override
	external payable returns (uint);
}
interface I4BB is I4BBB {
	function f0() override
	external payable returns (uint);
}
interface I4BBBBBBBB {
	function f0() external payable returns (uint);
}
interface I4BBBBBBB is I4BBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I4BBBBBB is I4BBBBBBB {
}
interface I4BBBBB is I4BBB, I4BBBBBB {
	function f0() override(I4BBB, I4BBBBBBB)
	external payable returns (uint);
}
interface I4B is I4BB, I4BBBBB {
	function f0() override(I4BB, I4BBBBB)
	external payable returns (uint);
}
interface I4 is I4B {
}
interface I5BBBBB {
	function f0() external view returns (uint);
}
interface I5BBBBBB is I5BBBBB {
	function f1() external view returns (uint);
}
interface I5BBBB is I5BBBBB, I5BBBBBB {
}
interface I5BBB is I5BBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
}
interface I5BB is I5BBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
}
interface I5BBBBBBBB {
	function f0() external view returns (uint);
}
interface I5BBBBBBB is I5BBB, I5BBBBBBBB {
	function f0() override(I5BBB, I5BBBBBBBB)
	external view returns (uint);
	function f1() override
	external view returns (uint);
}
interface I5B is I5BB, I5BBBBBBB {
	function f0() override(I5BB, I5BBBBBBB)
	external view returns (uint);
	function f1() override(I5BB, I5BBBBBBB)
	external view returns (uint);
}
interface I5BBBBBBBBB is I5B {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() external payable returns (uint);
}
interface I5 is I5B, I5BBBBBBBBB {
	function f0() override(I5B, I5BBBBBBBBB)
	external view returns (uint);
	function f1() override(I5B, I5BBBBBBBBB)
	external view returns (uint);
}
interface I6BBB {
	function f0() external payable returns (uint);
	function f1() external payable returns (uint);
}
interface I6BB is I6BBB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I6B is I6BB {
	function f1() override
	external payable returns (uint);
}
interface I6BBBBB {
	function f0() external payable returns (uint);
}
interface I6BBBB is I6B, I6BBBBB {
	function f0() override(I6BB, I6BBBBB)
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I6 is I6B, I6BBBB {
	function f0() override(I6BB, I6BBBB)
	external payable returns (uint);
	function f1() override(I6B, I6BBBB)
	external payable returns (uint);
}
contract C {
	function test() public returns (uint)
	{
			C3 tc0 = new C3();
			if (tc0.f0() != 160099598)
				return 1;
			if (tc0.f1() != 1986052792)
				return 2;
			return 0;
	}
}
