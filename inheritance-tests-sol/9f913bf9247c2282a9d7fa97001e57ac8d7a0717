
pragma solidity >=0.0;











interface I0BBBBBBBB {

	function f0() external payable returns (uint);
}
interface I0BBBBBBB is I0BBBBBBBB {

}




interface I0BBBBBBBBBBBB {

	function f0() external payable returns (uint);
}
interface I0BBBBBBBBBBB is I0BBBBBBBBBBBB {

	function f0() override
	external payable returns (uint);
}
interface I0BBBBBBBBBB is I0BBBBBBBBBBB {

}
interface I0BBBBBBBBB is I0BBBBBBBB, I0BBBBBBBBBB {

	function f0() override(I0BBBBBBBB, I0BBBBBBBBBBB)
	external payable returns (uint);
}

interface I0BBBBBBBBBBBBB is I0BBBBBBBBB {

}

interface I0BBBBBBBBBBBBBB is I0BBBBBBBBBB {

}
interface I0BBBBBB is I0BBBBBBB, I0BBBBBBBBB, I0BBBBBBBBBBBBB, I0BBBBBBBBBBBBBB {

	function f0() override(I0BBBBBBBB, I0BBBBBBBBB, I0BBBBBBBBBBB)
	external payable returns (uint);
	function f1() external view returns (uint);
	function f2() external view returns (uint);
	function f3() external payable returns (uint);
}
interface I0BBBBB is I0BBBBBB {

}




interface I0BBBBBBBBBBBBBBBBBB {

	function f0() external payable returns (uint);
}
interface I0BBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBB {

	function f0() override
	external payable returns (uint);
}
interface I0BBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBB {

}
interface I0BBBBBBBBBBBBBBB is I0BBBBBB, I0BBBBBBBBBBBBBBBB {

	function f0() override(I0BBBBBB, I0BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f2() override
	external view returns (uint);
}

interface I0BBBBBBBBBBBBBBBBBBB is I0BBBBBB {

	function f0() override
	external payable returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
}

interface I0BBBBBBBBBBBBBBBBBBBB is I0BBBBBB {

	function f1() override
	external view returns (uint);
	function f3() override
	external payable returns (uint);
}
interface I0BBBB is I0BBBBB, I0BBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBB {

	function f0() override(I0BBBBBB, I0BBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I0BBBBBB, I0BBBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override(I0BBBBBB, I0BBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f3() override(I0BBBBBB, I0BBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f4() external view returns (uint);
	function f5() external view returns (uint);
	function f6() external view returns (uint);
}
interface I0BBB is I0BBBB {

	function f0() override
	external payable returns (uint);
	function f4() override
	external view returns (uint);
	function f5() override
	external view returns (uint);
}




interface I0BBBBBBBBBBBBBBBBBBBBBBBB {

	function f0() external payable returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBBBBBBBB {

	function f0() override
	external payable returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBBBBBBB {

}
interface I0BBBBBBBBBBBBBBBBBBBBB is I0BBB, I0BBBBBBBBBBBBBBBBBBBBBB {

	function f0() override(I0BBB, I0BBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f2() override
	external view returns (uint);
	function f4() override
	external view returns (uint);
}

interface I0BBBBBBBBBBBBBBBBBBBBBBBBB is I0BBB {

	function f1() override
	external view returns (uint);
	function f5() override
	external view returns (uint);
}

interface I0BBBBBBBBBBBBBBBBBBBBBBBBBB is I0BBB {

	function f1() override
	external view returns (uint);
	function f3() override
	external payable returns (uint);
	function f6() override
	external view returns (uint);
}
interface I0BB is I0BBB, I0BBBBBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBBBBBBB {

	function f0() override(I0BBB, I0BBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I0BBBB, I0BBBBBBBBBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override(I0BBBB, I0BBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f3() override(I0BBBB, I0BBBBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f4() override(I0BBB, I0BBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f5() override(I0BBB, I0BBBBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f6() override(I0BBBB, I0BBBBBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f7() external view returns (uint);
	function f8() external view returns (uint);
	function f9() external payable returns (uint);
}
interface I0B is I0BB {

	function f0() override
	external payable returns (uint);
	function f3() override
	external payable returns (uint);
	function f5() override
	external view returns (uint);
	function f7() override
	external view returns (uint);
	function f9() override
	external payable returns (uint);
}




interface I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBBB {

	function f0() external payable returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBBB {

	function f0() override
	external payable returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBB {

	function f0() override
	external payable returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBBBBBBBBBBB is I0BB, I0BBBBBBBBBBBBBBBBBBBBBBBBBBBB {

	function f0() override(I0BB, I0BBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override
	external payable returns (uint);
	function f5() override
	external view returns (uint);
	function f6() override
	external view returns (uint);
	function f7() override
	external view returns (uint);
	function f8() override
	external view returns (uint);
}

interface I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBBBBBBBBBBB {

	function f0() override
	external payable returns (uint);
	function f1() override
	external view returns (uint);
	function f8() override
	external view returns (uint);
	function f9() override
	external payable returns (uint);
}

interface I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB is I0BB {

	function f0() override
	external payable returns (uint);
	function f7() override
	external view returns (uint);
}
interface I0 is I0B, I0BBBBBBBBBBBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB {

	function f0() override(I0B, I0BBBBBBBBBBBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I0BB, I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override(I0BB, I0BBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f3() override(I0B, I0BBBBBBBBBBBBBBBBBBBBBBBBBBB, I0BB)
	external payable returns (uint);
	function f5() override(I0B, I0BBBBBBBBBBBBBBBBBBBBBBBBBBB, I0BB)
	external view returns (uint);
	function f6() override(I0BB, I0BBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f7() override(I0B, I0BBBBBBBBBBBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f8() override(I0BB, I0BBBBBBBBBBBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f9() override(I0B, I0BB, I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f10() external view returns (uint);
	function f11() external view returns (uint);
	function f12() external view returns (uint);
}
library L1 {

	function f0(uint) external pure returns (uint)
	{
		return 783368690;
	}
}
library L2 {

	function f0(uint) external pure returns (uint)
	{
		return 1102520059;
	}
}


contract C {
	using L1 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 783368690)
			return 1;
		return 0;
	}
}

