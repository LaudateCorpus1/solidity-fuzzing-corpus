
pragma solidity >=0.0;






interface C3BBB {

	function f0() external payable returns (uint);
}
interface C3BB is C3BBB {

	function f0() override
	external payable returns (uint);
}
abstract contract C3B is C3BB {

	function f0() virtual external payable
	override
	returns (uint)
	{
		return 223870541;
	}
}


abstract contract C3BBBBB {

}
contract C3BBBB is C3BB, C3BBBBB {

	function f0() virtual external payable
	override
	returns (uint)
	{
		return 180753275;
	}
}
contract C3 is C3B, C3BBBB {

	function f0() external payable
	override(C3BBBB, C3B)
	returns (uint)
	{
		return 1805831206;
	}
}




interface C4BBB {

	function f0() external payable returns (uint);
}
interface C4BB is C4BBB {

}
contract C4B is C4BB {

	function f0() virtual external payable
	override
	returns (uint)
	{
		return 1640882073;
	}
}
contract C4 is C4B {

}
library L5 {

	function f0(uint) public pure returns (uint)
	{
		return 846930886;
	}
}




interface C6BBB {

	function f0() external payable returns (uint);
}
interface C6BB is C6BBB {

}
interface C6B is C6BB {

}


abstract contract C6BBBBB {

}
contract C6BBBB is C6BB, C6BBBBB {

	function f0() virtual external payable
	override
	returns (uint)
	{
		return 1650497032;
	}
}
contract C6 is C6B, C6BBBB {

	function f0() virtual external payable
	override(C6BBBB, C6BBB)
	returns (uint)
	{
		return 562351922;
	}
}




interface C7BBB {

	function f0() external view returns (uint);
	function f1() external payable returns (uint);
}
interface C7BB is C7BBB {

	function f0() override
	external view returns (uint);
}
interface C7B is C7BB {

}
contract C7 is C7B {

	function f0() virtual external view
	override
	returns (uint)
	{
		return 148120656;
	}
	function f1() external payable
	override
	returns (uint)
	{
		return 318729750;
	}
}
library L8 {

	function f0(uint) public pure returns (uint)
	{
		return 1714636915;
	}
}




interface C9BBB {

	function f0() external payable returns (uint);
}
interface C9BB is C9BBB {

}
contract C9B is C9BB {

	function f0() external payable
	override
	returns (uint)
	{
		return 1932363884;
	}
}
contract C9 is C9B {

}


contract C {
	using L8 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1714636915)
			return 1;
		return 0;
	}
}

