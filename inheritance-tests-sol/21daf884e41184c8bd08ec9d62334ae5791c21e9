pragma solidity >=0.0;
library L0 {
	function f0(uint) public pure returns (uint)
	{
		return 1804289383;
	}
}
interface C2BBBB {
	function f0() external view returns (uint);
}
interface C2BBB is C2BBBB {
}
interface C2BB is C2BBB {
}
interface C2B is C2BB {
}
contract C2 is C2B {
	function f0() virtual external view
	override
	returns (uint)
	{
		return 141111539;
	}
}
library L3 {
	function f0(uint) public pure returns (uint)
	{
		return 1714636915;
	}
}
interface I4BBBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I4BBBBBBBBBBBBBB is I4BBBBBBBBBBBBB {
	function f1() external view returns (uint);
}
interface I4BBBBBBBBBBBB is I4BBBBBBBBBBBBB, I4BBBBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f2() external payable returns (uint);
	function f3() external view returns (uint);
}
interface I4BBBBBBBBBBB is I4BBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
}
interface I4BBBBBBBBBB is I4BBBBBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface I4BBBBBBBBB is I4BBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f4() external payable returns (uint);
}
interface I4BBBBBBBB is I4BBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f4() override
	external payable returns (uint);
}
interface I4BBBBBBBBBBBBBBB is I4BBBBBBBBB {
	function f4() override
	external payable returns (uint);
	function f5() external payable returns (uint);
}
interface I4BBBBBBB is I4BBBBBBBB, I4BBBBBBBBBBBBBBB {
	function f0() override(I4BBBBBBBB, I4BBBBBBBBB)
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override(I4BBBBBBBB, I4BBBBBBBBB)
	external payable returns (uint);
	function f4() override(I4BBBBBBBB, I4BBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f6() external view returns (uint);
	function f7() external pure returns (uint);
	function f8() external payable returns (uint);
	function f9() external payable returns (uint);
}
interface I4BBBBBB is I4BBBBBBB {
	function f4() override
	external payable returns (uint);
	function f6() override
	external view returns (uint);
	function f8() override
	external payable returns (uint);
	function f9() override
	external payable returns (uint);
}
interface I4BBBBB is I4BBBBBB {
	function f1() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f7() override
	external pure returns (uint);
	function f8() override
	external payable returns (uint);
	function f9() override
	external payable returns (uint);
	function f10() external payable returns (uint);
}
interface I4BBBB is I4BBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f4() override
	external payable returns (uint);
	function f6() override
	external view returns (uint);
	function f10() override
	external payable returns (uint);
}
interface I4BBBBBBBBBBBBBBBB is I4BBBB {
	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f8() override
	external payable returns (uint);
	function f11() external payable returns (uint);
}
interface I4BBB is I4BBBB, I4BBBBBBBBBBBBBBBB {
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override(I4BBBBBBBBB, I4BBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f4() override(I4BBBB, I4BBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f5() override
	external payable returns (uint);
	function f7() override
	external pure returns (uint);
	function f8() override(I4BBBBB, I4BBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f12() external view returns (uint);
}
interface I4BB is I4BBB {
	function f0() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override
	external payable returns (uint);
	function f7() override
	external pure returns (uint);
}
interface I4B is I4BB {
	function f1() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f7() override
	external pure returns (uint);
	function f8() override
	external payable returns (uint);
	function f9() override
	external payable returns (uint);
	function f10() override
	external payable returns (uint);
}
interface I4BBBBBBBBBBBBBBBBB is I4B {
	function f0() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() override
	external view returns (uint);
	function f7() override
	external pure returns (uint);
	function f8() override
	external payable returns (uint);
	function f9() override
	external payable returns (uint);
	function f10() override
	external payable returns (uint);
	function f11() override
	external payable returns (uint);
	function f12() override
	external view returns (uint);
	function f13() external payable returns (uint);
}
interface I4 is I4B, I4BBBBBBBBBBBBBBBBB {
	function f0() override(I4BB, I4BBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f4() override(I4B, I4BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f5() override(I4BB, I4BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f6() override(I4BBBB, I4BBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f7() override(I4B, I4BBBBBBBBBBBBBBBBB)
	external pure returns (uint);
	function f8() override(I4B, I4BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f9() override(I4B, I4BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f10() override(I4B, I4BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f11() override(I4BBBBBBBBBBBBBBBB, I4BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f12() override(I4BBB, I4BBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f13() override
	external payable returns (uint);
}
library L5 {
	function f0(uint) public pure returns (uint)
	{
		return 596516649;
	}
	function f1(uint) private pure returns (uint)
	{
		return 1189641421;
	}
	function f2(uint) external view returns (uint)
	{
		return 1025202362;
	}
}
contract C {
	function test() public returns (uint)
	{
			C2 tc0 = new C2();
			if (tc0.f0() != 141111539)
				return 1;
			return 0;
	}
}
