pragma solidity >=0.0;
interface I0BBBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I0BBBBBBBBBBBBBB is I0BBBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
}
interface I0BBBBBBBBBBBB is I0BBBBBBBBBBBBB, I0BBBBBBBBBBBBBB {
	function f0() override(I0BBBBBBBBBBBBB, I0BBBBBBBBBBBBBB)
	external view returns (uint);
	function f2() external payable returns (uint);
	function f3() external view returns (uint);
}
interface I0BBBBBBBBBBB is I0BBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
}
interface I0BBBBBBBBBB is I0BBBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
}
interface I0BBBBBBBBB is I0BBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f4() external payable returns (uint);
}
interface I0BBBBBBBB is I0BBBBBBBBB {
	function f1() override
	external view returns (uint);
}
interface I0BBBBBBBBBBBBBBB is I0BBBBBBBB {
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f5() external payable returns (uint);
}
interface I0BBBBBBB is I0BBBBBBBB, I0BBBBBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override(I0BBBBBBBB, I0BBBBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override(I0BBBBBBBBB, I0BBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f3() override(I0BBBBBBBBBBB, I0BBBBBBBBBBBBBBB)
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() external view returns (uint);
	function f7() external payable returns (uint);
	function f8() external view returns (uint);
	function f9() external payable returns (uint);
}
interface I0BBBBBB is I0BBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() override
	external view returns (uint);
	function f9() override
	external payable returns (uint);
}
interface I0BBBBB is I0BBBBBB {
	function f0() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override
	external payable returns (uint);
	function f7() override
	external payable returns (uint);
	function f8() override
	external view returns (uint);
	function f9() override
	external payable returns (uint);
	function f10() external payable returns (uint);
}
interface I0BBBB is I0BBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f6() override
	external view returns (uint);
}
interface I0BBBBBBBBBBBBBBBB is I0BBBBB {
	function f0() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f6() override
	external view returns (uint);
	function f10() override
	external payable returns (uint);
	function f11() external payable returns (uint);
}
interface I0BBB is I0BBBB, I0BBBBBBBBBBBBBBBB {
	function f0() override(I0BBBB, I0BBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I0BBBB, I0BBBBBB)
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override(I0BBBB, I0BBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f4() override(I0BBBBB, I0BBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f6() override(I0BBBB, I0BBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f7() override
	external payable returns (uint);
	function f9() override
	external payable returns (uint);
	function f10() override(I0BBBBB, I0BBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f11() override
	external payable returns (uint);
	function f12() external view returns (uint);
}
interface I0BB is I0BBB {
	function f0() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f6() override
	external view returns (uint);
	function f7() override
	external payable returns (uint);
	function f8() override
	external view returns (uint);
}
interface I0B is I0BB {
	function f0() override
	external view returns (uint);
	function f7() override
	external payable returns (uint);
	function f8() override
	external view returns (uint);
	function f12() override
	external view returns (uint);
}
interface I0BBBBBBBBBBBBBBBBB is I0BB {
	function f0() override
	external view returns (uint);
	function f6() override
	external view returns (uint);
	function f9() override
	external payable returns (uint);
	function f10() override
	external payable returns (uint);
	function f12() override
	external view returns (uint);
	function f13() external payable returns (uint);
}
interface I0 is I0B, I0BBBBBBBBBBBBBBBBB {
	function f0() override(I0B, I0BBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f4() override
	external payable returns (uint);
	function f6() override(I0BB, I0BBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f7() override(I0B, I0BB)
	external payable returns (uint);
	function f8() override(I0B, I0BB)
	external view returns (uint);
	function f9() override(I0BBB, I0BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f10() override(I0BBB, I0BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f11() override
	external payable returns (uint);
	function f12() override(I0B, I0BBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f13() override
	external payable returns (uint);
}
interface I1B {
	function f0() external view returns (uint);
}
interface I1 is I1B {
}
interface I2BBBBBBBBB {
	function f0() external view returns (uint);
}
interface I2BBBBBBBBBB is I2BBBBBBBBB {
	function f1() external view returns (uint);
}
interface I2BBBBBBBB is I2BBBBBBBBB, I2BBBBBBBBBB {
	function f2() external payable returns (uint);
	function f3() external view returns (uint);
}
interface I2BBBBBBB is I2BBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
}
interface I2BBBBBB is I2BBBBBBB {
}
interface I2BBBBB is I2BBBBBB {
	function f4() external payable returns (uint);
}
interface I2BBBB is I2BBBBB {
	function f0() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
}
interface I2BBBBBBBBBBB is I2BBBBB {
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() external payable returns (uint);
}
interface I2BBB is I2BBBB, I2BBBBBBBBBBB {
	function f0() override(I2BBBB, I2BBBBBBB)
	external view returns (uint);
	function f1() override(I2BBBBBBB, I2BBBBBBBBBBB)
	external view returns (uint);
	function f2() override(I2BBBBBBB, I2BBBBBBBBBBB)
	external payable returns (uint);
	function f3() override(I2BBBB, I2BBBBBBBBBBB)
	external view returns (uint);
	function f4() override(I2BBBB, I2BBBBBBBBBBB)
	external payable returns (uint);
	function f6() external view returns (uint);
	function f7() external payable returns (uint);
	function f8() external view returns (uint);
	function f9() external payable returns (uint);
}
interface I2BB is I2BBB {
	function f5() override
	external payable returns (uint);
	function f7() override
	external payable returns (uint);
	function f8() override
	external view returns (uint);
}
interface I2B is I2BB {
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f9() override
	external payable returns (uint);
}
interface I2BBBBBBBBBBBB is I2B {
	function f0() override
	external view returns (uint);
	function f9() override
	external payable returns (uint);
	function f10() external payable returns (uint);
}
interface I2 is I2B, I2BBBBBBBBBBBB {
	function f0() override(I2BBB, I2BBBBBBBBBBBB)
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f7() override
	external payable returns (uint);
	function f8() override
	external view returns (uint);
	function f9() override(I2B, I2BBBBBBBBBBBB)
	external payable returns (uint);
}
contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}
