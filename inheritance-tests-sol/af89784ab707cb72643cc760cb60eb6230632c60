
pragma solidity >=0.0;






interface C0BBB {

}


interface C0BBBBB {

	function f0() external payable returns (uint);
	function f1() external payable returns (uint);
}
interface C0BBBB is C0BBB, C0BBBBB {

	function f1() override
	external payable returns (uint);
}
interface C0BB is C0BBB, C0BBBB {

}
interface C0B is C0BB {

}



interface C0BBBBBBBB {

}


interface C0BBBBBBBBBB {

	function f0() external payable returns (uint);
	function f1() external payable returns (uint);
}
interface C0BBBBBBBBB is C0BBBBBBBB, C0BBBBBBBBBB {

}
interface C0BBBBBBB is C0BBBBBBBB, C0BBBBBBBBB {

}
interface C0BBBBBB is C0B, C0BBBBBBB {

	function f0() override(C0BBBBB, C0BBBBBBBBBB)
	external payable returns (uint);
	function f1() override(C0BBBB, C0BBBBBBBBBB)
	external payable returns (uint);
}
contract C0 is C0B, C0BBBBBB {

	function f0() external payable
	override(C0BBBBBB, C0BBBBB)
	returns (uint)
	{
		return 2136927794;
	}
	function f1() external payable
	override(C0BBBBBB, C0BBBB)
	returns (uint)
	{
		return 2075782095;
	}
}



interface I1BB {

	function f0() external view returns (uint);
}
interface I1B is I1BB {

	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I1 is I1B {

	function f0() override
	external view returns (uint);
}


contract C {
	function test() public returns (uint)
	{
			C0 tc0 = new C0();
			if (tc0.f0() != 2136927794)
				return 1;
			if (tc0.f1() != 2075782095)
				return 2;
			return 0;
	}
}

