pragma solidity >=0.0;
interface I0BBBB {
	function f0() external payable returns (uint);
}
interface I0BBB is I0BBBB {
}
interface I0BB is I0BBB {
}
interface I0B is I0BB {
	function f0() override
	external payable returns (uint);
}
interface I0BBBBBBBBB {
	function f0() external payable returns (uint);
	function f1() external payable returns (uint);
}
interface I0BBBBBBBB is I0BBBBBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I0BBBBBBB is I0BBBBBBBB {
	function f2() external payable returns (uint);
}
interface I0BBBBBB is I0BBBBBBB {
	function f1() override
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
}
interface I0BBBBB is I0BB, I0BBBBBB {
	function f0() override(I0BBBB, I0BBBBBBBB)
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I0BBBBBBBBBB is I0BBBBB {
	function f1() override
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
}
interface I0BBBBBBBBBBB is I0BBBBBB {
	function f1() override
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
}
interface I0BBBBBBBBBBBB is I0BBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I0BBBBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I0BBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I0BBBBBBBBBBBBB is I0BBBBBB, I0BBBBBBBBBBBBBB {
	function f0() override(I0BBBBBBBB, I0BBBBBBBBBBBBBB)
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBBB {
	function f1() external payable returns (uint);
}
interface I0BBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBB {
}
interface I0BBBBBBBBBBBBBBBB is I0BBBBBB, I0BBBBBBBBBBBBBBBBB {
	function f0() override(I0BBBBBBBB, I0BBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I0BBBBBB, I0BBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBB {
	function f2() override
	external payable returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBB {
	function f1() override
	external payable returns (uint);
}
interface I0 is I0B, I0BBBBB, I0BBBBBBBBBB, I0BBBBBBBBBBB, I0BBBBBBBBBBBB, I0BBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I0B, I0BBBBB, I0BBBBBBBB, I0BBBBBBBBBBBB, I0BBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I0BBBBB, I0BBBBBBBBBB, I0BBBBBBBBBBB, I0BBBBBB, I0BBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f2() override(I0BBBBBB, I0BBBBBBBBBB, I0BBBBBBBBBBB, I0BBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
}
interface I1BBBB {
	function f0() external payable returns (uint);
}
interface I1BBB is I1BBBB {
}
interface I1BB is I1BBB {
	function f0() override
	external payable returns (uint);
}
interface I1B is I1BB {
	function f0() override
	external payable returns (uint);
}
interface I1BBBBBBBBB {
	function f0() external payable returns (uint);
	function f1() external payable returns (uint);
}
interface I1BBBBBBBB is I1BBBBBBBBB {
	function f1() override
	external payable returns (uint);
}
interface I1BBBBBBB is I1BBBBBBBB {
	function f2() external payable returns (uint);
}
interface I1BBBBBB is I1BBBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
}
interface I1BBBBB is I1BB, I1BBBBBB {
	function f0() override(I1BB, I1BBBBBB)
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
}
interface I1BBBBBBBBBB is I1BBBBB {
	function f1() override
	external payable returns (uint);
}
interface I1BBBBBBBBBBB is I1BB {
	function f0() override
	external payable returns (uint);
}
interface I1BBBBBBBBBBBB is I1BBBBB {
	function f2() override
	external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I1BBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I1BBBBBBBBBBBBB is I1BBBBB, I1BBBBBBBBBBBBBB {
	function f0() override(I1BBBBB, I1BBBBBBBBBBBBBB)
	external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBBBBBB {
}
interface I1BBBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBBBBB {
	function f1() external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBB {
	function f0() override(I1BBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBBB is I1B {
}
interface I1BBBBBBBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBB {
	function f1() override
	external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBBBBBBB is I1B {
	function f0() override
	external payable returns (uint);
}
interface I1 is I1B, I1BBBBB, I1BBBBBBBBBB, I1BBBBBBBBBBB, I1BBBBBBBBBBBB, I1BBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I1B, I1BBBBB, I1BBBBBBBBBBB, I1BBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I1BBBBBB, I1BBBBBBBBBB, I1BBBBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f2() override(I1BBBBB, I1BBBBBBBBBBBB)
	external payable returns (uint);
}
library L2 {
	function f0(uint) internal view returns (uint)
	{
		return 304089172;
	}
	function f1(uint) internal pure returns (uint)
	{
		return 1303455736;
	}
	function f2(uint) internal view returns (uint)
	{
		return 35005211;
	}
	function f3(uint) public pure returns (uint)
	{
		return 521595368;
	}
}
interface I3BB {
	function f0() external payable returns (uint);
}
interface I3B is I3BB {
	function f0() override
	external payable returns (uint);
}
interface I3 is I3B {
	function f0() override
	external payable returns (uint);
}
library L4 {
	function f0(uint) public pure returns (uint)
	{
		return 294702567;
	}
	function f1(uint) internal view returns (uint)
	{
		return 1726956429;
	}
}
library L5 {
	function f0(uint) internal pure returns (uint)
	{
		return 336465782;
	}
}
interface I6BBB {
	function f0() external view returns (uint);
}
interface I6BB is I6BBB {
	function f0() override
	external view returns (uint);
	function f1() external pure returns (uint);
}
interface I6B is I6BB {
	function f1() override
	external pure returns (uint);
}
interface I6 is I6B {
	function f0() override
	external view returns (uint);
	function f1() override
	external pure returns (uint);
}
contract C7B {
	function f0() virtual public pure
	
	returns (uint)
	{
		return 1787442613;
	}
}
contract C7 is C7B {
}
contract C {
	using L4 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 294702567)
			return 1;
		return 0;
	}
}
