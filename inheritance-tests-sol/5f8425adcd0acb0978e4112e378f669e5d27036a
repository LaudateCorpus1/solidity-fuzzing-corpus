
pragma solidity >=0.0;





abstract contract C2BB {

}
contract C2B is C2BB {

}
contract C2 is C2B {

	function f0() public payable
	
	returns (uint)
	{
		return 1291394886;
	}
}




interface C3BBB {

	function f0() external payable returns (uint);
}
interface C3BB is C3BBB {

}
interface C3B is C3BB {

}
contract C3 is C3B {

	function f0() external payable
	override
	returns (uint)
	{
		return 564586691;
	}
}
library L5 {

	function f0(uint) internal pure returns (uint)
	{
		return 846930886;
	}
	function f1(uint) public view returns (uint)
	{
		return 1681692777;
	}
}




interface C6BBB {

	function f0() external payable returns (uint);
}
interface C6BB is C6BBB {

}
contract C6B is C6BB {

	function f0() external payable
	override
	returns (uint)
	{
		return 1098894339;
	}
}
contract C6 is C6B {

}
library L7 {

	function f0(uint) public pure returns (uint)
	{
		return 1714636915;
	}
}
library L11 {

	function f0(uint) private view returns (uint)
	{
		return 719885386;
	}
}
library L12 {

	function f0(uint) private pure returns (uint)
	{
		return 1649760492;
	}
}


interface I14B {

	function f0() external view returns (uint);
}



interface I14BBBB {

	function f0() external view returns (uint);
}
interface I14BBB is I14BBBB {

	function f0() override
	external view returns (uint);
}
interface I14BB is I14B, I14BBB {

	function f0() override(I14B, I14BBB)
	external view returns (uint);
}
interface I14 is I14B, I14BB {

	function f0() override(I14B, I14BB)
	external view returns (uint);
	function f1() external view returns (uint);
}
library L15 {

	function f0(uint) external pure returns (uint)
	{
		return 1189641421;
	}
}

interface I17 {

	function f0() external view returns (uint);
}
library L18 {

	function f0(uint) internal pure returns (uint)
	{
		return 783368690;
	}
}


contract C {
	using L5 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f1() != 1681692777)
			return 1;
		return 0;
	}
}

