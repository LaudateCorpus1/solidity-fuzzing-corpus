
pragma solidity >=0.0;







interface C0BBBB {

	function f0() external payable returns (uint);
}
interface C0BBB is C0BBBB {

	function f0() override
	external payable returns (uint);
}
interface C0BB is C0BBB {

	function f1() external payable returns (uint);
}
interface C0B is C0BB {

	function f1() override
	external payable returns (uint);
}
contract C0 is C0B {

	function f0() external payable
	override
	returns (uint)
	{
		return 317172907;
	}
	function f1() virtual external payable
	override
	returns (uint)
	{
		return 180753275;
	}
}






interface C1BBBBB {

	function f0() external view returns (uint);
	function f1() external pure returns (uint);
}
interface C1BBBB is C1BBBBB {

}

interface C1BBBBBB is C1BBBBB {

	function f1() override
	external pure returns (uint);
	function f2() external payable returns (uint);
}
interface C1BBB is C1BBBB, C1BBBBBB {

	function f1() override(C1BBBBB, C1BBBBBB)
	external pure returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() external view returns (uint);
	function f4() external view returns (uint);
}
interface C1BB is C1BBB {

	function f4() override
	external view returns (uint);
}

interface C1BBBBBBB is C1BB {

	function f0() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external view returns (uint);
	function f5() external view returns (uint);
}
interface C1B is C1BB, C1BBBBBBB {

	function f0() override(C1BBBBB, C1BBBBBBB)
	external view returns (uint);
	function f2() override(C1BBB, C1BBBBBBB)
	external payable returns (uint);
	function f3() override(C1BBB, C1BBBBBBB)
	external view returns (uint);
	function f4() override(C1BB, C1BBBBBBB)
	external view returns (uint);
}
contract C1 is C1B {

	function f0() external view
	override
	returns (uint)
	{
		return 1082575774;
	}
	function f1() virtual external pure
	override
	returns (uint)
	{
		return 959124913;
	}
	function f2() virtual external payable
	override
	returns (uint)
	{
		return 830915142;
	}
	function f3() external view
	override
	returns (uint)
	{
		return 1191143145;
	}
	function f4() external view
	override
	returns (uint)
	{
		return 1932363884;
	}
	function f5() external view
	override
	returns (uint)
	{
		return 1488084345;
	}
}









interface C3BBBBBBBB {

	function f0() external view returns (uint);
	function f1() external pure returns (uint);
}
interface C3BBBBBBB is C3BBBBBBBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external pure returns (uint);
}
interface C3BBBBBB is C3BBBBBBB {

	function f0() override
	external view returns (uint);
	function f2() external view returns (uint);
	function f3() external payable returns (uint);
}
interface C3BBBBB is C3BBBBBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external pure returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override
	external payable returns (uint);
}

interface C3BBBBBBBBB is C3BBBBBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external pure returns (uint);
	function f4() external view returns (uint);
}
interface C3BBBB is C3BBBBB, C3BBBBBBBBB {

	function f0() override(C3BBBBB, C3BBBBBBBBB)
	external view returns (uint);
	function f1() override(C3BBBBB, C3BBBBBBBBB)
	external pure returns (uint);
	function f2() override(C3BBBBB, C3BBBBBB)
	external view returns (uint);
	function f3() override(C3BBBBB, C3BBBBBB)
	external payable returns (uint);
	function f4() override
	external view returns (uint);
}
abstract contract C3BBB is C3BBBB {

	function f0() virtual external view
	override
	returns (uint);
	function f1() virtual external pure
	override
	returns (uint);
	function f2() virtual external view
	override
	returns (uint)
	{
		return 2082997658;
	}
	function f3() virtual external payable
	override
	returns (uint);
	function f4() virtual external view
	override
	returns (uint);
}
contract C3BB is C3BBB {

	function f0() virtual external view
	override
	returns (uint)
	{
		return 1947208556;
	}
	function f1() external pure
	override
	returns (uint)
	{
		return 1094862400;
	}
	function f2() external view
	override
	returns (uint)
	{
		return 1512002068;
	}
	function f3() virtual external payable
	override
	returns (uint)
	{
		return 2044531006;
	}
	function f4() virtual external view
	override
	returns (uint)
	{
		return 1696468498;
	}
}
contract C3B is C3BB {

	function f4() external view
	override
	returns (uint)
	{
		return 635687000;
	}
}
contract C3 is C3B {

	function f0() external view
	override
	returns (uint)
	{
		return 1911622041;
	}
	function f3() external payable
	override
	returns (uint)
	{
		return 1583875908;
	}
}


contract C {
	function test() public returns (uint)
	{
			C0 tc0 = new C0();
			if (tc0.f0() != 317172907)
				return 1;
			if (tc0.f1() != 180753275)
				return 2;
			C1 tc1 = new C1();
			if (tc1.f0() != 1082575774)
				return 3;
			if (tc1.f1() != 959124913)
				return 4;
			if (tc1.f2() != 830915142)
				return 5;
			if (tc1.f3() != 1191143145)
				return 6;
			if (tc1.f4() != 1932363884)
				return 7;
			if (tc1.f5() != 1488084345)
				return 8;
			C3 tc2 = new C3();
			if (tc2.f0() != 1911622041)
				return 9;
			if (tc2.f1() != 1094862400)
				return 10;
			if (tc2.f2() != 1512002068)
				return 11;
			if (tc2.f3() != 1583875908)
				return 12;
			if (tc2.f4() != 635687000)
				return 13;
			C3B tc3 = new C3B();
			if (tc3.f0() != 1947208556)
				return 14;
			if (tc3.f1() != 1094862400)
				return 15;
			if (tc3.f2() != 1512002068)
				return 16;
			if (tc3.f3() != 2044531006)
				return 17;
			if (tc3.f4() != 635687000)
				return 18;
			C3BB tc4 = new C3BB();
			if (tc4.f0() != 1947208556)
				return 19;
			if (tc4.f1() != 1094862400)
				return 20;
			if (tc4.f2() != 1512002068)
				return 21;
			if (tc4.f3() != 2044531006)
				return 22;
			if (tc4.f4() != 1696468498)
				return 23;
			return 0;
	}
}

