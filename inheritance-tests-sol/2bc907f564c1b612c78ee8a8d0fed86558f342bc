
pragma solidity >=0.0;


library L0 {

	function f0(uint) public pure returns (uint)
	{
		return 1804289383;
	}
	function f1(uint) public view returns (uint)
	{
		return 846930886;
	}
}


interface I1B {

}




interface I1BBBBB {

	function f0() external view returns (uint);
}
interface I1BBBB is I1BBBBB {

	function f0() override
	external view returns (uint);
}
interface I1BBB is I1BBBB {

}
interface I1BB is I1B, I1BBB {

}



interface I1BBBBBBBB {

	function f0() external view returns (uint);
}
interface I1BBBBBBB is I1BBBBBBBB {

}
interface I1BBBBBB is I1BB, I1BBBBBBB {

	function f0() override(I1BBBB, I1BBBBBBBB)
	external view returns (uint);
}

interface I1BBBBBBBBB is I1BBBBBB {

	function f1() external view returns (uint);
}

interface I1BBBBBBBBBB is I1BBBBBB {

	function f1() external view returns (uint);
}



interface I1BBBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I1BBBBBBBBBBBB is I1BBBBBBBBBBBBB {

	function f1() external view returns (uint);
	function f2() external payable returns (uint);
}


interface I1BBBBBBBBBBBBBBB {

}
interface I1BBBBBBBBBBBBBB is I1BBBBBBBBBBBB, I1BBBBBBBBBBBBBBB {

	function f1() override
	external view returns (uint);
	function f3() external view returns (uint);
}
interface I1BBBBBBBBBBB is I1BB, I1BBBBBBBBBBBB, I1BBBBBBBBBBBBBB {

	function f0() override(I1BBBB, I1BBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I1BBBBBBBBBBBB, I1BBBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override
	external payable returns (uint);
}




interface I1BBBBBBBBBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBBBBB {

}
interface I1BBBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I1BBBBBBBBBBBBBBBB is I1BBBBBB, I1BBBBBBBBBBBBBBBBB {

	function f0() override(I1BBBBBB, I1BBBBBBBBBBBBBBBBB)
	external view returns (uint);
}
interface I1 is I1B, I1BB, I1BBBBBB, I1BBBBBBBBB, I1BBBBBBBBBB, I1BBBBBBBBBBB, I1BBBBBBBBBBBBBBBB {

	function f0() override(I1BBBB, I1BBBBBB, I1BBBBBBBBBBB, I1BBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I1BBBBBBBBB, I1BBBBBBBBBB, I1BBBBBBBBBBB)
	external view returns (uint);
	function f4() external view returns (uint);
	function f5() external view returns (uint);
	function f6() external payable returns (uint);
}


interface I2B {

}



interface I2BBBB {

	function f0() external view returns (uint);
}
interface I2BBB is I2BBBB {

	function f1() external pure returns (uint);
}
interface I2BB is I2B, I2BBB {

	function f1() override
	external pure returns (uint);
}
interface I2 is I2B, I2BB {

	function f1() override
	external pure returns (uint);
	function f2() external view returns (uint);
}




interface I3BBB {

	function f0() external view returns (uint);
}
interface I3BB is I3BBB {

}
interface I3B is I3BB {

}




interface I3BBBBBBB {

	function f0() external view returns (uint);
}
interface I3BBBBBB is I3BBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I3BBBBB is I3BBBBBB {

}
interface I3BBBB is I3B, I3BBBBB {

	function f0() override(I3BBB, I3BBBBBB)
	external view returns (uint);
}

interface I3BBBBBBBB is I3BBBBB {

	function f1() external view returns (uint);
}




interface I3BBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I3BBBBBBBBBBB is I3BBBBBBBBBBBB {

}
interface I3BBBBBBBBBB is I3BBBBBBBBBBB {

}
interface I3BBBBBBBBB is I3BBBB, I3BBBBBBBBBB {

	function f0() override(I3BBBB, I3BBBBBBBBBBBB)
	external view returns (uint);
}
interface I3 is I3B, I3BBBB, I3BBBBBBBB, I3BBBBBBBBB {

	function f0() override(I3BBB, I3BBBB, I3BBBBBB, I3BBBBBBBBB)
	external view returns (uint);
}





interface I4BBBB {

	function f0() external view returns (uint);
}
interface I4BBB is I4BBBB {

	function f0() override
	external view returns (uint);
}
interface I4BB is I4BBB {

	function f0() override
	external view returns (uint);
}
interface I4B is I4BB {

}

interface I4BBBBB is I4BB {

	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
}

interface I4BBBBBB is I4BB {

	function f1() external view returns (uint);
}

interface I4BBBBBBB is I4BBBBBB {

	function f0() override
	external view returns (uint);
}




interface I4BBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I4BBBBBBBBBB is I4BBBBBBBBBBB {

}
interface I4BBBBBBBBB is I4BBBBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I4BBBBBBBB is I4BBBBBB, I4BBBBBBBBB {

	function f0() override(I4BB, I4BBBBBBBBB)
	external view returns (uint);
	function f1() override
	external view returns (uint);
}



interface I4BBBBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I4BBBBBBBBBBBBB is I4BBBBBBBBBBBBBB {

}
interface I4BBBBBBBBBBBB is I4BBBBBBB, I4BBBBBBBBBBBBB {

	function f0() override(I4BBBBBBB, I4BBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external view returns (uint);
}
interface I4 is I4B, I4BBBBB, I4BBBBBB, I4BBBBBBB, I4BBBBBBBB, I4BBBBBBBBBBBB {

	function f0() override(I4BB, I4BBBBB, I4BBBBBBB, I4BBBBBBBB, I4BBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I4BBBBB, I4BBBBBB, I4BBBBBBBB, I4BBBBBBBBBBBB)
	external view returns (uint);
	function f2() external view returns (uint);
}


contract C5B {

}

contract C5BB is C5B {

}

contract C5BBB is C5BB {

	function f0() public view
	
	returns (uint)
	{
		return 409875951;
	}
	function f1() private pure
	
	returns (uint)
	{
		return 355190910;
	}
}
abstract contract C5 is C5B, C5BB, C5BBB {

}


contract C {
	using L0 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f1() != 846930886)
			return 1;
		return 0;
	}
}

