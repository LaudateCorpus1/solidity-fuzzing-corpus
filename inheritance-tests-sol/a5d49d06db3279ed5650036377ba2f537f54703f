
pragma solidity >=0.0;






contract C0BBB {

	function f0() external pure
	
	returns (uint)
	{
		return 1073765959;
	}
}
contract C0BB is C0BBB {

}
contract C0B is C0BB {

}
contract C0 is C0B {

}





interface I1BBBB {

	function f0() external payable returns (uint);
}
interface I1BBB is I1BBBB {

	function f0() override
	external payable returns (uint);
}
interface I1BB is I1BBB {

}
interface I1B is I1BB {

	function f0() override
	external payable returns (uint);
}
interface I1 is I1B {

	function f1() external payable returns (uint);
	function f2() external payable returns (uint);
	function f3() external view returns (uint);
}

interface I2 {

	function f0() external view returns (uint);
	function f1() external payable returns (uint);
	function f2() external view returns (uint);
}






interface C3BBBBB {

}
interface C3BBBB is C3BBBBB {

}
interface C3BBB is C3BBBB {

	function f0() external view returns (uint);
}
interface C3BB is C3BBB {

}
interface C3B is C3BB {

	function f0() override
	external view returns (uint);
}
contract C3 is C3B {

	function f0() virtual external view
	override
	returns (uint)
	{
		return 1068463897;
	}
}
library L4 {

	function f0(uint) internal view returns (uint)
	{
		return 1804289383;
	}
	function f1(uint) public view returns (uint)
	{
		return 846930886;
	}
}


interface I5B {

	function f0() external view returns (uint);
	function f1() external view returns (uint);
}
interface I5 is I5B {

	function f1() override
	external view returns (uint);
}


interface I6B {

	function f0() external view returns (uint);
	function f1() external view returns (uint);
}
interface I6 is I6B {

	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
}





interface I7BBBB {

	function f0() external payable returns (uint);
}
interface I7BBB is I7BBBB {

}
interface I7BB is I7BBB {

	function f0() override
	external payable returns (uint);
}
interface I7B is I7BB {

	function f0() override
	external payable returns (uint);
}
interface I7 is I7B {

	function f1() external payable returns (uint);
	function f2() external payable returns (uint);
	function f3() external view returns (uint);
}





interface I8BBBB {

	function f0() external payable returns (uint);
}
interface I8BBB is I8BBBB {

	function f0() override
	external payable returns (uint);
}
interface I8BB is I8BBB {

}
interface I8B is I8BB {

	function f0() override
	external payable returns (uint);
}

interface I8BBBBB is I8BB {

	function f0() override
	external payable returns (uint);
	function f1() external view returns (uint);
}
interface I8 is I8B, I8BBBBB {

	function f0() override(I8B, I8BBBBB)
	external payable returns (uint);
	function f2() external view returns (uint);
	function f3() external payable returns (uint);
}





interface I9BBBB {

	function f0() external payable returns (uint);
}
interface I9BBB is I9BBBB {

	function f0() override
	external payable returns (uint);
}
interface I9BB is I9BBB {

}
interface I9B is I9BB {

	function f0() override
	external payable returns (uint);
}
interface I9 is I9B {

	function f1() external payable returns (uint);
	function f2() external payable returns (uint);
	function f3() external view returns (uint);
}

interface I10 {

	function f0() external payable returns (uint);
	function f1() external payable returns (uint);
	function f2() external view returns (uint);
	function f3() external view returns (uint);
	function f4() external payable returns (uint);
	function f5() external payable returns (uint);
}


contract C {
	function test() public returns (uint)
	{
			C0 tc0 = new C0();
			if (tc0.f0() != 1073765959)
				return 1;
			C0B tc1 = new C0B();
			if (tc1.f0() != 1073765959)
				return 2;
			C0BB tc2 = new C0BB();
			if (tc2.f0() != 1073765959)
				return 3;
			C0BBB tc3 = new C0BBB();
			if (tc3.f0() != 1073765959)
				return 4;
			C3 tc4 = new C3();
			if (tc4.f0() != 1068463897)
				return 5;
			return 0;
	}
}

