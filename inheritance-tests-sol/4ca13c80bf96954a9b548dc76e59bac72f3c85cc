pragma solidity >=0.0;
library L0 {
	function f0(uint) internal pure returns (uint)
	{
		return 1804289383;
	}
}
interface C1B {
	function f0() external view returns (uint);
}
contract C1 is C1B {
	function f0() virtual external view
	override
	returns (uint)
	{
		return 803070398;
	}
}
library L2 {
	function f0(uint) private pure returns (uint)
	{
		return 846930886;
	}
	function f1(uint) external pure returns (uint)
	{
		return 1681692777;
	}
}
contract C3 {
	function f0() public view
	
	returns (uint)
	{
		return 1667683838;
	}
}
interface I4BBBBBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I4BBBBBBBBBBBBBBBB is I4BBBBBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
}
interface I4BBBBBBBBBBBBBB is I4BBBBBBBBBBBBBBB, I4BBBBBBBBBBBBBBBB {
	function f0() override(I4BBBBBBBBBBBBBBB, I4BBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() external payable returns (uint);
	function f3() external view returns (uint);
}
interface I4BBBBBBBBBBBBB is I4BBBBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
}
interface I4BBBBBBBBBBBB is I4BBBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
}
interface I4BBBBBBBBBBB is I4BBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f4() external payable returns (uint);
}
interface I4BBBBBBBBBB is I4BBBBBBBBBBB {
	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
}
interface I4BBBBBBBBB is I4BBBBBBBBBB {
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() external view returns (uint);
	function f6() external payable returns (uint);
	function f7() external view returns (uint);
	function f8() external payable returns (uint);
}
interface I4BBBBBBBB is I4BBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f5() override
	external view returns (uint);
	function f6() override
	external payable returns (uint);
}
interface I4BBBBBBB is I4BBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f5() override
	external view returns (uint);
	function f6() override
	external payable returns (uint);
	function f8() override
	external payable returns (uint);
	function f9() external view returns (uint);
	function f10() external payable returns (uint);
	function f11() external view returns (uint);
	function f12() external payable returns (uint);
}
interface I4BBBBBB is I4BBBBBBB {
	function f0() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f5() override
	external view returns (uint);
	function f8() override
	external payable returns (uint);
}
interface I4BBBBB is I4BBBBBB {
	function f0() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f6() override
	external payable returns (uint);
	function f10() override
	external payable returns (uint);
	function f11() override
	external view returns (uint);
	function f12() override
	external payable returns (uint);
	function f13() external view returns (uint);
}
interface I4BBBB is I4BBBBB {
	function f0() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f5() override
	external view returns (uint);
	function f8() override
	external payable returns (uint);
	function f11() override
	external view returns (uint);
	function f12() override
	external payable returns (uint);
	function f13() override
	external view returns (uint);
}
interface I4BBBBBBBBBBBBBBBBB is I4BBBBB {
	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f11() override
	external view returns (uint);
	function f12() override
	external payable returns (uint);
	function f14() external payable returns (uint);
}
interface I4BBB is I4BBBB, I4BBBBBBBBBBBBBBBBB {
	function f0() override(I4BBBB, I4BBBBB)
	external view returns (uint);
	function f2() override(I4BBBB, I4BBBBBB)
	external payable returns (uint);
	function f3() override(I4BBBB, I4BBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f4() override(I4BBBBB, I4BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f5() override(I4BBBB, I4BBBBBB)
	external view returns (uint);
	function f6() override
	external payable returns (uint);
	function f8() override(I4BBBB, I4BBBBBB)
	external payable returns (uint);
	function f9() override
	external view returns (uint);
	function f11() override(I4BBBB, I4BBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f12() override(I4BBBB, I4BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f13() override(I4BBBB, I4BBBBB)
	external view returns (uint);
	function f15() external view returns (uint);
	function f16() external view returns (uint);
	function f17() external view returns (uint);
}
interface I4BB is I4BBB {
	function f2() override
	external payable returns (uint);
	function f5() override
	external view returns (uint);
	function f6() override
	external payable returns (uint);
	function f8() override
	external payable returns (uint);
	function f9() override
	external view returns (uint);
	function f11() override
	external view returns (uint);
	function f13() override
	external view returns (uint);
	function f15() override
	external view returns (uint);
	function f16() override
	external view returns (uint);
}
interface I4B is I4BB {
	function f0() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override
	external view returns (uint);
	function f6() override
	external payable returns (uint);
	function f8() override
	external payable returns (uint);
	function f13() override
	external view returns (uint);
}
interface I4BBBBBBBBBBBBBBBBBB is I4BB {
	function f0() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f7() override
	external view returns (uint);
	function f8() override
	external payable returns (uint);
	function f9() override
	external view returns (uint);
	function f10() override
	external payable returns (uint);
	function f13() override
	external view returns (uint);
	function f18() external payable returns (uint);
}
interface I4 is I4B, I4BBBBBBBBBBBBBBBBBB {
	function f0() override(I4B, I4BBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f3() override(I4B, I4BBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f4() override(I4B, I4BBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f5() override(I4B, I4BB)
	external view returns (uint);
	function f6() override(I4B, I4BB)
	external payable returns (uint);
	function f7() override(I4BBBBBBBBB, I4BBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f8() override(I4B, I4BBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f9() override(I4BB, I4BBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f10() override(I4BBBBB, I4BBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f11() override
	external view returns (uint);
	function f12() override
	external payable returns (uint);
	function f13() override(I4B, I4BBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f15() override
	external view returns (uint);
	function f17() override
	external view returns (uint);
	function f18() override
	external payable returns (uint);
}
library L5 {
	function f0(uint) external pure returns (uint)
	{
		return 719885386;
	}
}
contract C {
	using L2 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f1() != 1681692777)
			return 1;
		return 0;
	}
}
