pragma solidity >=0.0;
interface I0BBB {
	function f0() external view returns (uint);
}
interface I0BB is I0BBB {
	function f1() external payable returns (uint);
}
interface I0B is I0BB {
	function f0() override
	external view returns (uint);
}
interface I0BBBBBB {
	function f0() external view returns (uint);
}
interface I0BBBBBBBBBB {
}
interface I0BBBBBBBBB is I0BBBBBBBBBB {
}
interface I0BBBBBBBB is I0BBBBBBBBB {
}
interface I0BBBBBBB is I0BBBBBB, I0BBBBBBBB {
}
interface I0BBBBB is I0BBBBBB, I0BBBBBBB {
}
interface I0BBBB is I0BB, I0BBBBB {
	function f0() override(I0BBB, I0BBBBBB)
	external view returns (uint);
	function f2() external payable returns (uint);
}
interface I0BBBBBBBBBBBB {
}
interface I0BBBBBBBBBBB is I0BB, I0BBBBBBBBBBBB {
}
interface I0 is I0B, I0BBBB, I0BBBBBBBBBBB {
	function f0() override(I0B, I0BBBB, I0BBB)
	external view returns (uint);
	function f2() override
	external payable returns (uint);
}
interface I1BBBBB {
	function f0() external view returns (uint);
}
interface I1BBBB is I1BBBBB {
}
interface I1BBB is I1BBBB {
	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I1BB is I1BBB {
	function f0() override
	external view returns (uint);
}
interface I1B is I1BB {
	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I1 is I1B {
}
library L2 {
	function f0(uint) external pure returns (uint)
	{
		return 1714636915;
	}
}
contract C {
	using L2 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1714636915)
			return 1;
		return 0;
	}
}
