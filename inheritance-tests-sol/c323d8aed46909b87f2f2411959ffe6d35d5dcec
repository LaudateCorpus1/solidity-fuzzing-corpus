
pragma solidity >=0.0;


library L0 {

	function f0(uint) internal pure returns (uint)
	{
		return 1804289383;
	}
	function f1(uint) public pure returns (uint)
	{
		return 846930886;
	}
	function f2(uint) external pure returns (uint)
	{
		return 1681692777;
	}
}

interface I1 {

	function f0() external payable returns (uint);
}





interface C2BBBB {

	function f0() external payable returns (uint);
}
interface C2BBB is C2BBBB {

	function f0() override
	external payable returns (uint);
}
interface C2BB is C2BBB {

}
interface C2B is C2BB {

	function f1() external view returns (uint);
}
contract C2 is C2B {

	function f0() external payable
	override
	returns (uint)
	{
		return 564586691;
	}
	function f1() external view
	override
	returns (uint)
	{
		return 192302371;
	}
}










interface I3BBBBBBBBB {

	function f0() external view returns (uint);
}

interface I3BBBBBBBBBB is I3BBBBBBBBB {

	function f1() external view returns (uint);
}
interface I3BBBBBBBB is I3BBBBBBBBB, I3BBBBBBBBBB {

	function f2() external payable returns (uint);
	function f3() external view returns (uint);
}
interface I3BBBBBBB is I3BBBBBBBB {

	function f1() override
	external view returns (uint);
}
interface I3BBBBBB is I3BBBBBBB {

	function f1() override
	external view returns (uint);
}
interface I3BBBBB is I3BBBBBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f4() external payable returns (uint);
}
interface I3BBBB is I3BBBBB {

	function f0() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
}











interface I3BBBBBBBBBBBBBBBBBBBBB {

	function f0() external view returns (uint);
}

interface I3BBBBBBBBBBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBBBBBBBB {

	function f1() external view returns (uint);
}
interface I3BBBBBBBBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBBBBBBBB, I3BBBBBBBBBBBBBBBBBBBBBB {

	function f1() override
	external view returns (uint);
	function f2() external payable returns (uint);
	function f3() external view returns (uint);
}
interface I3BBBBBBBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBBBBBBB {

	function f2() override
	external payable returns (uint);
}
interface I3BBBBBBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
}
interface I3BBBBBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBBBBB {

	function f2() override
	external payable returns (uint);
	function f4() external payable returns (uint);
}
interface I3BBBBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBBBB {

	function f3() override
	external view returns (uint);
}





interface I3BBBBBBBBBBBBBBBBBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I3BBBBBBBBBBBBBBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBBBBBBBBBBBBBB {

}
interface I3BBBBBBBBBBBBBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBBBBBBBBBBBBB {

}
interface I3BBBBBBBBBBBBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBBBBBBBBBBBB {

}
interface I3BBBBBBBBBBBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBBB, I3BBBBBBBBBBBBBBBBBBBBBBBB {

	function f0() override(I3BBBBBBBBBBBBBBBBBB, I3BBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() external payable returns (uint);
}
interface I3BBBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBBB, I3BBBBBBBBBBBBBBBBBBBBBBB {

	function f0() override(I3BBBBBBBBBBBBBBBBBB, I3BBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I3BBBBBBBBBBBBBBBBBBBB, I3BBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override(I3BBBBBBBBBBBBBBBBB, I3BBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f3() override(I3BBBBBBBBBBBBBBBB, I3BBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f4() override(I3BBBBBBBBBBBBBBBBB, I3BBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f6() external payable returns (uint);
	function f7() external payable returns (uint);
	function f8() external view returns (uint);
	function f9() external payable returns (uint);
}
interface I3BBBBBBBBBBBBBB is I3BBBBBBBBBBBBBBB {

	function f1() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f7() override
	external payable returns (uint);
	function f8() override
	external view returns (uint);
	function f9() override
	external payable returns (uint);
}
interface I3BBBBBBBBBBBBB is I3BBBBBBBBBBBBBB {

	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() override
	external payable returns (uint);
	function f7() override
	external payable returns (uint);
}
interface I3BBBBBBBBBBBB is I3BBBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f7() override
	external payable returns (uint);
	function f8() override
	external view returns (uint);
}
interface I3BBBBBBBBBBB is I3BBBBB, I3BBBBBBBBBBBB {

	function f0() override(I3BBBBB, I3BBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I3BBBBB, I3BBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override(I3BBBBBBBB, I3BBBBBBBBBBBBB)
	external payable returns (uint);
	function f3() override(I3BBBBBBBB, I3BBBBBBBBBBBBBB)
	external view returns (uint);
	function f4() override(I3BBBBB, I3BBBBBBBBBBBBB)
	external payable returns (uint);
	function f10() external payable returns (uint);
}
interface I3BBB is I3BBBB, I3BBBBBBBBBBB {

	function f0() override(I3BBBB, I3BBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I3BBBBB, I3BBBBBBBBBBB)
	external view returns (uint);
	function f2() override(I3BBBB, I3BBBBBBBBBBB)
	external payable returns (uint);
	function f3() override(I3BBBB, I3BBBBBBBBBBB)
	external view returns (uint);
	function f4() override(I3BBBBB, I3BBBBBBBBBBB)
	external payable returns (uint);
	function f5() override
	external payable returns (uint);
	function f8() override
	external view returns (uint);
	function f10() override
	external payable returns (uint);
	function f11() external payable returns (uint);
	function f12() external payable returns (uint);
	function f13() external view returns (uint);
	function f14() external payable returns (uint);
}
interface I3BB is I3BBB {

	function f0() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() override
	external payable returns (uint);
	function f7() override
	external payable returns (uint);
	function f8() override
	external view returns (uint);
	function f11() override
	external payable returns (uint);
	function f12() override
	external payable returns (uint);
	function f13() override
	external view returns (uint);
	function f14() override
	external payable returns (uint);
}
interface I3B is I3BB {

	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() override
	external payable returns (uint);
	function f7() override
	external payable returns (uint);
	function f8() override
	external view returns (uint);
	function f9() override
	external payable returns (uint);
	function f11() override
	external payable returns (uint);
	function f12() override
	external payable returns (uint);
	function f13() override
	external view returns (uint);
	function f14() override
	external payable returns (uint);
}

interface I3BBBBBBBBBBBBBBBBBBBBBBBBBBBB is I3B {

	function f1() override
	external view returns (uint);
	function f8() override
	external view returns (uint);
	function f9() override
	external payable returns (uint);
	function f12() override
	external payable returns (uint);
	function f15() external payable returns (uint);
}

interface I3BBBBBBBBBBBBBBBBBBBBBBBBBBBBB is I3BB {

	function f2() override
	external payable returns (uint);
	function f4() override
	external payable returns (uint);
	function f13() override
	external view returns (uint);
	function f15() external payable returns (uint);
}
interface I3 is I3B, I3BBBBBBBBBBBBBBBBBBBBBBBBBBBB, I3BBBBBBBBBBBBBBBBBBBBBBBBBBBBB {

	function f0() override(I3B, I3BB)
	external view returns (uint);
	function f1() override(I3B, I3BBBBBBBBBBBBBBBBBBBBBBBBBBBB, I3BBB)
	external view returns (uint);
	function f2() override(I3BB, I3BBBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f4() override(I3BBB, I3BBBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f5() override(I3B, I3BB)
	external payable returns (uint);
	function f6() override(I3B, I3BB)
	external payable returns (uint);
	function f7() override(I3B, I3BB)
	external payable returns (uint);
	function f8() override(I3B, I3BBBBBBBBBBBBBBBBBBBBBBBBBBBB, I3BB)
	external view returns (uint);
	function f9() override(I3B, I3BBBBBBBBBBBBBBBBBBBBBBBBBBBB, I3BBBBBBBBBBBBBB)
	external payable returns (uint);
	function f10() override
	external payable returns (uint);
	function f11() override(I3B, I3BB)
	external payable returns (uint);
	function f12() override(I3B, I3BBBBBBBBBBBBBBBBBBBBBBBBBBBB, I3BB)
	external payable returns (uint);
	function f13() override(I3B, I3BBBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f14() override(I3B, I3BB)
	external payable returns (uint);
	function f15() override(I3BBBBBBBBBBBBBBBBBBBBBBBBBBBB, I3BBBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f16() external payable returns (uint);
	function f17() external payable returns (uint);
}


contract C {
	function test() public returns (uint)
	{
			C2 tc0 = new C2();
			if (tc0.f0() != 564586691)
				return 1;
			if (tc0.f1() != 192302371)
				return 2;
			return 0;
	}
}

