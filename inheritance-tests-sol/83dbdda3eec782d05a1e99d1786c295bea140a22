pragma solidity >=0.0;
interface I0BB {
	function f0() external view returns (uint);
}
interface I0B is I0BB {
	function f1() external payable returns (uint);
}
interface I0 is I0B {
	function f0() override
	external view returns (uint);
}
interface C1BBB {
}
interface C1BBBBB {
	function f0() external payable returns (uint);
	function f1() external payable returns (uint);
}
interface C1BBBB is C1BBB, C1BBBBB {
}
interface C1BB is C1BBB, C1BBBB {
}
interface C1B is C1BB {
}
contract C1 is C1B {
	function f0() external payable
	override
	returns (uint)
	{
		return 1271135913;
	}
	function f1() external payable
	override
	returns (uint)
	{
		return 1882556969;
	}
}
interface C2BBB {
}
interface C2BBBBB {
	function f0() external payable returns (uint);
	function f1() external payable returns (uint);
}
interface C2BBBB is C2BBB, C2BBBBB {
	function f0() override
	external payable returns (uint);
}
interface C2BB is C2BBB, C2BBBB {
	function f0() override
	external payable returns (uint);
}
interface C2B is C2BB {
}
contract C2 is C2B {
	function f0() virtual external payable
	override
	returns (uint)
	{
		return 1842513780;
	}
	function f1() external payable
	override
	returns (uint)
	{
		return 631416347;
	}
}
contract C {
	function test() public returns (uint)
	{
			C1 tc0 = new C1();
			if (tc0.f0() != 1271135913)
				return 1;
			if (tc0.f1() != 1882556969)
				return 2;
			C2 tc1 = new C2();
			if (tc1.f0() != 1842513780)
				return 3;
			if (tc1.f1() != 631416347)
				return 4;
			return 0;
	}
}
