pragma solidity >=0.0;
interface I0BBBBBBBB {
	function f0() external payable returns (uint);
}
interface I0BBBBBBB is I0BBBBBBBB {
}
interface I0BBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I0BBBBBBBBBBB is I0BBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I0BBBBBBBBBB is I0BBBBBBBBBBB {
}
interface I0BBBBBBBBB is I0BBBBBBBB, I0BBBBBBBBBB {
	function f0() override(I0BBBBBBBB, I0BBBBBBBBBBB)
	external payable returns (uint);
}
interface I0BBBBBBBBBBBBB is I0BBBBBBBBB {
}
interface I0BBBBBBBBBBBBBB is I0BBBBBBBBBB {
}
interface I0BBBBBB is I0BBBBBBB, I0BBBBBBBBB, I0BBBBBBBBBBBBB, I0BBBBBBBBBBBBBB {
	function f0() override(I0BBBBBBBB, I0BBBBBBBBB, I0BBBBBBBBBBB)
	external payable returns (uint);
	function f1() external view returns (uint);
	function f2() external view returns (uint);
	function f3() external payable returns (uint);
}
interface I0BBBBB is I0BBBBBB {
}
interface I0BBBBBBBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I0BBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I0BBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBB {
}
interface I0BBBBBBBBBBBBBBBBBBBB {
}
interface I0BBBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBB {
}
interface I0BBBBBBBBBBBBBBB is I0BBBBBB, I0BBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBB {
	function f0() override(I0BBBBBB, I0BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f3() override
	external payable returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBBBBB is I0BBBBBB {
	function f0() override
	external payable returns (uint);
	function f4() external view returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBBBBB {
	function f1() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f4() override
	external view returns (uint);
}
interface I0BBBB is I0BBBBB, I0BBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I0BBBBBB, I0BBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I0BBBBBB, I0BBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override(I0BBBBBB, I0BBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f3() override(I0BBBBBB, I0BBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f4() override(I0BBBBBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f5() external view returns (uint);
	function f6() external view returns (uint);
	function f7() external view returns (uint);
}
interface I0BBB is I0BBBB {
	function f1() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f5() override
	external view returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBBBBBBBBBB {
}
interface I0BBBBBBBBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBBBBBBBBB {
}
interface I0BBBBBBBBBBBBBBBBBBBBBBB is I0BBB, I0BBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I0BBBB, I0BBBBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f3() override
	external payable returns (uint);
	function f5() override
	external view returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBBBBBBBBBBB is I0BBBB {
	function f0() override
	external payable returns (uint);
	function f4() override
	external view returns (uint);
	function f6() override
	external view returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBBBBBBBBBBBB is I0BBBB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override
	external payable returns (uint);
	function f6() override
	external view returns (uint);
}
interface I0BB is I0BBB, I0BBBBBBBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I0BBBB, I0BBBBBBBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I0BBB, I0BBBB, I0BBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override(I0BBB, I0BBBB, I0BBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f3() override(I0BBBB, I0BBBBBBBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f4() override(I0BBBB, I0BBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f5() override(I0BBB, I0BBBBBBBBBBBBBBBBBBBBBBB, I0BBBB)
	external view returns (uint);
	function f6() override(I0BBBB, I0BBBBBBBBBBBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f8() external view returns (uint);
	function f9() external view returns (uint);
	function f10() external payable returns (uint);
}
interface I0B is I0BB {
	function f1() override
	external view returns (uint);
	function f3() override
	external payable returns (uint);
	function f4() override
	external view returns (uint);
	function f5() override
	external view returns (uint);
	function f8() override
	external view returns (uint);
	function f9() override
	external view returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBB is I0B, I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I0BB, I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override
	external payable returns (uint);
	function f10() override
	external payable returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB is I0B {
	function f1() override
	external view returns (uint);
	function f8() override
	external view returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f1() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override
	external payable returns (uint);
	function f5() override
	external view returns (uint);
	function f6() override
	external view returns (uint);
	function f8() override
	external view returns (uint);
	function f9() override
	external view returns (uint);
	function f10() override
	external payable returns (uint);
}
interface I0 is I0B, I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I0BB, I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I0B, I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override(I0BB, I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f3() override(I0B, I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f5() override(I0B, I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f6() override(I0BB, I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f8() override(I0B, I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f9() override(I0B, I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f10() override(I0BB, I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f11() external view returns (uint);
	function f12() external view returns (uint);
	function f13() external view returns (uint);
}
library L1 {
	function f0(uint) external pure returns (uint)
	{
		return 1102520059;
	}
}
library L2 {
	function f0(uint) external pure returns (uint)
	{
		return 2044897763;
	}
}
interface I3B {
	function f0() external pure returns (uint);
}
interface I3 is I3B {
	function f0() override
	external pure returns (uint);
}
contract C {
	using L1 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1102520059)
			return 1;
		return 0;
	}
}
