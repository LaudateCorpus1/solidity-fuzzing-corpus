pragma solidity >=0.0;
interface I0B {
	function f0() external payable returns (uint);
}
interface I0 is I0B {
	function f0() override
	external payable returns (uint);
	function f1() external payable returns (uint);
}
library L1 {
	function f0(uint) public view returns (uint)
	{
		return 1804289383;
	}
}
interface C2B {
	function f0() external view returns (uint);
}
contract C2 is C2B {
	function f0() virtual external view
	override
	returns (uint)
	{
		return 1216431607;
	}
}
interface I3 {
	function f0() external pure returns (uint);
}
interface C4BBB {
	function f0() external view returns (uint);
}
interface C4BB is C4BBB {
}
interface C4B is C4BB {
	function f0() override
	external view returns (uint);
}
interface C4BBBBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface C4BBBBBBBBBBBBBBB is C4BBBBBBBBBBBBBB {
	function f1() external view returns (uint);
}
interface C4BBBBBBBBBBBBB is C4BBBBBBBBBBBBBB, C4BBBBBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() external view returns (uint);
	function f3() external view returns (uint);
}
interface C4BBBBBBBBBBBB is C4BBBBBBBBBBBBB {
	function f1() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
}
interface C4BBBBBBBBBBB is C4BBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface C4BBBBBBBBBB is C4BBBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() external payable returns (uint);
}
interface C4BBBBBBBBB is C4BBBBBBBBBB {
}
interface C4BBBBBBBBBBBBBBBB is C4BBBBBBBBBB {
	function f2() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() external payable returns (uint);
}
interface C4BBBBBBBB is C4BBBBBBBBB, C4BBBBBBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f2() override(C4BBBBBBBBBBBB, C4BBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f3() override(C4BBBBBBBBBB, C4BBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f4() override(C4BBBBBBBBBB, C4BBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() external payable returns (uint);
	function f7() external pure returns (uint);
	function f8() external payable returns (uint);
	function f9() external payable returns (uint);
}
interface C4BBBBBBB is C4BBBBBBBB {
	function f2() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f6() override
	external payable returns (uint);
	function f7() override
	external pure returns (uint);
	function f8() override
	external payable returns (uint);
	function f9() override
	external payable returns (uint);
}
interface C4BBBBBB is C4BBBBBBB {
	function f5() override
	external payable returns (uint);
	function f6() override
	external payable returns (uint);
	function f7() override
	external pure returns (uint);
	function f10() external payable returns (uint);
}
interface C4BBBBB is C4BBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f6() override
	external payable returns (uint);
	function f7() override
	external pure returns (uint);
	function f8() override
	external payable returns (uint);
	function f9() override
	external payable returns (uint);
}
interface C4BBBBBBBBBBBBBBBBB is C4BBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f6() override
	external payable returns (uint);
	function f7() override
	external pure returns (uint);
	function f8() override
	external payable returns (uint);
	function f9() override
	external payable returns (uint);
	function f10() override
	external payable returns (uint);
	function f11() external payable returns (uint);
}
interface C4BBBB is C4B, C4BBBBB, C4BBBBBBBBBBBBBBBBB {
	function f0() override(C4B, C4BBBBB, C4BBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(C4BBBBB, C4BBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f3() override(C4BBBBB, C4BBBBBBB)
	external view returns (uint);
	function f4() override(C4BBBBB, C4BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() override(C4BBBBB, C4BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f7() override(C4BBBBB, C4BBBBBBBBBBBBBBBBB)
	external pure returns (uint);
	function f8() override(C4BBBBB, C4BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f9() override(C4BBBBB, C4BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f10() override(C4BBBBBB, C4BBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f12() external view returns (uint);
}
contract C4 is C4B, C4BBBB {
	function f0() virtual external view
	override(C4BBBB, C4B)
	returns (uint)
	{
		return 175931877;
	}
	function f1() external view
	override
	returns (uint)
	{
		return 824034392;
	}
	function f2() virtual external view
	override
	returns (uint)
	{
		return 1138649934;
	}
	function f3() virtual external view
	override
	returns (uint)
	{
		return 1299423372;
	}
	function f4() virtual external payable
	override
	returns (uint)
	{
		return 1708215671;
	}
	function f5() virtual external payable
	override
	returns (uint)
	{
		return 365967760;
	}
	function f6() virtual external payable
	override
	returns (uint)
	{
		return 2019399742;
	}
	function f7() external pure
	override
	returns (uint)
	{
		return 1851105413;
	}
	function f8() virtual external payable
	override
	returns (uint)
	{
		return 1911600100;
	}
	function f9() virtual external payable
	override
	returns (uint)
	{
		return 614044814;
	}
	function f10() virtual external payable
	override
	returns (uint)
	{
		return 898244418;
	}
	function f11() virtual external payable
	override
	returns (uint)
	{
		return 1700822358;
	}
	function f12() virtual external view
	override
	returns (uint)
	{
		return 1414639022;
	}
}
interface I5B {
	function f0() external payable returns (uint);
}
interface I5 is I5B {
	function f0() override
	external payable returns (uint);
	function f1() external payable returns (uint);
	function f2() external view returns (uint);
}
interface I6B {
}
interface I6 is I6B {
}
interface I8 {
	function f0() external view returns (uint);
}
interface I9B {
	function f0() external payable returns (uint);
}
interface I9 is I9B {
}
contract C10B {
}
interface C10BBBB {
	function f0() external payable returns (uint);
}
interface C10BBB is C10BBBB {
}
abstract contract C10BB is C10B, C10BBB {
	function f0() virtual external payable
	override
	returns (uint);
}
contract C10 is C10B, C10BB {
	function f0() virtual external payable
	override
	returns (uint)
	{
		return 261215719;
	}
}
library L11 {
	function f0(uint) private pure returns (uint)
	{
		return 1649760492;
	}
}
contract C {
	using L1 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1804289383)
			return 1;
		return 0;
	}
}
