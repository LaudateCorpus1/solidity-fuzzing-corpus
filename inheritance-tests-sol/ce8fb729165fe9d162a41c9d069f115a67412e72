
pragma solidity >=0.0;







interface I0BBBB {

	function f0() external payable returns (uint);
}
interface I0BBB is I0BBBB {

}
interface I0BB is I0BBB {

	function f0() override
	external payable returns (uint);
}

interface I0BBBBB is I0BBB {

	function f1() external view returns (uint);
}
interface I0B is I0BB, I0BBBBB {

	function f0() override(I0BB, I0BBBB)
	external payable returns (uint);
	function f2() external payable returns (uint);
}
interface I0 is I0B {

}




interface I1BBB {

}
interface I1BB is I1BBB {

}
interface I1B is I1BB {

}







interface I1BBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I1BBBBBBBBB is I1BBBBBBBBBB {

}
interface I1BBBBBBBB is I1BBBBBBBBB {

}
interface I1BBBBBBB is I1BBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I1BBBBBB is I1BBBBBBB {

}
interface I1BBBBB is I1BBBBBB {

}

interface I1BBBBBBBBBBB is I1BBBBBB {

	function f1() external payable returns (uint);
}
interface I1BBBB is I1B, I1BBBBB, I1BBBBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I1 is I1B, I1BBBB {

	function f2() external view returns (uint);
}



interface I2BB {

}
interface I2B is I2BB {

}


interface I2BBBB {

	function f0() external view returns (uint);
}
interface I2BBB is I2BB, I2BBBB {

	function f0() override
	external view returns (uint);
}







interface I2BBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I2BBBBBBBBBB is I2BBBBBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I2BBBBBBBBB is I2BBBBBBBBBB {

}
interface I2BBBBBBBB is I2BBBBBBBBB {

}
interface I2BBBBBBB is I2BBBBBBBB {

}
interface I2BBBBBB is I2BBBBBBB {

	function f0() override
	external view returns (uint);
}

interface I2BBBBBBBBBBBB is I2BBBBBBB {

	function f1() external payable returns (uint);
}
interface I2BBBBB is I2BB, I2BBBBBB, I2BBBBBBBBBBBB {

	function f0() override(I2BBBBBB, I2BBBBBBBBBB)
	external view returns (uint);
}
interface I2 is I2B, I2BBB, I2BBBBB {

	function f0() override(I2BBB, I2BBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() external view returns (uint);
}


contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}

