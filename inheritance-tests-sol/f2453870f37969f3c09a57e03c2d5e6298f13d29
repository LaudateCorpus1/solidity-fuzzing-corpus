
pragma solidity >=0.0;






interface I0BBB {

	function f0() external payable returns (uint);
}
interface I0BB is I0BBB {

}
interface I0B is I0BB {

	function f0() override
	external payable returns (uint);
}
interface I0 is I0B {

}
library L1 {

	function f0(uint) private pure returns (uint)
	{
		return 1804289383;
	}
	function f1(uint) public view returns (uint)
	{
		return 846930886;
	}
}



interface C2BB {

	function f0() external view returns (uint);
}
interface C2B is C2BB {

}


interface C2BBBB {

	function f0() external view returns (uint);
}
interface C2BBB is C2BB, C2BBBB {

	function f0() override(C2BB, C2BBBB)
	external view returns (uint);
	function f1() external payable returns (uint);
}
contract C2 is C2B, C2BBB {

	function f0() external view
	override(C2BBB, C2BB)
	returns (uint)
	{
		return 192302371;
	}
	function f1() external payable
	override
	returns (uint)
	{
		return 1250328747;
	}
}



interface C3BB {

	function f0() external view returns (uint);
}
interface C3B is C3BB {

}
contract C3 is C3B {

	function f0() external view
	override
	returns (uint)
	{
		return 1882556969;
	}
}



interface C4BB {

	function f0() external view returns (uint);
}
interface C4B is C4BB {

	function f0() override
	external view returns (uint);
}


interface C4BBBB {

	function f0() external view returns (uint);
}
interface C4BBB is C4BB, C4BBBB {

	function f0() override(C4BB, C4BBBB)
	external view returns (uint);
}
contract C4 is C4B, C4BBB {

	function f0() virtual external view
	override(C4BBB, C4B)
	returns (uint)
	{
		return 914937185;
	}
}


contract C {
	using L1 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f1() != 846930886)
			return 1;
		return 0;
	}
}

