pragma solidity >=0.0;
abstract contract C0BB {
	function f0() virtual public view
	
	returns (uint);
}
abstract contract C0B is C0BB {
	function f1() public payable
	
	returns (uint)
	{
		return 2113076344;
	}
}
contract C0 is C0B {
	function f0() virtual public view
	override
	returns (uint)
	{
		return 1501100076;
	}
}
library L1 {
	function f0(uint) public pure returns (uint)
	{
		return 1804289383;
	}
}
contract C2B {
	function f0() public view
	
	returns (uint)
	{
		return 1872082239;
	}
}
contract C2 is C2B {
}
abstract contract C5BB {
}
contract C5B is C5BB {
	function f0() virtual public pure
	
	returns (uint)
	{
		return 319011186;
	}
}
contract C5 is C5B {
	function f0() public pure
	override
	returns (uint)
	{
		return 2041756892;
	}
}
library L6 {
	function f0(uint) public pure returns (uint)
	{
		return 1681692777;
	}
}
interface C7BBB {
	function f0() external view returns (uint);
	function f1() external payable returns (uint);
}
interface C7BB is C7BBB {
	function f1() override
	external payable returns (uint);
	function f2() external payable returns (uint);
}
interface C7B is C7BB {
	function f1() override
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
}
contract C7 is C7B {
	function f0() external view
	override
	returns (uint)
	{
		return 424589468;
	}
	function f1() external payable
	override
	returns (uint)
	{
		return 739959938;
	}
	function f2() virtual external payable
	override
	returns (uint)
	{
		return 1709834337;
	}
}
library L9 {
	function f0(uint) external pure returns (uint)
	{
		return 1957747793;
	}
}
library L10 {
	function f0(uint) public view returns (uint)
	{
		return 424238335;
	}
}
contract C {
	using L1 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1804289383)
			return 1;
		return 0;
	}
}
