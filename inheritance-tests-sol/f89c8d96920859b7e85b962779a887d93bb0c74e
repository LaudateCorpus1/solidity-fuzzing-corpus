
pragma solidity >=0.0;










interface C0BBBBBBB {

	function f0() external payable returns (uint);
}
interface C0BBBBBB is C0BBBBBBB {

}
interface C0BBBBB is C0BBBBBB {

	function f0() override
	external payable returns (uint);
}

interface C0BBBBBBBB is C0BBBBBB {

	function f1() external view returns (uint);
}
interface C0BBBB is C0BBBBB, C0BBBBBBBB {

	function f0() override(C0BBBBB, C0BBBBBBB)
	external payable returns (uint);
}
interface C0BBB is C0BBBB {

}
contract C0BB is C0BBB {

	function f0() external payable
	override
	returns (uint)
	{
		return 1250328747;
	}
	function f1() external view
	override
	returns (uint)
	{
		return 1271135913;
	}
}
contract C0B is C0BB {

}
abstract contract C0 is C0B {

}
library L1 {

	function f0(uint) internal view returns (uint)
	{
		return 846930886;
	}
}

contract C2 {

	function f0() public payable
	
	returns (uint)
	{
		return 2136927794;
	}
}



interface I3BB {

	function f0() external view returns (uint);
}
interface I3B is I3BB {

}

interface I3BBB is I3BB {

	function f0() override
	external view returns (uint);
	function f1() external view returns (uint);
}
interface I3 is I3B, I3BBB {

	function f0() override(I3BB, I3BBB)
	external view returns (uint);
	function f1() override
	external view returns (uint);
}



interface I4BB {

	function f0() external payable returns (uint);
}
interface I4B is I4BB {

}
interface I4 is I4B {

	function f0() override
	external payable returns (uint);
}
library L5 {

	function f0(uint) internal pure returns (uint)
	{
		return 1714636915;
	}
}


interface I6B {

	function f0() external view returns (uint);
}
interface I6 is I6B {

	function f0() override
	external view returns (uint);
}
library L7 {

	function f0(uint) public pure returns (uint)
	{
		return 1957747793;
	}
	function f1(uint) public pure returns (uint)
	{
		return 424238335;
	}
}
library L8 {

	function f0(uint) public pure returns (uint)
	{
		return 719885386;
	}
}
library L9 {

	function f0(uint) internal view returns (uint)
	{
		return 1649760492;
	}
}


contract C {
	using L8 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 719885386)
			return 1;
		return 0;
	}
}

