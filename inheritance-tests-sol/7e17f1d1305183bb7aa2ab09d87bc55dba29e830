
pragma solidity >=0.0;




interface I2B {

}


interface I2BBB {

	function f0() external view returns (uint);
}
interface I2BB is I2B, I2BBB {

}
interface I2 is I2B, I2BB {

}


interface I4B {

}

interface I4BB is I4B {

}





interface I4BBBBBBB {

	function f0() external payable returns (uint);
}
interface I4BBBBBB is I4BBBBBBB {

}
interface I4BBBBB is I4BBBBBB {

	function f1() external payable returns (uint);
}
interface I4BBBB is I4BBBBB {

}
interface I4BBB is I4B, I4BBBB {

	function f0() override
	external payable returns (uint);
}

interface I4BBBBBBBB is I4B {

}
interface I4 is I4B, I4BB, I4BBB, I4BBBBBBBB {

	function f1() override
	external payable returns (uint);
}



interface I5BB {

	function f0() external view returns (uint);
}

interface I5BBB is I5BB {

	function f1() external view returns (uint);
}




interface I5BBBBBBB {

	function f0() external view returns (uint);
}
interface I5BBBBBB is I5BBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I5BBBBB is I5BBBBBB {

	function f0() override
	external view returns (uint);
}
interface I5BBBB is I5BBB, I5BBBBB {

	function f0() override(I5BB, I5BBBBB)
	external view returns (uint);
}
interface I5B is I5BB, I5BBB, I5BBBB {

	function f0() override(I5BB, I5BBBB)
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() external payable returns (uint);
}

interface I5BBBBBBBB is I5B {

	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f3() external payable returns (uint);
}
interface I5 is I5B, I5BBBBBBBB {

	function f0() override(I5B, I5BBBBBBBB)
	external view returns (uint);
	function f1() override(I5B, I5BBBBBBBB)
	external view returns (uint);
}



interface I6BB {

	function f0() external view returns (uint);
}
interface I6B is I6BB {

	function f1() external payable returns (uint);
}

interface I6BBB is I6B {

	function f0() override
	external view returns (uint);
	function f2() external payable returns (uint);
}
interface I6 is I6B, I6BBB {

	function f0() override(I6BB, I6BBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}




interface C7BBB {

}
interface C7BB is C7BBB {

	function f0() external view returns (uint);
	function f1() external view returns (uint);
}
contract C7B is C7BB {

	function f0() virtual external view
	override
	returns (uint)
	{
		return 480194461;
	}
	function f1() virtual external view
	override
	returns (uint)
	{
		return 180318217;
	}
	function f2() virtual public pure
	
	returns (uint)
	{
		return 389431516;
	}
}
contract C7 is C7B {

	function f1() external view
	override
	returns (uint)
	{
		return 942409124;
	}
	function f3() virtual public pure
	
	returns (uint)
	{
		return 1951824771;
	}
}






interface I8BBBBB {

	function f0() external payable returns (uint);
}
interface I8BBBB is I8BBBBB {

}
interface I8BBB is I8BBBB {

	function f1() external payable returns (uint);
}
interface I8BB is I8BBB {

	function f1() override
	external payable returns (uint);
}
interface I8B is I8BB {

	function f0() override
	external payable returns (uint);
}





interface I8BBBBBBBBBB {

	function f0() external payable returns (uint);
}
interface I8BBBBBBBBB is I8BBBBBBBBBB {

	function f0() override
	external payable returns (uint);
}
interface I8BBBBBBBB is I8BBBBBBBBB {

	function f0() override
	external payable returns (uint);
	function f1() external payable returns (uint);
}
interface I8BBBBBBB is I8BBBBBBBB {

}
interface I8BBBBBB is I8BB, I8BBBBBBB {

	function f0() override(I8BBBBB, I8BBBBBBBB)
	external payable returns (uint);
	function f1() override(I8BB, I8BBBBBBBB)
	external payable returns (uint);
}

interface I8BBBBBBBBBBB is I8BB {

	function f0() override
	external payable returns (uint);
}

interface I8BBBBBBBBBBBB is I8BBBBBB {

	function f1() override
	external payable returns (uint);
}

interface I8BBBBBBBBBBBBB is I8BBBBBBB {

	function f0() override
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}





interface I8BBBBBBBBBBBBBBBBBB {

	function f0() external payable returns (uint);
}
interface I8BBBBBBBBBBBBBBBBB is I8BBBBBBBBBBBBBBBBBB {

}
interface I8BBBBBBBBBBBBBBBB is I8BBBBBBBBBBBBBBBBB {

	function f0() override
	external payable returns (uint);
	function f1() external payable returns (uint);
}
interface I8BBBBBBBBBBBBBBB is I8BBBBBBBBBBBBBBBB {

	function f1() override
	external payable returns (uint);
}
interface I8BBBBBBBBBBBBBB is I8B, I8BBBBBBBBBBBBBBB {

	function f0() override(I8B, I8BBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I8BB, I8BBBBBBBBBBBBBBB)
	external payable returns (uint);
}





interface I8BBBBBBBBBBBBBBBBBBBBBBB {

	function f0() external payable returns (uint);
}
interface I8BBBBBBBBBBBBBBBBBBBBBB is I8BBBBBBBBBBBBBBBBBBBBBBB {

	function f0() override
	external payable returns (uint);
}
interface I8BBBBBBBBBBBBBBBBBBBBB is I8BBBBBBBBBBBBBBBBBBBBBB {

	function f1() external payable returns (uint);
}
interface I8BBBBBBBBBBBBBBBBBBBB is I8BBBBBBBBBBBBBBBBBBBBB {

	function f0() override
	external payable returns (uint);
}
interface I8BBBBBBBBBBBBBBBBBBB is I8BBBBBB, I8BBBBBBBBBBBBBBBBBBBB {

	function f0() override(I8BBBBBB, I8BBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I8BBBBBB, I8BBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
}

interface I8BBBBBBBBBBBBBBBBBBBBBBBB is I8BBBBBBBBBBBBBBBBBBBB {

}

interface I8BBBBBBBBBBBBBBBBBBBBBBBBB is I8BBBBBBBBBBBB {

	function f0() override
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}

interface I8BBBBBBBBBBBBBBBBBBBBBBBBBB is I8BBBBBBBBBBBB {

	function f0() override
	external payable returns (uint);
}
interface I8 is I8B, I8BBBBBB, I8BBBBBBBBBBB, I8BBBBBBBBBBBB, I8BBBBBBBBBBBBB, I8BBBBBBBBBBBBBB, I8BBBBBBBBBBBBBBBBBBB, I8BBBBBBBBBBBBBBBBBBBBBBBB, I8BBBBBBBBBBBBBBBBBBBBBBBBB, I8BBBBBBBBBBBBBBBBBBBBBBBBBB {

	function f0() override(I8B, I8BBBBBB, I8BBBBBBBBBBB, I8BBBBBBBBBBBBB, I8BBBBBBBBBBBBBB, I8BBBBBBBBBBBBBBBBBBB, I8BBBBBBBBBBBBBBBBBBBB, I8BBBBBBBBBBBBBBBBBBBBBBBBB, I8BBBBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I8BB, I8BBBBBB, I8BBBBBBBBBBBB, I8BBBBBBBBBBBBB, I8BBBBBBBBBBBBBB, I8BBBBBBBBBBBBBBBBBBB, I8BBBBBBBBBBBBBBBBBBBBB, I8BBBBBBBBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
}




interface I9BBB {

}
interface I9BB is I9BBB {

	function f0() external view returns (uint);
	function f1() external view returns (uint);
}


interface I9BBBBB {

}
interface I9BBBB is I9BB, I9BBBBB {

	function f2() external view returns (uint);
}
interface I9B is I9BB, I9BBBB {

	function f0() override
	external view returns (uint);
}
interface I9 is I9B {

	function f1() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f3() external view returns (uint);
	function f4() external payable returns (uint);
}


interface I10B {

}


interface I10BBB {

	function f0() external view returns (uint);
}
interface I10BB is I10B, I10BBB {

	function f0() override
	external view returns (uint);
}
interface I10 is I10B, I10BB {

	function f0() override
	external view returns (uint);
}


contract C {
	function test() public returns (uint)
	{
			C7 tc0 = new C7();
			if (tc0.f0() != 480194461)
				return 1;
			if (tc0.f1() != 942409124)
				return 2;
			if (tc0.f2() != 389431516)
				return 3;
			if (tc0.f3() != 1951824771)
				return 4;
			C7B tc1 = new C7B();
			if (tc1.f0() != 480194461)
				return 5;
			if (tc1.f1() != 180318217)
				return 6;
			if (tc1.f2() != 389431516)
				return 7;
			return 0;
	}
}

