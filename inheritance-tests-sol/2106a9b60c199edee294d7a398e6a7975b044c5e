
pragma solidity >=0.0;







interface I0BBBB {

	function f0() external view returns (uint);
}
interface I0BBB is I0BBBB {

	function f0() override
	external view returns (uint);
}
interface I0BB is I0BBB {

	function f0() override
	external view returns (uint);
}
interface I0B is I0BB {

}




interface I0BBBBBBBB {

	function f0() external view returns (uint);
}
interface I0BBBBBBB is I0BBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I0BBBBBB is I0BBBBBBB {

}
interface I0BBBBB is I0BB, I0BBBBBB {

	function f0() override(I0BB, I0BBBBBBB)
	external view returns (uint);
}




interface I0BBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I0BBBBBBBBBBB is I0BBBBBBBBBBBB {

}
interface I0BBBBBBBBBB is I0BBBBBBBBBBB {

}
interface I0BBBBBBBBB is I0BBBBB, I0BBBBBBBBBB {

	function f0() override(I0BBBBB, I0BBBBBBBBBBBB)
	external view returns (uint);
}

interface I0BBBBBBBBBBBBB is I0BB {

	function f1() external payable returns (uint);
}




interface I0BBBBBBBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I0BBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I0BBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I0BBBBBBBBBBBBBB is I0BB, I0BBBBBBBBBBBBBBB {

	function f0() override(I0BB, I0BBBBBBBBBBBBBBB)
	external view returns (uint);
}

interface I0BBBBBBBBBBBBBBBBBB is I0BB {

	function f1() external payable returns (uint);
}
interface I0 is I0B, I0BBBBB, I0BBBBBBBBB, I0BBBBBBBBBBBBB, I0BBBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBB {

	function f0() override(I0BB, I0BBBBB, I0BBBBBBBBB, I0BBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I0BBBBBBBBBBBBB, I0BBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
}


interface I1B {

	function f0() external payable returns (uint);
}
interface I1 is I1B {

}







interface C2BBBBBB {

	function f0() external view returns (uint);
}
interface C2BBBBB is C2BBBBBB {

	function f0() override
	external view returns (uint);
}
interface C2BBBB is C2BBBBB {

	function f0() override
	external view returns (uint);
}
interface C2BBB is C2BBBB {

	function f0() override
	external view returns (uint);
}






interface C2BBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface C2BBBBBBBBBBB is C2BBBBBBBBBBBB {

}
interface C2BBBBBBBBBB is C2BBBBBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface C2BBBBBBBBB is C2BBBBBBBBBB {

	function f0() override
	external view returns (uint);
}



interface C2BBBBBBBBBBBBBBB {

}
interface C2BBBBBBBBBBBBBB is C2BBBBBBBBBBBBBBB {

}
interface C2BBBBBBBBBBBBB is C2BBBBBBBBB, C2BBBBBBBBBBBBBB {

}
interface C2BBBBBBBB is C2BBBBBBBBB, C2BBBBBBBBBBBBB {

}
interface C2BBBBBBB is C2BBBB, C2BBBBBBBB {

	function f0() override(C2BBBB, C2BBBBBBBBB)
	external view returns (uint);
}
interface C2BB is C2BBB, C2BBBBBBB {

	function f0() override(C2BBB, C2BBBBBBB)
	external view returns (uint);
}
interface C2B is C2BB {

	function f0() override
	external view returns (uint);
}
contract C2 is C2B {

	function f0() virtual external view
	override
	returns (uint)
	{
		return 55314519;
	}
}



interface I3BB {

	function f0() external payable returns (uint);
}
interface I3B is I3BB {

	function f0() override
	external payable returns (uint);
	function f1() external view returns (uint);
	function f2() external view returns (uint);
}
interface I3 is I3B {

	function f0() override
	external payable returns (uint);
}




interface C4BBB {

	function f0() external payable returns (uint);
}
interface C4BB is C4BBB {

}
contract C4B is C4BB {

	function f0() external payable
	override
	returns (uint)
	{
		return 180427013;
	}
}
contract C4 is C4B {

}




interface I5BBB {

	function f0() external payable returns (uint);
}


interface I5BBBBB {

	function f0() external payable returns (uint);
}
interface I5BBBB is I5BBB, I5BBBBB {

	function f0() override(I5BBB, I5BBBBB)
	external payable returns (uint);
}
interface I5BB is I5BBB, I5BBBB {

	function f0() override(I5BBB, I5BBBB)
	external payable returns (uint);
	function f1() external view returns (uint);
}
interface I5B is I5BB {

	function f0() override
	external payable returns (uint);
}
interface I5 is I5B {

	function f0() override
	external payable returns (uint);
}




interface C6BBB {

	function f0() external view returns (uint);
	function f1() external payable returns (uint);
}
interface C6BB is C6BBB {

}
abstract contract C6B is C6BB {

	function f0() virtual external view
	override
	returns (uint);
	function f1() virtual external payable
	override
	returns (uint);
}
contract C6 is C6B {

	function f0() virtual external view
	override
	returns (uint)
	{
		return 2048720635;
	}
	function f1() virtual external payable
	override
	returns (uint)
	{
		return 439916939;
	}
}




interface C7BBB {

	function f0() external payable returns (uint);
}
interface C7BB is C7BBB {

}
interface C7B is C7BB {

}
contract C7 is C7B {

	function f0() virtual external payable
	override
	returns (uint)
	{
		return 1678055616;
	}
}
library L8 {

	function f0(uint) public pure returns (uint)
	{
		return 596516649;
	}
}
library L9 {

	function f0(uint) internal pure returns (uint)
	{
		return 1189641421;
	}
}


contract C {
	using L8 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 596516649)
			return 1;
		return 0;
	}
}

