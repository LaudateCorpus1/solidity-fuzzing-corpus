
pragma solidity >=0.0;



contract C0 {

	function f0() virtual public pure
	
	returns (uint)
	{
		return 1407254738;
	}
}
library L1 {

	function f0(uint) external pure returns (uint)
	{
		return 1804289383;
	}
}
library L2 {

	function f0(uint) internal view returns (uint)
	{
		return 846930886;
	}
	function f1(uint) internal view returns (uint)
	{
		return 1681692777;
	}
}
library L3 {

	function f0(uint) internal pure returns (uint)
	{
		return 1714636915;
	}
}














interface I4BBBBBBBBBBBBB {

	function f0() external view returns (uint);
}

interface I4BBBBBBBBBBBBBB is I4BBBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
	function f2() external view returns (uint);
}
interface I4BBBBBBBBBBBB is I4BBBBBBBBBBBBB, I4BBBBBBBBBBBBBB {

	function f0() override(I4BBBBBBBBBBBBB, I4BBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f3() external view returns (uint);
	function f4() external view returns (uint);
}
interface I4BBBBBBBBBBB is I4BBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
}
interface I4BBBBBBBBBB is I4BBBBBBBBBBB {

	function f1() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external view returns (uint);
}
interface I4BBBBBBBBB is I4BBBBBBBBBB {

	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
	function f4() override
	external view returns (uint);
	function f5() external payable returns (uint);
}
interface I4BBBBBBBB is I4BBBBBBBBB {

	function f3() override
	external view returns (uint);
}

interface I4BBBBBBBBBBBBBBB is I4BBBBBBBBB {

	function f2() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external view returns (uint);
	function f6() external payable returns (uint);
	function f7() external payable returns (uint);
}
interface I4BBBBBBB is I4BBBBBBBB, I4BBBBBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f2() override(I4BBBBBBBBB, I4BBBBBBBBBBBBBBB)
	external view returns (uint);
	function f3() override(I4BBBBBBBB, I4BBBBBBBBBBBBBBB)
	external view returns (uint);
	function f4() override(I4BBBBBBBBB, I4BBBBBBBBBBBBBBB)
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f7() override
	external payable returns (uint);
	function f8() external view returns (uint);
	function f9() external pure returns (uint);
	function f10() external payable returns (uint);
	function f11() external payable returns (uint);
}
interface I4BBBBBB is I4BBBBBBB {

	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
	function f4() override
	external view returns (uint);
	function f6() override
	external payable returns (uint);
	function f7() override
	external payable returns (uint);
	function f8() override
	external view returns (uint);
	function f9() override
	external pure returns (uint);
	function f11() override
	external payable returns (uint);
}
interface I4BBBBB is I4BBBBBB {

	function f4() override
	external view returns (uint);
	function f6() override
	external payable returns (uint);
	function f7() override
	external payable returns (uint);
	function f8() override
	external view returns (uint);
	function f9() override
	external pure returns (uint);
	function f10() override
	external payable returns (uint);
	function f12() external payable returns (uint);
}
interface I4BBBB is I4BBBBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() override
	external payable returns (uint);
	function f7() override
	external payable returns (uint);
	function f9() override
	external pure returns (uint);
	function f10() override
	external payable returns (uint);
	function f11() override
	external payable returns (uint);
}

interface I4BBBBBBBBBBBBBBBB is I4BBBB {

	function f2() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f8() override
	external view returns (uint);
	function f9() override
	external pure returns (uint);
	function f10() override
	external payable returns (uint);
	function f11() override
	external payable returns (uint);
	function f12() override
	external payable returns (uint);
	function f13() external view returns (uint);
}
interface I4BBB is I4BBBB, I4BBBBBBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override(I4BBBB, I4BBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f3() override(I4BBBBBBB, I4BBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f4() override(I4BBBBB, I4BBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f5() override(I4BBBB, I4BBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f7() override
	external payable returns (uint);
	function f8() override(I4BBBBB, I4BBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f9() override(I4BBBB, I4BBBBBBBBBBBBBBBB)
	external pure returns (uint);
	function f10() override(I4BBBB, I4BBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f11() override(I4BBBB, I4BBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f12() override(I4BBBBB, I4BBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f14() external view returns (uint);
}
interface I4BB is I4BBB {

	function f0() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f4() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() override
	external payable returns (uint);
	function f8() override
	external view returns (uint);
	function f9() override
	external pure returns (uint);
	function f11() override
	external payable returns (uint);
	function f14() override
	external view returns (uint);
}
interface I4B is I4BB {

	function f2() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f10() override
	external payable returns (uint);
	function f13() override
	external view returns (uint);
}
interface I4 is I4B {

	function f2() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f7() override
	external payable returns (uint);
	function f11() override
	external payable returns (uint);
	function f14() override
	external view returns (uint);
	function f15() external view returns (uint);
}
library L6 {

	function f0(uint) internal view returns (uint)
	{
		return 1649760492;
	}
}


contract C {
	function test() public returns (uint)
	{
			C0 tc0 = new C0();
			if (tc0.f0() != 1407254738)
				return 1;
			return 0;
	}
}

