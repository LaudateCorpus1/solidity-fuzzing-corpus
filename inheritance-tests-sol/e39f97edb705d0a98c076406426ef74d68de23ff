pragma solidity >=0.0;
library L1 {
	function f0(uint) public view returns (uint)
	{
		return 1804289383;
	}
	function f1(uint) internal pure returns (uint)
	{
		return 846930886;
	}
}
interface C2BBB {
	function f0() external payable returns (uint);
}
interface C2BB is C2BBB {
	function f0() override
	external payable returns (uint);
}
contract C2B is C2BB {
	function f0() virtual external payable
	override
	returns (uint)
	{
		return 971846536;
	}
}
interface C2BBBBBB {
	function f0() external payable returns (uint);
}
interface C2BBBBB is C2BBBBBB {
}
interface C2BBBB is C2BB, C2BBBBB {
	function f0() override(C2BB, C2BBBBBB)
	external payable returns (uint);
}
contract C2 is C2B, C2BBBB {
	function f0() external payable
	override(C2B, C2BBBB)
	returns (uint)
	{
		return 1425835579;
	}
}
interface I3BBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I3BBBBBBBBB is I3BBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I3BBBBBBBBBBB is I3BBBBBBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() external view returns (uint);
}
interface I3BBBBBBBB is I3BBBBBBBBB, I3BBBBBBBBBBB {
	function f0() override(I3BBBBBBBBB, I3BBBBBBBBBBB)
	external payable returns (uint);
	function f2() external payable returns (uint);
	function f3() external view returns (uint);
}
interface I3BBBBBBB is I3BBBBBBBB {
}
interface I3BBBBBB is I3BBBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f4() external view returns (uint);
}
interface I3BBBBB is I3BBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external view returns (uint);
	function f5() external payable returns (uint);
}
interface I3BBBB is I3BBBBB {
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f4() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
}
interface I3BBBBBBBBBBBB is I3BBBBB {
	function f2() override
	external payable returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() external payable returns (uint);
}
interface I3BBB is I3BBBB, I3BBBBBBBBBBBB {
	function f1() override(I3BBBB, I3BBBBB)
	external view returns (uint);
	function f2() override(I3BBBB, I3BBBBBBBBBBBB)
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override(I3BBBB, I3BBBBBB)
	external view returns (uint);
	function f5() override(I3BBBB, I3BBBBBBBBBBBB)
	external payable returns (uint);
	function f7() external payable returns (uint);
	function f8() external view returns (uint);
	function f9() external payable returns (uint);
}
interface I3BB is I3BBB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() override
	external payable returns (uint);
}
interface I3B is I3BB {
	function f3() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f7() override
	external payable returns (uint);
	function f8() override
	external view returns (uint);
	function f9() override
	external payable returns (uint);
}
interface I3BBBBBBBBBBBBB is I3BB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external view returns (uint);
	function f6() override
	external payable returns (uint);
	function f7() override
	external payable returns (uint);
	function f9() override
	external payable returns (uint);
	function f10() external payable returns (uint);
}
interface I3 is I3B, I3BBBBBBBBBBBBB {
	function f0() override(I3BB, I3BBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I3BB, I3BBBBBBBBBBBBB)
	external view returns (uint);
	function f3() override(I3B, I3BBBBBBBBBBBBB)
	external view returns (uint);
	function f4() override(I3BBB, I3BBBBBBBBBBBBB)
	external view returns (uint);
	function f5() override(I3B, I3BB)
	external payable returns (uint);
	function f6() override(I3BB, I3BBBBBBBBBBBBB)
	external payable returns (uint);
	function f7() override(I3B, I3BBBBBBBBBBBBB)
	external payable returns (uint);
	function f8() override(I3B, I3BBB)
	external view returns (uint);
	function f9() override(I3B, I3BBBBBBBBBBBBB)
	external payable returns (uint);
	function f10() override
	external payable returns (uint);
}
interface I4BBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I4BBBBBBBBB is I4BBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I4BBBBBBBBBBB is I4BBBBBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() external view returns (uint);
}
interface I4BBBBBBBB is I4BBBBBBBBB, I4BBBBBBBBBBB {
	function f0() override(I4BBBBBBBBB, I4BBBBBBBBBBB)
	external payable returns (uint);
	function f2() external payable returns (uint);
	function f3() external view returns (uint);
}
interface I4BBBBBBB is I4BBBBBBBB {
	function f1() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
}
interface I4BBBBBB is I4BBBBBBB {
	function f0() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f4() external view returns (uint);
}
interface I4BBBBB is I4BBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external view returns (uint);
	function f5() external payable returns (uint);
}
interface I4BBBB is I4BBBBB {
}
interface I4BBBBBBBBBBBB is I4BBBB {
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f6() external payable returns (uint);
}
interface I4BBB is I4BBBB, I4BBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
	function f2() override(I4BBBBBBBB, I4BBBBBBBBBBBB)
	external payable returns (uint);
	function f3() override(I4BBBBBB, I4BBBBBBBBBBBB)
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f7() external payable returns (uint);
	function f8() external view returns (uint);
	function f9() external payable returns (uint);
}
interface I4BB is I4BBB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() override
	external payable returns (uint);
	function f9() override
	external payable returns (uint);
}
interface I4B is I4BB {
	function f0() override
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
	function f5() override
	external payable returns (uint);
	function f8() override
	external view returns (uint);
	function f9() override
	external payable returns (uint);
}
interface I4BBBBBBBBBBBBB is I4BB {
	function f0() override
	external payable returns (uint);
	function f1() override
	external view returns (uint);
	function f6() override
	external payable returns (uint);
	function f10() external payable returns (uint);
}
interface I4 is I4B, I4BBBBBBBBBBBBB {
	function f0() override(I4B, I4BBBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I4BB, I4BBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override(I4B, I4BBB)
	external payable returns (uint);
	function f5() override(I4B, I4BB)
	external payable returns (uint);
	function f6() override(I4BB, I4BBBBBBBBBBBBB)
	external payable returns (uint);
	function f8() override(I4B, I4BBB)
	external view returns (uint);
	function f9() override(I4B, I4BB)
	external payable returns (uint);
}
contract C {
	function test() public returns (uint)
	{
			C2 tc0 = new C2();
			if (tc0.f0() != 1425835579)
				return 1;
			C2B tc1 = new C2B();
			if (tc1.f0() != 971846536)
				return 2;
			return 0;
	}
}
