pragma solidity >=0.0;
interface I1BBBB {
	function f0() external view returns (uint);
}
interface I1BBB is I1BBBB {
	function f0() override
	external view returns (uint);
}
interface I1BB is I1BBB {
	function f0() override
	external view returns (uint);
}
interface I1B is I1BB {
}
interface I1BBBBBBBB {
	function f0() external view returns (uint);
}
interface I1BBBBBBB is I1BBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface I1BBBBBB is I1BBBBBBB {
}
interface I1BBBBB is I1B, I1BBBBBB {
	function f0() override(I1BB, I1BBBBBBB)
	external view returns (uint);
}
interface I1BBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I1BBBBBBBBBBB is I1BBBBBBBBBBBB {
}
interface I1BBBBBBBBBB is I1BBBBBBBBBBB {
}
interface I1BBBBBBBBB is I1BB, I1BBBBBBBBBB {
	function f0() override(I1BB, I1BBBBBBBBBBBB)
	external view returns (uint);
}
interface I1BBBBBBBBBBBBB is I1BB {
	function f1() external payable returns (uint);
}
interface I1BBBBBBBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I1BBBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface I1BBBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface I1BBBBBBBBBBBBBB is I1BB, I1BBBBBBBBBBBBBBB {
	function f0() override(I1BB, I1BBBBBBBBBBBBBBB)
	external view returns (uint);
}
interface I1BBBBBBBBBBBBBBBBBB is I1BB {
	function f1() external payable returns (uint);
}
interface I1 is I1B, I1BBBBB, I1BBBBBBBBB, I1BBBBBBBBBBBBB, I1BBBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBB {
	function f0() override(I1BB, I1BBBBB, I1BBBBBBBBB, I1BBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I1BBBBBBBBBBBBB, I1BBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
}
abstract contract C2BB {
}
contract C2B is C2BB {
}
interface C2BBBBB {
	function f0() external view returns (uint);
}
interface C2BBBB is C2BBBBB {
	function f0() override
	external view returns (uint);
}
interface C2BBB is C2BBBB {
	function f0() override
	external view returns (uint);
}
contract C2 is C2B, C2BBB {
	function f0() virtual external view
	override
	returns (uint)
	{
		return 1234233906;
	}
}
library L3 {
	function f0(uint) public pure returns (uint)
	{
		return 1649760492;
	}
}
interface C4BBB {
	function f0() external view returns (uint);
}
interface C4BB is C4BBB {
}
abstract contract C4B is C4BB {
	function f0() virtual external view
	override
	returns (uint);
}
contract C4 is C4B {
	function f0() external view
	override
	returns (uint)
	{
		return 1063452205;
	}
}
interface C5BBBBBB {
	function f0() external view returns (uint);
}
interface C5BBBBB is C5BBBBBB {
}
interface C5BBBB is C5BBBBB {
	function f0() override
	external view returns (uint);
}
interface C5BBB is C5BBBB {
	function f0() override
	external view returns (uint);
}
interface C5BBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface C5BBBBBBBBBBB is C5BBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface C5BBBBBBBBBB is C5BBBBBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface C5BBBBBBBBB is C5BBBBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface C5BBBBBBBBBBBBBBB {
}
interface C5BBBBBBBBBBBBBB is C5BBBBBBBBBBBBBBB {
}
interface C5BBBBBBBBBBBBB is C5BBBBBBBBBB, C5BBBBBBBBBBBBBB {
}
interface C5BBBBBBBB is C5BBBBBBBBB, C5BBBBBBBBBBBBB {
	function f0() override(C5BBBBBBBBB, C5BBBBBBBBBB)
	external view returns (uint);
}
interface C5BBBBBBB is C5BBBB, C5BBBBBBBB {
	function f0() override(C5BBBB, C5BBBBBBBB)
	external view returns (uint);
}
interface C5BB is C5BBB, C5BBBBBBB {
	function f0() override(C5BBB, C5BBBBBBB)
	external view returns (uint);
}
interface C5B is C5BB {
	function f0() override
	external view returns (uint);
}
contract C5 is C5B {
	function f0() virtual external view
	override
	returns (uint)
	{
		return 48711201;
	}
}
contract C {
	using L3 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1649760492)
			return 1;
		return 0;
	}
}
