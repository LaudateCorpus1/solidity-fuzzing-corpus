pragma solidity >=0.0;
interface I0BBBBBB {
}
interface I0BBBBB is I0BBBBBB {
}
interface I0BBBB is I0BBBBB {
}
interface I0BBBBBBBBBBBBBB {
}
interface I0BBBBBBBBBBBBB is I0BBBBBBBBBBBBBB {
}
interface I0BBBBBBBBBBBB is I0BBBBBBBBBBBBB {
}
interface I0BBBBBBBBBBBBBBBBBB {
}
interface I0BBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I0BBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBB {
}
interface I0BBBBBBBBBBBBBBB is I0BBBBBBBBBBBB, I0BBBBBBBBBBBBBBBB {
}
interface I0BBBBBBBBBBB is I0BBBBBBBBBBBB, I0BBBBBBBBBBBBBBB {
	function f1() external payable returns (uint);
}
interface I0BBBBBBBBBB is I0BBBBBBBBBBB {
	function f2() external view returns (uint);
}
interface I0BBBBBBBBB is I0BBBBBBBBBB {
	function f3() external view returns (uint);
}
interface I0BBBBBBBB is I0BBBBBBBBB {
	function f2() override
	external view returns (uint);
}
interface I0BBBBBBB is I0BBBBB, I0BBBBBBBB {
	function f2() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
}
interface I0BBB is I0BBBB, I0BBBBBBB {
	function f3() override
	external view returns (uint);
	function f4() external payable returns (uint);
}
interface I0BB is I0BBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f5() external view returns (uint);
}
interface I0B is I0BB {
	function f1() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
	function f5() override
	external view returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBBBBBB {
}
interface I0BBBBBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBBBB is I0BBBBBBBBBBBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface I0BBBBBBBBBBBBBBBBBBB is I0BB, I0BBBBBBBBBBBBBBBBBBBB {
	function f0() override(I0BB, I0BBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
}
interface I0 is I0B, I0BBBBBBBBBBBBBBBBBBB {
	function f0() override(I0BB, I0BBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I0B, I0BBBBBBBBBBBBBBBBBBB)
	external payable returns (uint);
	function f2() override(I0B, I0BBBBBBB)
	external view returns (uint);
	function f3() override(I0BB, I0BBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f5() override(I0B, I0BB)
	external view returns (uint);
	function f6() external payable returns (uint);
}
interface I1BBBBBBBBB {
}
interface I1BBBBBBBB is I1BBBBBBBBB {
}
interface I1BBBBBBB is I1BBBBBBBB {
}
interface I1BBBBBB is I1BBBBBBB {
}
interface I1BBBBB is I1BBBBBB {
}
interface I1BBBB is I1BBBBB {
}
interface I1BBBBBBBBBBBBB {
}
interface I1BBBBBBBBBBBB is I1BBBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I1BBBBBBBBBBB is I1BBBBBBBBBBBB {
}
interface I1BBBBBBBBBB is I1BBBBB, I1BBBBBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface I1BBB is I1BBBB, I1BBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I1BB is I1BBB {
	function f1() override
	external payable returns (uint);
	function f2() external view returns (uint);
}
interface I1B is I1BB {
	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I1 is I1B {
	function f0() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
}
library L2 {
	function f0(uint) public pure returns (uint)
	{
		return 1957747793;
	}
}
interface I3BBBBBBBBB {
}
interface I3BBBBBBBB is I3BBBBBBBBB {
}
interface I3BBBBBBB is I3BBBBBBBB {
}
interface I3BBBBBB is I3BBBBBBB {
}
interface I3BBBBB is I3BBBBBB {
}
interface I3BBBB is I3BBBBB {
}
interface I3BBBBBBBBBBBBB {
}
interface I3BBBBBBBBBBBB is I3BBBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I3BBBBBBBBBBB is I3BBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface I3BBBBBBBBBB is I3BBBBB, I3BBBBBBBBBBB {
}
interface I3BBB is I3BBBB, I3BBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I3BB is I3BBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() external view returns (uint);
}
interface I3B is I3BB {
	function f0() override
	external view returns (uint);
}
interface I3BBBBBBBBBBBBBB is I3B {
	function f0() override
	external view returns (uint);
}
interface I3 is I3B, I3BBBBBBBBBBBBBB {
	function f0() override(I3B, I3BBBBBBBBBBBBBB)
	external view returns (uint);
}
contract C {
	using L2 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1957747793)
			return 1;
		return 0;
	}
}
