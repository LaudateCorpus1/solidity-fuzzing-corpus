pragma solidity >=0.0;
interface C0BBBBBBBB {
	function f0() external view returns (uint);
}
interface C0BBBBBBB is C0BBBBBBBB {
}
interface C0BBBBBB is C0BBBBBBB {
}
interface C0BBBBB is C0BBBBBB {
}
interface C0BBBB is C0BBBBB {
}
interface C0BBB is C0BBBB {
	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface C0BB is C0BBB {
}
contract C0B is C0BB {
	function f0() external view
	override
	returns (uint)
	{
		return 1426772249;
	}
	function f1() external payable
	override
	returns (uint)
	{
		return 1508462820;
	}
}
contract C0 is C0B {
}
interface C1BBB {
	function f0() external payable returns (uint);
}
interface C1BB is C1BBB {
	function f0() override
	external payable returns (uint);
}
interface C1B is C1BB {
}
abstract contract C1BBBBB {
}
contract C1BBBB is C1BB, C1BBBBB {
	function f0() virtual external payable
	override
	returns (uint)
	{
		return 2051906719;
	}
}
contract C1 is C1B, C1BBBB {
	function f0() external payable
	override(C1BBBB, C1BB)
	returns (uint)
	{
		return 727921237;
	}
}
interface I2BBBB {
	function f0() external view returns (uint);
}
interface I2BBB is I2BBBB {
	function f1() external payable returns (uint);
}
interface I2BBBBB is I2BBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() external payable returns (uint);
}
interface I2BB is I2BBB, I2BBBBB {
	function f0() override(I2BBBB, I2BBBBB)
	external view returns (uint);
	function f1() override(I2BBB, I2BBBBB)
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
}
interface I2B is I2BB {
	function f1() override
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() external payable returns (uint);
}
interface I2BBBBBBB {
	function f0() external view returns (uint);
}
interface I2BBBBBB is I2BB, I2BBBBBBB {
	function f0() override(I2BB, I2BBBBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() external payable returns (uint);
}
interface I2 is I2B, I2BBBBBB {
	function f0() override(I2BB, I2BBBBBB)
	external view returns (uint);
	function f1() override(I2B, I2BBBBBB)
	external payable returns (uint);
	function f2() override(I2B, I2BBBBBB)
	external payable returns (uint);
	function f3() override(I2B, I2BBBBBB)
	external payable returns (uint);
}
interface I3BB {
	function f0() external view returns (uint);
}
interface I3B is I3BB {
	function f1() external payable returns (uint);
}
interface I3BBBB {
	function f0() external view returns (uint);
}
interface I3BBB is I3BB, I3BBBB {
	function f0() override(I3BB, I3BBBB)
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I3BBBBBB {
	function f0() external view returns (uint);
}
interface I3BBBBBBB is I3BBBBBB {
}
interface I3BBBBB is I3BB, I3BBBBBB, I3BBBBBBB {
	function f0() override(I3BB, I3BBBBBB)
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I3 is I3B, I3BBB, I3BBBBB {
	function f0() override(I3BB, I3BBB, I3BBBBB)
	external view returns (uint);
	function f1() override(I3B, I3BBB, I3BBBBB)
	external payable returns (uint);
}
contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}
