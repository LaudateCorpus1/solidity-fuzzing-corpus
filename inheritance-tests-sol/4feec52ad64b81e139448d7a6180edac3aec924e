
pragma solidity >=0.0;


library L0 {

	function f0(uint) internal pure returns (uint)
	{
		return 1804289383;
	}
}




interface I1BBB {

	function f0() external view returns (uint);
}
interface I1BB is I1BBB {

	function f0() override
	external view returns (uint);
}
interface I1B is I1BB {

	function f0() override
	external view returns (uint);
}

interface I1BBBB is I1B {

	function f1() external payable returns (uint);
}

interface I1BBBBB is I1BB {

	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}




interface I1BBBBBBBBB {

	function f0() external view returns (uint);
}
interface I1BBBBBBBB is I1BBBBBBBBB {

}
interface I1BBBBBBB is I1BBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I1BBBBBB is I1BB, I1BBBBBBB {

	function f0() override(I1BB, I1BBBBBBB)
	external view returns (uint);
}




interface I1BBBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I1BBBBBBBBBBBB is I1BBBBBBBBBBBBB {

}
interface I1BBBBBBBBBBB is I1BBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I1BBBBBBBBBB is I1BB, I1BBBBBBBBBBB {

	function f0() override(I1BB, I1BBBBBBBBBBB)
	external view returns (uint);
}
interface I1 is I1B, I1BBBB, I1BBBBB, I1BBBBBB, I1BBBBBBBBBB {

	function f0() override(I1B, I1BBBBB, I1BBBBBB, I1BBBBBBBBBB)
	external view returns (uint);
	function f1() override(I1BBBB, I1BBBBB)
	external payable returns (uint);
	function f2() external view returns (uint);
}





interface I3BBBB {

	function f0() external payable returns (uint);
}
interface I3BBB is I3BBBB {

	function f0() override
	external payable returns (uint);
}
interface I3BB is I3BBB {

	function f0() override
	external payable returns (uint);
}
interface I3B is I3BB {

	function f1() external view returns (uint);
	function f2() external view returns (uint);
}
interface I3 is I3B {

	function f0() override
	external payable returns (uint);
	function f2() override
	external view returns (uint);
	function f3() external pure returns (uint);
}
library L4 {

	function f0(uint) external pure returns (uint)
	{
		return 424238335;
	}
}




interface I5BBB {

	function f0() external view returns (uint);
}
interface I5BB is I5BBB {

	function f0() override
	external view returns (uint);
}
interface I5B is I5BB {

}

interface I5BBBB is I5B {

	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}

interface I5BBBBB is I5B {

	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}




interface I5BBBBBBBBB {

	function f0() external view returns (uint);
}
interface I5BBBBBBBB is I5BBBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I5BBBBBBB is I5BBBBBBBB {

}
interface I5BBBBBB is I5B, I5BBBBBBB {

	function f0() override(I5BB, I5BBBBBBBB)
	external view returns (uint);
}




interface I5BBBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I5BBBBBBBBBBBB is I5BBBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I5BBBBBBBBBBB is I5BBBBBBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I5BBBBBBBBBB is I5B, I5BBBBBBBBBBB {

	function f0() override(I5BB, I5BBBBBBBBBBB)
	external view returns (uint);
}
interface I5 is I5B, I5BBBB, I5BBBBB, I5BBBBBB, I5BBBBBBBBBB {

	function f0() override(I5BB, I5BBBB, I5BBBBB, I5BBBBBB, I5BBBBBBBBBB)
	external view returns (uint);
	function f1() override(I5BBBB, I5BBBBB)
	external payable returns (uint);
	function f2() external view returns (uint);
}
library L6 {

	function f0(uint) internal pure returns (uint)
	{
		return 1025202362;
	}
}



interface I7BB {

	function f0() external view returns (uint);
}
interface I7B is I7BB {

	function f1() external payable returns (uint);
}
interface I7 is I7B {

	function f1() override
	external payable returns (uint);
}


interface I8B {

	function f0() external view returns (uint);
}
interface I8 is I8B {

}




interface I9BBB {

	function f0() external view returns (uint);
}
interface I9BB is I9BBB {

}
interface I9B is I9BB {

}

interface I9BBBB is I9BB {

	function f1() external pure returns (uint);
}

interface I9BBBBB is I9BBBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external pure returns (uint);
	function f2() external payable returns (uint);
}




interface I9BBBBBBBBB {

	function f0() external view returns (uint);
}
interface I9BBBBBBBB is I9BBBBBBBBB {

}
interface I9BBBBBBB is I9BBBBBBBB {

	function f0() override
	external view returns (uint);
}
interface I9BBBBBB is I9BB, I9BBBBBBB {

	function f0() override(I9BBB, I9BBBBBBB)
	external view returns (uint);
}




interface I9BBBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I9BBBBBBBBBBBB is I9BBBBBBBBBBBBB {

}
interface I9BBBBBBBBBBB is I9BBBBBBBBBBBB {

}
interface I9BBBBBBBBBB is I9BB, I9BBBBBBBBBBB {

	function f0() override(I9BBB, I9BBBBBBBBBBBBB)
	external view returns (uint);
}
interface I9 is I9B, I9BBBB, I9BBBBB, I9BBBBBB, I9BBBBBBBBBB {

	function f0() override(I9BBB, I9BBBBB, I9BBBBBB, I9BBBBBBBBBB)
	external view returns (uint);
	function f1() override(I9BBBB, I9BBBBB)
	external pure returns (uint);
	function f3() external view returns (uint);
}



interface I10BB {

	function f0() external payable returns (uint);
}
interface I10B is I10BB {

	function f0() override
	external payable returns (uint);
}


interface I10BBBB {

}
interface I10BBB is I10B, I10BBBB {

	function f0() override
	external payable returns (uint);
}
interface I10 is I10B, I10BBB {

	function f0() override(I10B, I10BBB)
	external payable returns (uint);
}


interface I11B {

	function f0() external view returns (uint);
}
interface I11 is I11B {

}


interface I12B {

	function f0() external view returns (uint);
}
interface I12 is I12B {

	function f0() override
	external view returns (uint);
}


contract C13B {

	function f0() public view
	
	returns (uint)
	{
		return 439916939;
	}
}
contract C13 is C13B {

}


contract C {
	function test() public returns (uint)
	{
			C13 tc0 = new C13();
			if (tc0.f0() != 439916939)
				return 1;
			C13B tc1 = new C13B();
			if (tc1.f0() != 439916939)
				return 2;
			return 0;
	}
}

