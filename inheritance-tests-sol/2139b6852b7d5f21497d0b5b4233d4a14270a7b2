pragma solidity >=0.0;
interface I0B {
	function f0() external view returns (uint);
}
interface I0 is I0B {
}
interface I1BBBBBBB {
	function f0() external payable returns (uint);
}
interface I1BBBBBB is I1BBBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() external view returns (uint);
}
interface I1BBBBB is I1BBBBBB {
}
interface I1BBBBBBBBB {
}
interface I1BBBBBBBB is I1BBBBBB, I1BBBBBBBBB {
}
interface I1BBBB is I1BBBBB, I1BBBBBBBB {
}
interface I1BBB is I1BBBB {
}
interface I1BB is I1BBB {
}
interface I1BBBBBBBBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I1BBBBBBBBBBBBBB is I1BBBBBBBBBBBBBBB {
}
interface I1BBBBBBBBBBBBB is I1BBBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I1BBBBBBBBBBBB is I1BBBBBBBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I1BBBBBBBBBBB is I1BBBBBBBBBBBB {
}
interface I1BBBBBBBBBB is I1BB, I1BBBBBBBBBBB {
	function f0() override(I1BBBBBB, I1BBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override
	external view returns (uint);
}
interface I1B is I1BB, I1BBBBBBBBBB {
	function f0() override(I1BBBBBB, I1BBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I1BBBBBB, I1BBBBBBBBBB)
	external view returns (uint);
}
interface I1 is I1B {
	function f2() external pure returns (uint);
}
interface I2BBBBB {
}
interface I2BBBB is I2BBBBB {
}
interface I2BBB is I2BBBB {
}
interface I2BBBBBBBBB {
}
interface I2BBBBBBBB is I2BBBBBBBBB {
	function f0() external view returns (uint);
}
interface I2BBBBBBB is I2BBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface I2BBBBBB is I2BBBB, I2BBBBBBB {
	function f0() override
	external view returns (uint);
}
interface I2BB is I2BBB, I2BBBBBB {
	function f1() external payable returns (uint);
}
interface I2B is I2BB {
	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I2 is I2B {
	function f1() override
	external payable returns (uint);
}
interface I3BBBB {
	function f0() external payable returns (uint);
}
interface I3BBB is I3BBBB {
}
interface I3BB is I3BBB {
	function f0() override
	external payable returns (uint);
	function f1() external view returns (uint);
}
interface I3B is I3BB {
	function f0() override
	external payable returns (uint);
}
interface I3BBBBBBBBB {
	function f0() external payable returns (uint);
}
interface I3BBBBBBBB is I3BBBBBBBBB {
}
interface I3BBBBBBB is I3BBBBBBBB {
	function f0() override
	external payable returns (uint);
}
interface I3BBBBBBBBBB is I3BBBBBBBB {
	function f0() override
	external payable returns (uint);
	function f1() external view returns (uint);
}
interface I3BBBBBB is I3BBBBBBB, I3BBBBBBBBBB {
	function f0() override(I3BBBBBBB, I3BBBBBBBBBB)
	external payable returns (uint);
	function f2() external pure returns (uint);
}
interface I3BBBBB is I3BB, I3BBBBBB {
	function f0() override(I3BB, I3BBBBBB)
	external payable returns (uint);
	function f1() override(I3BB, I3BBBBBBBBBB)
	external view returns (uint);
	function f2() override
	external pure returns (uint);
}
interface I3 is I3B, I3BBBBB {
	function f0() override(I3B, I3BBBBB)
	external payable returns (uint);
	function f1() override(I3BB, I3BBBBB)
	external view returns (uint);
	function f3() external view returns (uint);
}
interface I4BBBBBB {
}
interface I4BBBBB is I4BBBBBB {
}
interface I4BBBB is I4BBBBB {
}
interface I4BBBBBBBB {
}
interface I4BBBBBBBBBBBB {
}
interface I4BBBBBBBBBBB is I4BBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I4BBBBBBBBBB is I4BBBBBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface I4BBBBBBBBB is I4BBBBBBBB, I4BBBBBBBBBB {
}
interface I4BBBBBBB is I4BBBBB, I4BBBBBBBB, I4BBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I4BBB is I4BBBB, I4BBBBBBB {
	function f0() override
	external view returns (uint);
	function f2() external view returns (uint);
}
interface I4BB is I4BBB {
	function f0() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f3() external view returns (uint);
}
interface I4BBBBBBBBBBBBBBB {
}
interface I4BBBBBBBBBBBBBBBBBBB {
}
interface I4BBBBBBBBBBBBBBBBBB is I4BBBBBBBBBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I4BBBBBBBBBBBBBBBBB is I4BBBBBBBBBBBBBBBBBB {
}
interface I4BBBBBBBBBBBBBBBB is I4BBBBBBBBBBBBBBB, I4BBBBBBBBBBBBBBBBB {
}
interface I4BBBBBBBBBBBBBB is I4BBBBBBBBBBBBBBB, I4BBBBBBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I4BBBBBBBBBBBBB is I4BB, I4BBBBBBBBBBBBBB {
	function f0() override(I4BB, I4BBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I4BBBBBBB, I4BBBBBBBBBBBBBB)
	external payable returns (uint);
	function f4() external view returns (uint);
}
interface I4B is I4BB, I4BBBBBBBBBBBBB {
	function f0() override(I4BB, I4BBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I4BBBBBBB, I4BBBBBBBBBBBBB)
	external payable returns (uint);
	function f2() override
	external view returns (uint);
	function f4() override
	external view returns (uint);
}
interface I4BBBBBBBBBBBBBBBBBBBBBBB {
}
interface I4BBBBBBBBBBBBBBBBBBBBBB is I4BBBBBBBBBBBBBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I4BBBBBBBBBBBBBBBBBBBBB is I4BBBBBBBBBBBBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface I4BBBBBBBBBBBBBBBBBBBB is I4BB, I4BBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I4BB, I4BBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
}
interface I4BBBBBBBBBBBBBBBBBBBBBBBBBBB {
}
interface I4BBBBBBBBBBBBBBBBBBBBBBBBBB is I4BBBBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I4BBBBBBBBBBBBBBBBBBBBBBBBB is I4BBBBBBBBBBBBBBBBBBBBBBBBBB {
}
interface I4BBBBBBBBBBBBBBBBBBBBBBBB is I4BBBBBBBBBBBBBBBBBBBB, I4BBBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I4BBBBBBBBBBBBBBBBBBBB, I4BBBBBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f3() override
	external view returns (uint);
}
interface I4 is I4B, I4BBBBBBBBBBBBBBBBBBBB, I4BBBBBBBBBBBBBBBBBBBBBBBB {
	function f0() override(I4B, I4BBBBBBBBBBBBBBBBBBBB, I4BBBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I4B, I4BBBBBBB)
	external payable returns (uint);
	function f2() override(I4B, I4BBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f3() override(I4BB, I4BBBBBBBBBBBBBBBBBBBB, I4BBBBBBBBBBBBBBBBBBBBBBBB)
	external view returns (uint);
	function f5() external payable returns (uint);
}
library L5 {
	function f0(uint) public view returns (uint)
	{
		return 1350490027;
	}
}
interface I6 {
	function f0() external view returns (uint);
}
contract C {
	using L5 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1350490027)
			return 1;
		return 0;
	}
}
