
pragma solidity >=0.0;




interface I1B {

	function f0() external pure returns (uint);
}
interface I1 is I1B {

	function f0() override
	external pure returns (uint);
}

interface I2 {

	function f0() external payable returns (uint);
}


contract C3B {

}
contract C3 is C3B {

	function f0() public view
	
	returns (uint)
	{
		return 1847580730;
	}
}


contract C4B {

}
contract C4 is C4B {

	function f0() public view
	
	returns (uint)
	{
		return 1721041567;
	}
}

contract C5 {

	function f0() public view
	
	returns (uint)
	{
		return 992596462;
	}
}



interface I7BB {

	function f0() external view returns (uint);
}
interface I7B is I7BB {

	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I7 is I7B {

	function f1() override
	external payable returns (uint);
}

contract C8 {

	function f0() public view
	
	returns (uint)
	{
		return 180753275;
	}
}



interface I9BB {

	function f0() external view returns (uint);
}
interface I9B is I9BB {

	function f1() external payable returns (uint);
}
interface I9 is I9B {

	function f0() override
	external view returns (uint);
}

contract C10 {

	function f0() virtual internal pure
	
	returns (uint)
	{
		return 399257814;
	}
	function f1() external pure
	
	returns (uint)
	{
		return 1055691416;
	}
	function f2() external pure
	
	returns (uint)
	{
		return 1640882073;
	}
}



abstract contract C11BB {

}
contract C11B is C11BB {

}

interface C11BBB {

	function f0() external payable returns (uint);
}
contract C11 is C11B, C11BBB {

	function f0() external payable
	override
	returns (uint)
	{
		return 1325416955;
	}
	function f1() virtual public pure
	
	returns (uint)
	{
		return 1369023381;
	}
}


contract C12B {

}
contract C12 is C12B {

	function f0() public view
	
	returns (uint)
	{
		return 1760838767;
	}
	function f1() virtual public pure
	
	returns (uint)
	{
		return 45373597;
	}
}



abstract contract C13BB {

}


interface C13BBBB {

	function f0() external view returns (uint);
}
interface C13BBB is C13BBBB {

	function f0() override
	external view returns (uint);
}
contract C13B is C13BB, C13BBB {

	function f0() virtual external view
	override
	returns (uint)
	{
		return 1646411619;
	}
}
contract C13 is C13B {

	function f0() virtual external view
	override
	returns (uint)
	{
		return 447122901;
	}
}

contract C15 {

	function f0() virtual public pure
	
	returns (uint)
	{
		return 1082575774;
	}
}


interface I16B {

	function f0() external pure returns (uint);
}
interface I16 is I16B {

	function f0() override
	external pure returns (uint);
}
library L17 {

	function f0(uint) external pure returns (uint)
	{
		return 1714636915;
	}
}


contract C18B {

}
contract C18 is C18B {

	function f0() public view
	
	returns (uint)
	{
		return 318729750;
	}
}



interface I19BB {

	function f0() external view returns (uint);
}
interface I19B is I19BB {

	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I19 is I19B {

}
library L20 {

	function f0(uint) external pure returns (uint)
	{
		return 1957747793;
	}
}


contract C {
	function test() public returns (uint)
	{
			C10 tc0 = new C10();
			if (tc0.f1() != 1055691416)
				return 1;
			if (tc0.f2() != 1640882073)
				return 2;
			C11 tc1 = new C11();
			if (tc1.f0() != 1325416955)
				return 3;
			if (tc1.f1() != 1369023381)
				return 4;
			C12 tc2 = new C12();
			if (tc2.f0() != 1760838767)
				return 5;
			if (tc2.f1() != 45373597)
				return 6;
			C13 tc3 = new C13();
			if (tc3.f0() != 447122901)
				return 7;
			C13B tc4 = new C13B();
			if (tc4.f0() != 1646411619)
				return 8;
			C15 tc5 = new C15();
			if (tc5.f0() != 1082575774)
				return 9;
			C18 tc6 = new C18();
			if (tc6.f0() != 318729750)
				return 10;
			C3 tc7 = new C3();
			if (tc7.f0() != 1847580730)
				return 11;
			C4 tc8 = new C4();
			if (tc8.f0() != 1721041567)
				return 12;
			C5 tc9 = new C5();
			if (tc9.f0() != 992596462)
				return 13;
			C8 tc10 = new C8();
			if (tc10.f0() != 180753275)
				return 14;
			return 0;
	}
}

