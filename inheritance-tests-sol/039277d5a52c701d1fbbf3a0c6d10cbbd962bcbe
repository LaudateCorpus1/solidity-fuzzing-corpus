
pragma solidity >=0.0;




interface I0B {

	function f0() external payable returns (uint);
}




interface I0BBBBB {

	function f0() external payable returns (uint);
}
interface I0BBBB is I0BBBBB {

}
interface I0BBB is I0BBBB {

	function f0() override
	external payable returns (uint);
}
interface I0BB is I0B, I0BBB {

	function f0() override(I0B, I0BBB)
	external payable returns (uint);
}
interface I0 is I0B, I0BB {

	function f0() override(I0B, I0BB)
	external payable returns (uint);
}


interface I1B {

	function f0() external payable returns (uint);
}




interface I1BBBBB {

	function f0() external payable returns (uint);
}
interface I1BBBB is I1BBBBB {

}
interface I1BBB is I1BBBB {

}
interface I1BB is I1B, I1BBB {

	function f0() override(I1B, I1BBBBB)
	external payable returns (uint);
}
interface I1 is I1B, I1BB {

	function f0() override(I1B, I1BB)
	external payable returns (uint);
}





interface I2BBBB {

	function f0() external payable returns (uint);
}
interface I2BBB is I2BBBB {

}
interface I2BB is I2BBB {

}






interface I2BBBBBBBBBB {

	function f0() external payable returns (uint);
}
interface I2BBBBBBBBB is I2BBBBBBBBBB {

}
interface I2BBBBBBBB is I2BBBBBBBBB {

}
interface I2BBBBBBB is I2BBBBBBBB {

	function f1() external view returns (uint);
}


interface I2BBBBBBBBBBBB {

	function f0() external payable returns (uint);
}
interface I2BBBBBBBBBBB is I2BBBBBBBB, I2BBBBBBBBBBBB {

	function f0() override(I2BBBBBBBBBB, I2BBBBBBBBBBBB)
	external payable returns (uint);
}
interface I2BBBBBB is I2BBBBBBB, I2BBBBBBBBBBB {

	function f0() override(I2BBBBBBBBBB, I2BBBBBBBBBBB)
	external payable returns (uint);
}
interface I2BBBBB is I2BBB, I2BBBBBB {

	function f0() override(I2BBBB, I2BBBBBB)
	external payable returns (uint);
}
interface I2B is I2BB, I2BBBBB {

	function f0() override(I2BBBB, I2BBBBB)
	external payable returns (uint);
	function f1() override
	external view returns (uint);
}
interface I2 is I2B {

	function f0() override
	external payable returns (uint);
}
library L3 {

	function f0(uint) public view returns (uint)
	{
		return 1957747793;
	}
}





interface I4BBBB {

	function f0() external payable returns (uint);
}
interface I4BBB is I4BBBB {

}
interface I4BB is I4BBB {

}






interface I4BBBBBBBBBB {

	function f0() external payable returns (uint);
}
interface I4BBBBBBBBB is I4BBBBBBBBBB {

	function f0() override
	external payable returns (uint);
}
interface I4BBBBBBBB is I4BBBBBBBBB {

	function f0() override
	external payable returns (uint);
}
interface I4BBBBBBB is I4BBBBBBBB {

	function f1() external view returns (uint);
}


interface I4BBBBBBBBBBBB {

	function f0() external payable returns (uint);
}
interface I4BBBBBBBBBBB is I4BBBBBBB, I4BBBBBBBBBBBB {

	function f0() override(I4BBBBBBBB, I4BBBBBBBBBBBB)
	external payable returns (uint);
	function f1() override
	external view returns (uint);
}
interface I4BBBBBB is I4BBBBBBB, I4BBBBBBBBBBB {

	function f0() override(I4BBBBBBBB, I4BBBBBBBBBBB)
	external payable returns (uint);
	function f1() override(I4BBBBBBB, I4BBBBBBBBBBB)
	external view returns (uint);
}
interface I4BBBBB is I4BBB, I4BBBBBB {

	function f0() override(I4BBBB, I4BBBBBB)
	external payable returns (uint);
}
interface I4B is I4BB, I4BBBBB {

	function f0() override(I4BBBB, I4BBBBB)
	external payable returns (uint);
}
interface I4 is I4B {

	function f0() override
	external payable returns (uint);
}
library L5 {

	function f0(uint) public view returns (uint)
	{
		return 1649760492;
	}
}


contract C {
	using L5 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1649760492)
			return 1;
		return 0;
	}
}

