
pragma solidity >=0.0;


library L0 {

	function f0(uint) public view returns (uint)
	{
		return 1804289383;
	}
}

interface I1 {

	function f0() external pure returns (uint);
}
library L2 {

	function f0(uint) private pure returns (uint)
	{
		return 846930886;
	}
}













interface I4BBBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I4BBBBBBBBBBB is I4BBBBBBBBBBBB {

	function f1() external view returns (uint);
}
interface I4BBBBBBBBBB is I4BBBBBBBBBBB {

}
interface I4BBBBBBBBB is I4BBBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f2() external payable returns (uint);
}
interface I4BBBBBBBB is I4BBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
}
interface I4BBBBBBB is I4BBBBBBBB {

	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
}
interface I4BBBBBB is I4BBBBBBB {

	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
}
interface I4BBBBB is I4BBBBBB {

	function f1() override
	external view returns (uint);
	function f3() external view returns (uint);
}
interface I4BBBB is I4BBBBB {

	function f1() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
}
interface I4BBB is I4BBBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f4() external payable returns (uint);
}
interface I4BB is I4BBB {

	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
}
interface I4B is I4BB {

	function f2() override
	external payable returns (uint);
	function f4() override
	external payable returns (uint);
}
interface I4 is I4B {

	function f0() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f4() override
	external payable returns (uint);
}
library L5 {

	function f0(uint) public view returns (uint)
	{
		return 1681692777;
	}
}








interface I6BBBBBBB {

}




interface I6BBBBBBBBBBB {

	function f0() external view returns (uint);
}
interface I6BBBBBBBBBB is I6BBBBBBBBBBB {

}

interface I6BBBBBBBBBBBB is I6BBBBBBBBBBB {

	function f1() external payable returns (uint);
}
interface I6BBBBBBBBB is I6BBBBBBBBBB, I6BBBBBBBBBBBB {

	function f1() override
	external payable returns (uint);
	function f2() external payable returns (uint);
	function f3() external view returns (uint);
}
interface I6BBBBBBBB is I6BBBBBBB, I6BBBBBBBBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I6BBBBBB is I6BBBBBBB, I6BBBBBBBB {

	function f4() external pure returns (uint);
}
interface I6BBBBB is I6BBBBBB {

	function f1() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f5() external payable returns (uint);
}
interface I6BBBB is I6BBBBB {

	function f0() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f5() override
	external payable returns (uint);
}

interface I6BBBBBBBBBBBBB is I6BBBBB {

	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
	function f4() override
	external pure returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() external payable returns (uint);
}
interface I6BBB is I6BBBB, I6BBBBBBBBBBBBB {

	function f0() override(I6BBBB, I6BBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override(I6BBBBB, I6BBBBBBBBBBBBB)
	external payable returns (uint);
	function f2() override(I6BBBB, I6BBBBBBBBBBBBB)
	external payable returns (uint);
	function f4() override(I6BBBBBB, I6BBBBBBBBBBBBB)
	external pure returns (uint);
	function f5() override(I6BBBB, I6BBBBBBBBBBBBB)
	external payable returns (uint);
	function f6() override
	external payable returns (uint);
	function f7() external view returns (uint);
}
interface I6BB is I6BBB {

	function f2() override
	external payable returns (uint);
	function f4() override
	external pure returns (uint);
	function f5() override
	external payable returns (uint);
	function f7() override
	external view returns (uint);
}
interface I6B is I6BB {

	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f6() override
	external payable returns (uint);
	function f7() override
	external view returns (uint);
}
interface I6 is I6B {

	function f1() override
	external payable returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external pure returns (uint);
	function f5() override
	external payable returns (uint);
	function f7() override
	external view returns (uint);
}




interface I7BBB {

	function f0() external view returns (uint);
}
interface I7BB is I7BBB {

}
interface I7B is I7BB {

}
interface I7 is I7B {

	function f1() external view returns (uint);
}
library L8 {

	function f0(uint) internal pure returns (uint)
	{
		return 719885386;
	}
}


contract C {
	using L0 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1804289383)
			return 1;
		return 0;
	}
}

