pragma solidity >=0.0;
interface I0BBBB {
	function f0() external view returns (uint);
}
interface I0BBBBB is I0BBBB {
	function f1() external view returns (uint);
}
interface I0BBB is I0BBBB, I0BBBBB {
	function f0() override
	external view returns (uint);
}
interface I0BB is I0BBB {
}
interface I0BBBBBBB {
	function f0() external view returns (uint);
}
interface I0BBBBBB is I0BB, I0BBBBBBB {
	function f0() override(I0BBB, I0BBBBBBB)
	external view returns (uint);
}
interface I0B is I0BB, I0BBBBBB {
	function f0() override(I0BBB, I0BBBBBB)
	external view returns (uint);
}
interface I0BBBBBBBB is I0BBBBBB {
}
interface I0BBBBBBBBB is I0BBBBBB {
	function f2() external view returns (uint);
	function f3() external payable returns (uint);
	function f4() external payable returns (uint);
}
interface I0 is I0B, I0BBBBBBBB, I0BBBBBBBBB {
	function f0() override(I0B, I0BBBBBB)
	external view returns (uint);
	function f3() override
	external payable returns (uint);
}
interface I1B {
	function f0() external view returns (uint);
}
interface I1BBB {
	function f0() external view returns (uint);
}
interface I1BB is I1B, I1BBB {
	function f0() override(I1B, I1BBB)
	external view returns (uint);
	function f1() external pure returns (uint);
}
interface I1 is I1B, I1BB {
	function f0() override(I1B, I1BB)
	external view returns (uint);
}
interface I3BBBBB {
	function f0() external view returns (uint);
}
interface I3BBBBBB is I3BBBBB {
	function f1() external view returns (uint);
}
interface I3BBBB is I3BBBBB, I3BBBBBB {
	function f1() override
	external view returns (uint);
}
interface I3BBB is I3BBBB {
}
interface I3BB is I3BBB {
}
interface I3BBBBBBBB {
	function f0() external view returns (uint);
}
interface I3BBBBBBB is I3BB, I3BBBBBBBB {
	function f0() override(I3BBBBB, I3BBBBBBBB)
	external view returns (uint);
}
interface I3B is I3BB, I3BBBBBBB {
	function f0() override(I3BBBBB, I3BBBBBBB)
	external view returns (uint);
}
interface I3BBBBBBBBB is I3BB {
}
interface I3 is I3B, I3BBBBBBBBB {
	function f0() override(I3B, I3BBBBB)
	external view returns (uint);
}
interface I4BB {
	function f0() external payable returns (uint);
}
interface I4B is I4BB {
	function f0() override
	external payable returns (uint);
}
interface I4 is I4B {
	function f1() external pure returns (uint);
}
contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}
