pragma solidity >=0.0;
interface I0B {
	function f0() external pure returns (uint);
}
interface I0 is I0B {
	function f0() override
	external pure returns (uint);
}
library L1 {
	function f0(uint) private pure returns (uint)
	{
		return 1804289383;
	}
	function f1(uint) external pure returns (uint)
	{
		return 846930886;
	}
}
interface I2BBBBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I2BBBBBBBBBBB is I2BBBBBBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface I2BBBBBBBBBB is I2BBBBBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface I2BBBBBBBBB is I2BBBBBBBBBB {
	function f0() override
	external view returns (uint);
}
interface I2BBBBBBBBBBBBB is I2BBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I2BBBBBBBB is I2BBBBBBBBB, I2BBBBBBBBBBBBB {
	function f0() override(I2BBBBBBBBB, I2BBBBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f2() external payable returns (uint);
	function f3() external view returns (uint);
}
interface I2BBBBBBB is I2BBBBBBBB {
	function f2() override
	external payable returns (uint);
}
interface I2BBBBBB is I2BBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
}
interface I2BBBBB is I2BBBBBB {
	function f1() override
	external payable returns (uint);
}
interface I2BBBB is I2BBBBB {
	function f1() override
	external payable returns (uint);
}
interface I2BBBBBBBBBBBBBB is I2BBBBB {
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f4() external payable returns (uint);
}
interface I2BBB is I2BBBB, I2BBBBBBBBBBBBBB {
	function f1() override(I2BBBB, I2BBBBB)
	external payable returns (uint);
	function f2() override(I2BBBBBBB, I2BBBBBBBBBBBBBB)
	external payable returns (uint);
	function f3() override(I2BBBBBB, I2BBBBBBBBBBBBBB)
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() external view returns (uint);
}
interface I2BB is I2BBB {
	function f1() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
}
interface I2B is I2BB {
	function f0() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override
	external view returns (uint);
}
interface I2 is I2B {
	function f0() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
}
interface I3BBBBBBBBB {
	function f0() external view returns (uint);
}
interface I3BBBBBBBBBB is I3BBBBBBBBB {
	function f1() external view returns (uint);
}
interface I3BBBBBBBB is I3BBBBBBBBB, I3BBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f2() external payable returns (uint);
	function f3() external view returns (uint);
}
interface I3BBBBBBB is I3BBBBBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
}
interface I3BBBBBB is I3BBBBBBB {
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
}
interface I3BBBBB is I3BBBBBB {
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f4() external payable returns (uint);
}
interface I3BBBB is I3BBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f4() override
	external payable returns (uint);
}
interface I3BBBBBBBBBBB is I3BBBBB {
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() external payable returns (uint);
}
interface I3BBB is I3BBBB, I3BBBBBBBBBBB {
	function f0() override(I3BBBB, I3BBBBBBB)
	external view returns (uint);
	function f1() override(I3BBBB, I3BBBBBBBBBBB)
	external view returns (uint);
	function f2() override(I3BBBB, I3BBBBBBBBBBB)
	external payable returns (uint);
	function f3() override(I3BBBBB, I3BBBBBBBBBBB)
	external view returns (uint);
	function f4() override(I3BBBB, I3BBBBBBBBBBB)
	external payable returns (uint);
	function f6() external view returns (uint);
	function f7() external payable returns (uint);
	function f8() external view returns (uint);
	function f9() external payable returns (uint);
}
interface I3BB is I3BBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override
	external view returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() override
	external view returns (uint);
	function f8() override
	external view returns (uint);
}
interface I3B is I3BB {
	function f0() override
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() override
	external view returns (uint);
	function f8() override
	external view returns (uint);
	function f9() override
	external payable returns (uint);
}
interface I3BBBBBBBBBBBB is I3B {
	function f0() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f7() override
	external payable returns (uint);
	function f8() override
	external view returns (uint);
	function f9() override
	external payable returns (uint);
	function f10() external payable returns (uint);
}
interface I3BBBBBBBBBBBBB is I3B {
	function f4() override
	external payable returns (uint);
	function f7() override
	external payable returns (uint);
	function f9() override
	external payable returns (uint);
	function f10() external payable returns (uint);
}
interface I3 is I3B, I3BBBBBBBBBBBB, I3BBBBBBBBBBBBB {
	function f0() override(I3B, I3BBBBBBBBBBBB)
	external view returns (uint);
	function f2() override
	external payable returns (uint);
	function f3() override(I3BB, I3BBBBBBBBBBBB)
	external view returns (uint);
	function f4() override(I3B, I3BBBBBBBBBBBB, I3BBBBBBBBBBBBB)
	external payable returns (uint);
	function f5() override
	external payable returns (uint);
	function f6() override
	external view returns (uint);
	function f7() override(I3BBB, I3BBBBBBBBBBBB, I3BBBBBBBBBBBBB)
	external payable returns (uint);
	function f8() override(I3B, I3BBBBBBBBBBBB)
	external view returns (uint);
	function f9() override(I3B, I3BBBBBBBBBBBB, I3BBBBBBBBBBBBB)
	external payable returns (uint);
	function f10() override(I3BBBBBBBBBBBB, I3BBBBBBBBBBBBB)
	external payable returns (uint);
	function f11() external payable returns (uint);
	function f12() external payable returns (uint);
}
contract C {
	using L1 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f1() != 846930886)
			return 1;
		return 0;
	}
}
