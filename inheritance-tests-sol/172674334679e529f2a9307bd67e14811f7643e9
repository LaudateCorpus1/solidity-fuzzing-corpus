
pragma solidity >=0.0;



interface I0 {

	function f0() external payable returns (uint);
}



interface I1BB {

}
interface I1B is I1BB {

	function f0() external view returns (uint);
}
interface I1 is I1B {

	function f0() override
	external view returns (uint);
}











interface C2BBBBBBBBBB {

	function f0() external payable returns (uint);
}
interface C2BBBBBBBBB is C2BBBBBBBBBB {

	function f0() override
	external payable returns (uint);
	function f1() external payable returns (uint);
	function f2() external pure returns (uint);
}
interface C2BBBBBBBB is C2BBBBBBBBB {

}
interface C2BBBBBBB is C2BBBBBBBB {

	function f3() external view returns (uint);
	function f4() external view returns (uint);
}
interface C2BBBBBB is C2BBBBBBB {

}

interface C2BBBBBBBBBBB is C2BBBBBBB {

	function f2() override
	external pure returns (uint);
	function f4() override
	external view returns (uint);
	function f5() external view returns (uint);
}
interface C2BBBBB is C2BBBBBB, C2BBBBBBBBBBB {

	function f1() override
	external payable returns (uint);
	function f2() override(C2BBBBBBBBB, C2BBBBBBBBBBB)
	external pure returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override(C2BBBBBBB, C2BBBBBBBBBBB)
	external view returns (uint);
	function f5() override
	external view returns (uint);
}
contract C2BBBB is C2BBBBB {

	function f0() external payable
	override
	returns (uint)
	{
		return 2010567813;
	}
	function f1() virtual external payable
	override
	returns (uint)
	{
		return 662405787;
	}
	function f2() virtual external pure
	override
	returns (uint)
	{
		return 849178936;
	}
	function f3() external view
	override
	returns (uint)
	{
		return 1479919876;
	}
	function f4() external view
	override
	returns (uint)
	{
		return 1272185027;
	}
	function f5() external view
	override
	returns (uint)
	{
		return 1308858262;
	}
}
contract C2BBB is C2BBBB {

}
contract C2BB is C2BBB {

}
contract C2B is C2BB {

	function f2() external pure
	override
	returns (uint)
	{
		return 389431516;
	}
}

abstract contract C2BBBBBBBBBBBB is C2B {

}
contract C2 is C2B, C2BBBBBBBBBBBB {

}



contract C4BB {

	function f0() public view
	
	returns (uint)
	{
		return 1951824771;
	}
}
contract C4B is C4BB {

	function f1() virtual public pure
	
	returns (uint)
	{
		return 2130959757;
	}
}
abstract contract C4 is C4B {

	function f2() virtual public pure
	
	returns (uint);
}


contract C {
	function test() public returns (uint)
	{
		return 0;
	}
}

