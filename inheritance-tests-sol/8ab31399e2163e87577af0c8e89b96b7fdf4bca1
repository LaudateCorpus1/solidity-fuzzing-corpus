pragma solidity >=0.0;
interface I1BB {
	function f0() external view returns (uint);
}
interface I1B is I1BB {
	function f0() override
	external view returns (uint);
	function f1() external payable returns (uint);
}
interface I1 is I1B {
	function f0() override
	external view returns (uint);
}
contract C2 {
	function f0() public pure
	
	returns (uint)
	{
		return 1209596830;
	}
}
interface I3BBB {
	function f0() external payable returns (uint);
}
interface I3BB is I3BBB {
	function f1() external payable returns (uint);
}
interface I3B is I3BB {
	function f1() override
	external payable returns (uint);
	function f2() external view returns (uint);
}
interface I3BBBBB {
	function f0() external payable returns (uint);
}
interface I3BBBB is I3BB, I3BBBBB {
	function f0() override(I3BBB, I3BBBBB)
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I3 is I3B, I3BBBB {
	function f0() override(I3BBB, I3BBBB)
	external payable returns (uint);
	function f1() override(I3B, I3BBBB)
	external payable returns (uint);
	function f2() override
	external view returns (uint);
}
contract C4 {
	function f0() public pure
	
	returns (uint)
	{
		return 678907322;
	}
}
library L5 {
	function f0(uint) public view returns (uint)
	{
		return 1714636915;
	}
}
contract C6 {
	function f0() public payable
	
	returns (uint)
	{
		return 711046324;
	}
}
interface I7BBB {
	function f0() external payable returns (uint);
}
interface I7BB is I7BBB {
	function f0() override
	external payable returns (uint);
	function f1() external payable returns (uint);
}
interface I7B is I7BB {
	function f2() external view returns (uint);
}
interface I7BBBBB {
	function f0() external payable returns (uint);
}
interface I7BBBB is I7BB, I7BBBBB {
	function f0() override(I7BB, I7BBBBB)
	external payable returns (uint);
	function f1() override
	external payable returns (uint);
}
interface I7 is I7B, I7BBBB {
	function f0() override(I7BB, I7BBBB)
	external payable returns (uint);
	function f1() override(I7BB, I7BBBB)
	external payable returns (uint);
}
library L8 {
	function f0(uint) internal pure returns (uint)
	{
		return 424238335;
	}
}
contract C9BBB {
	function f0() virtual public pure
	
	returns (uint)
	{
		return 1074542970;
	}
}
contract C9BB is C9BBB {
}
contract C9B is C9BB {
	function f0() public pure
	override
	returns (uint)
	{
		return 1766923652;
	}
}
contract C9 is C9B {
}
interface I10 {
	function f0() external view returns (uint);
}
interface I11 {
	function f0() external payable returns (uint);
}
interface I12BBBBBBBBBB {
	function f0() external view returns (uint);
}
interface I12BBBBBBBBB is I12BBBBBBBBBB {
	function f1() external view returns (uint);
	function f2() external view returns (uint);
}
interface I12BBBBBBBBBBB is I12BBBBBBBBB {
	function f2() override
	external view returns (uint);
	function f3() external view returns (uint);
}
interface I12BBBBBBBB is I12BBBBBBBBB, I12BBBBBBBBBBB {
	function f0() override
	external view returns (uint);
	function f2() override(I12BBBBBBBBB, I12BBBBBBBBBBB)
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() external payable returns (uint);
	function f5() external view returns (uint);
}
interface I12BBBBBBB is I12BBBBBBBB {
	function f0() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
}
interface I12BBBBBB is I12BBBBBBB {
	function f2() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f5() override
	external view returns (uint);
}
interface I12BBBBB is I12BBBBBB {
	function f0() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f5() override
	external view returns (uint);
	function f6() external payable returns (uint);
}
interface I12BBBB is I12BBBBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override
	external view returns (uint);
}
interface I12BBBBBBBBBBBB is I12BBBB {
	function f0() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override
	external view returns (uint);
	function f6() override
	external payable returns (uint);
	function f7() external payable returns (uint);
}
interface I12BBB is I12BBBB, I12BBBBBBBBBBBB {
	function f0() override(I12BBBB, I12BBBBBBBBBBBB)
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override(I12BBBB, I12BBBBBBBBBBBB)
	external payable returns (uint);
	function f5() override(I12BBBB, I12BBBBBBBBBBBB)
	external view returns (uint);
	function f6() override(I12BBBBB, I12BBBBBBBBBBBB)
	external payable returns (uint);
	function f8() external view returns (uint);
}
interface I12BB is I12BBB {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f6() override
	external payable returns (uint);
	function f7() override
	external payable returns (uint);
	function f8() override
	external view returns (uint);
}
interface I12B is I12BB {
	function f0() override
	external view returns (uint);
	function f1() override
	external view returns (uint);
	function f2() override
	external view returns (uint);
	function f5() override
	external view returns (uint);
	function f6() override
	external payable returns (uint);
	function f8() override
	external view returns (uint);
}
interface I12BBBBBBBBBBBBB is I12BB {
	function f2() override
	external view returns (uint);
	function f5() override
	external view returns (uint);
	function f6() override
	external payable returns (uint);
	function f8() override
	external view returns (uint);
	function f9() external payable returns (uint);
}
interface I12 is I12B, I12BBBBBBBBBBBBB {
	function f0() override(I12B, I12BB)
	external view returns (uint);
	function f1() override(I12B, I12BB)
	external view returns (uint);
	function f2() override(I12B, I12BBBBBBBBBBBBB)
	external view returns (uint);
	function f3() override
	external view returns (uint);
	function f4() override
	external payable returns (uint);
	function f5() override(I12B, I12BBBBBBBBBBBBB)
	external view returns (uint);
	function f6() override(I12B, I12BBBBBBBBBBBBB)
	external payable returns (uint);
	function f7() override
	external payable returns (uint);
	function f8() override(I12B, I12BBBBBBBBBBBBB)
	external view returns (uint);
}
contract C {
	function test() public returns (uint)
	{
			C2 tc0 = new C2();
			if (tc0.f0() != 1209596830)
				return 1;
			C4 tc1 = new C4();
			if (tc1.f0() != 678907322)
				return 2;
			C6 tc2 = new C6();
			if (tc2.f0() != 711046324)
				return 3;
			C9 tc3 = new C9();
			if (tc3.f0() != 1766923652)
				return 4;
			C9B tc4 = new C9B();
			if (tc4.f0() != 1766923652)
				return 5;
			C9BB tc5 = new C9BB();
			if (tc5.f0() != 1074542970)
				return 6;
			C9BBB tc6 = new C9BBB();
			if (tc6.f0() != 1074542970)
				return 7;
			return 0;
	}
}
