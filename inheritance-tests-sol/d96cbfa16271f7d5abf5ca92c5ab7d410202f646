
pragma solidity >=0.0;


library L0 {

	function f0(uint) external pure returns (uint)
	{
		return 1804289383;
	}
}

interface I1 {

	function f0() external view returns (uint);
}



interface C2BB {

	function f0() external view returns (uint);
}
interface C2B is C2BB {

	function f0() override
	external view returns (uint);
}


interface C2BBBB {

	function f0() external view returns (uint);
}
interface C2BBB is C2B, C2BBBB {

	function f0() override(C2B, C2BBBB)
	external view returns (uint);
	function f1() external view returns (uint);
	function f2() external payable returns (uint);
}
contract C2 is C2B, C2BBB {

	function f0() external view
	override(C2BBB, C2B)
	returns (uint)
	{
		return 407355683;
	}
	function f1() external view
	override
	returns (uint)
	{
		return 854716505;
	}
	function f2() external payable
	override
	returns (uint)
	{
		return 1596680831;
	}
}

interface I3 {

	function f0() external view returns (uint);
}



interface C4BB {

	function f0() external view returns (uint);
}
interface C4B is C4BB {

}


interface C4BBBB {

	function f0() external view returns (uint);
}
interface C4BBB is C4BB, C4BBBB {

	function f0() override(C4BB, C4BBBB)
	external view returns (uint);
	function f1() external view returns (uint);
	function f2() external payable returns (uint);
}
contract C4 is C4B, C4BBB {

	function f0() external view
	override(C4BBB, C4BB)
	returns (uint)
	{
		return 1271135913;
	}
	function f1() external view
	override
	returns (uint)
	{
		return 1882556969;
	}
	function f2() virtual external payable
	override
	returns (uint)
	{
		return 1559527823;
	}
}


contract C {
	using L0 for uint;
	function test() public returns (uint)
	{
		uint x;
		if (x.f0() != 1804289383)
			return 1;
		return 0;
	}
}

