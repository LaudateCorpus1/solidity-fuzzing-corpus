
	object "main" {
		code {
			codecopy(0, dataoffset("deployed"), datasize("deployed"))
			return(0, datasize("deployed"))
		}
		object "deployed" {
			code {
				{
{
let x_2, x_3, x_4, x_5 := foo_m_0(0x100000000000, 0x1000000000000, 0x10000000000000)
{
let x_11, x_12, x_13, x_14 := foo_m_0(0x100000000000000000000, 0x1000000000000000000000, 0x10000000000000000000000)
}
let x_20, x_21, x_22, x_23 := foo_m_0(0x100000000000000000000000000000, x_2, number())
let x_27, x_28, x_29, x_30 := foo_m_0(call(difficulty(), 0x1000000000000000000000000000000000000, 0x10000000000000000000000000000000000000, 0x100000000000000000000000000000000000000, 0x1000000000000000000000000000000000000000, 0x10000000000000000000000000000000000000000, 0x100000000000000000000000000000000000000000), 0x1000000000000000000000000000000000000000000, 0x10000000000000000000000000000000000000000000)
mstore(0x100000000000000000000000000000000000000000000, 0x1000000000000000000000000000000000000000000000)
let x_43, x_44, x_45, x_46 := foo_m_0(0x10000000000000000000000000000000000000000000000000000, 0x100000000000000000000000000000000000000000000000000000, 0x1000000000000000000000000000000000000000000000000000000)
function foo_m_0(x_51, x_52, x_53) -> x_54, x_55, x_56, x_57
{
function foo_m_59(x_60, x_61) -> x_62, x_63
{
let x_66, x_67 := foo_m_59(mulmod(0x1000000000000000000000000000000000000000000000000000001, 0x100000000000000000000000000000000000000000000000000001, add(0x10000000000000000000000000000000000000000000000000001,x_60)), 0x1000000000000000000000000000000000000000000000000001)
}
let x_73, x_74 := foo_m_59(calldataload(224),sload(288))
sstore(32, x_73)
sstore(96, x_74)
sstore(0x1000000000000000000000000000000000000001, mul(x_51,0x100000000000000000000000000000000000001))
}
let x_87, x_88, x_89, x_90 := foo_m_0(0x10000000000000000000000000000001, 0x1000000000000000000000000000001, not(0x100000000000000000000000000001))
let x_96, x_97, x_98, x_99 := foo_m_0(0x10000000000000000000001, 0x1000000000000000000001, 0x100000000000000000001)
}
}

			}
		}
	}
		