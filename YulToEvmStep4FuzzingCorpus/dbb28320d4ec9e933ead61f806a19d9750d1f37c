
	object "main" {
		code {
			codecopy(0, dataoffset("deployed"), datasize("deployed"))
			return(0, datasize("deployed"))
		}
		object "deployed" {
			code {
				{
{
let x_2, x_3, x_4, x_5 := foo_m_0(0x7fffffffffffffffffffff, 0x7ffffffffffffffffffffff, add(0x7fffffffffffffffffffffff,0x7ffffffffffffffffffffffff))
let x_12, x_13, x_14, x_15 := foo_m_0(x_2, 0x7fffffffffffffffffffffffffffffff, 0x7ffffffffffffffffffffffffffffffff)
{
}
let x_20, x_21, x_22, x_23 := foo_m_0(0x7fffffffffffffffffffffffffffffffffffffff, 0x7ffffffffffffffffffffffffffffffffffffffff, 0x7fffffffffffffffffffffffffffffffffffffffff)
let x_29, x_30, x_31, x_32 := foo_m_0(0x7ffffffffffffffffffffffffffffffffffffffffffffffff, 0x7fffffffffffffffffffffffffffffffffffffffffffffffff, 0x7ffffffffffffffffffffffffffffffffffffffffffffffffff)
mstore(0x7fffffffffffffffffffffffffffffffffffffffffffffffffff, 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffff)
let x_40, x_41, x_42, x_43 := foo_m_0(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, call(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, codesize(), 0x8, 0x80, 0x800))
function foo_m_0(x_53, x_54, x_55) -> x_56, x_57, x_58, x_59
{
let x_61 := 0x8000000000000
switch mload(0x80000000000000)
case 0x800000000000000 {}
case 0x8000000000000000 {
x_53 := 0x80000000000000000
}
case 0x800000000000000000 {
x_53 := 0x8000000000000000000
}
case 0x80000000000000000000 {
x_53 := 0x800000000000000000000
}
codecopy(x_53, 0x8000000000000000000000, 0x80000000000000000000000)
}
let x_74, x_75, x_76, x_77 := foo_m_0(0x800000000000000000000000000000, 0x8000000000000000000000000000000, 0x80000000000000000000000000000000)
let x_83, x_84, x_85, x_86 := foo_m_0(0x800000000000000000000000000000000000000, 0x8000000000000000000000000000000000000000, 0x80000000000000000000000000000000000000000)
}
}

			}
		}
	}
		