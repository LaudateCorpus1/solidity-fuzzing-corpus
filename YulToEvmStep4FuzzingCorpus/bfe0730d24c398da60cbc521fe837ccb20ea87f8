
	object "main" {
		code {
			codecopy(0, dataoffset("deployed"), datasize("deployed"))
			return(0, datasize("deployed"))
		}
		object "deployed" {
			code {
				{
{
for { let i_0 := 0 } lt(i_0, 0x60) { i_0 := add(i_0, 0x20) } {
let x_4, x_5, x_6, x_7 := foo_m_1(0x200000000000000000000000000000000000, 0x2000000000000000000000000000000000000, 0x20000000000000000000000000000000000000, number())
function foo_m_1(x_12, x_13, x_14, x_15) -> x_16, x_17, x_18, x_19
{
}
let x_21, x_22, x_23, x_24 := foo_m_1(sload(224),calldataload(288),sload(32),calldataload(96))
sstore(160, x_21)
sstore(224, x_22)
sstore(288, x_23)
sstore(32, x_24)
extcodecopy(x_4, x_4, 0x200000000000000000000000000000000000000000000000000000000001, x_4)
function foo_m_2(x_43, x_44, x_45) -> x_46, x_47, x_48, x_49
{
sstore(x_43, 0x200000000000000000000000000000000000000000000000001)
}
let x_52, x_53, x_54, x_55 := foo_m_2(mload(256),0x20000000000000000000000000000000000000001,sload(96))
sstore(160, x_52)
sstore(224, x_53)
sstore(288, x_54)
sstore(32, x_55)
}
function foo_s_0(x_72, x_73, x_74) -> x_75
{
mstore(x_72, 0x2000000000000000000000001)
}
let x_78 := foo_s_0(calldataload(32),sload(96),calldataload(160))
sstore(224, x_78)
for { let i_1 := 0 } lt(i_1, 0x60) { i_1 := add(i_1, 0x20) } {
let x_92 := foo_s_0(0x20000001, 0x2000001, 0x200001)
function foo_m_88(x_97, x_98, x_99, x_100) -> x_101, x_102, x_103
{
}
function foo_m_89(x_105, x_106, x_107) -> x_108, x_109, x_110, x_111
{
mstore(x_105, 0x3ffffffffffff)
}
let x_114, x_115, x_116, x_117 := foo_m_89(0x3ffffffffffffffffffff,sload(96),calldataload(160))
sstore(224, x_114)
sstore(288, x_115)
sstore(32, x_116)
sstore(96, x_117)
function foo_m_90(x_134, x_135, x_136, x_137) -> x_138, x_139, x_140, x_141
{
extcodecopy(x_134, x_134, 0x3ffffffffffffffffffffffffffffffffffffffffff, 0x3fffffffffffffffffffffffffffffffffffffffffff)
}
let x_145, x_146, x_147, x_148 := foo_m_90(sload(32),calldataload(96),sload(160),calldataload(224))
sstore(288, x_145)
sstore(32, x_146)
sstore(96, x_147)
sstore(160, x_148)
}
}
}

			}
		}
	}
		