
	object "main" {
		code {
			codecopy(0, dataoffset("deployed"), datasize("deployed"))
			return(0, datasize("deployed"))
		}
		object "deployed" {
			code {
				{
{
let x_2, x_3, x_4, x_5 := foo_m_0(0x20, 0x200, 0x2000)
{
}
let x_11, x_12, x_13, x_14 := foo_m_0(0x20000000000, 0x200000000000, 0x2000000000000)
let x_20, x_21, x_22, x_23 := foo_m_0(0x20000000000000000000, 0x200000000000000000000, msize())
mstore(0x2000000000000000000000, 0x20000000000000000000000)
let x_30, x_31, x_32, x_33 := foo_m_0(0x200000000000000000000000000000, 0x2000000000000000000000000000000, 0x20000000000000000000000000000000)
function foo_m_0(x_38, x_39, x_40) -> x_41, x_42, x_43, x_44
{
sstore(0x20000000000000000000000000000000000000000, 0x200000000000000000000000000000000000000000)
sstore(slt(0x2000000000000000000000000000000000000000000,call(0x20000000000000000000000000000000000000000000, 0x200000000000000000000000000000000000000000000, 0x2000000000000000000000000000000000000000000000, 0x20000000000000000000000000000000000000000000000, 0x200000000000000000000000000000000000000000000000, mulmod(0x2000000000000000000000000000000000000000000000000, 0x20000000000000000000000000000000000000000000000000, 0x200000000000000000000000000000000000000000000000000), 0x2000000000000000000000000000000000000000000000000000)), slt(0x20000000000000000000000000000000000000000000000000000,0x200000000000000000000000000000000000000000000000000000))
sstore(slt(x_42,0x2000000000000000000000000000000000000000000000000000000), slt(x_38,0x20000000000000000000000000000000000000000000000000000000))
}
let x_63, x_64, x_65, x_66 := foo_m_0(0x200000000000000000000000000000000000000000000000000000000000000, 0x2000000000000000000000000000000000000000000000000000000000000000, 0x2000000000000000000000000000000000000000000000000000000000000001)
let x_72, x_73, x_74, x_75 := foo_m_0(0x200000000000000000000000000000000000000000000000000000001, 0x20000000000000000000000000000000000000000000000000000001, 0x2000000000000000000000000000000000000000000000000000001)
}
}

			}
		}
	}
		