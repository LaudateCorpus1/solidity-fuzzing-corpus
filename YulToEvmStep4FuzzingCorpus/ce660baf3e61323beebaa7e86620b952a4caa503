
	object "main" {
		code {
			codecopy(0, dataoffset("deployed"), datasize("deployed"))
			return(0, datasize("deployed"))
		}
		object "deployed" {
			code {
				{
{
let x_2, x_3, x_4, x_5 := foo_m_0(0x3ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, 0x3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, 0x3ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
{
}
let x_11, x_12, x_13, x_14 := foo_m_0(0x400000, 0x4000000, 0x40000000)
let x_20, x_21, x_22, x_23 := foo_m_0(0x400000000000000, 0x4000000000000000, 0x40000000000000000)
mstore(0x400000000000000000, 0x4000000000000000000)
let x_31, x_32, x_33, x_34 := foo_m_0(number(), 0x40000000000000000000000000, 0x400000000000000000000000000)
function foo_m_0(x_38, x_39, x_40) -> x_41, x_42, x_43, x_44
{
pop(add(0x400000000000000000000000000000000000,0x4000000000000000000000000000000000000))
sstore(false, 0x40000000000000000000000000000000000000)
sstore(0x400000000000000000000000000000000000000, slt(x_38,addmod(0x4000000000000000000000000000000000000000, 0x40000000000000000000000000000000000000000, 0x400000000000000000000000000000000000000000)))
mstore(0x4000000000000000000000000000000000000000000, addmod(0x40000000000000000000000000000000000000000000, 0x400000000000000000000000000000000000000000000, number()))
sstore(x_38, slt(slt(x_39,0x4000000000000000000000000000000000000000000000),0x40000000000000000000000000000000000000000000000))
}
let x_58, x_59, x_60, x_61 := foo_m_0(0x4000000000000000000000000000000000000000000000000000000,sload(224),calldataload(288))
sstore(32, x_58)
sstore(96, x_59)
sstore(160, x_60)
sstore(224, x_61)
let x_79, x_80, x_81, x_82 := foo_m_0(0x4000000000000000000000000000000000000000000000000000001, 0x400000000000000000000000000000000000000000000000000001, 0x40000000000000000000000000000000000000000000000000001)
let x_88, x_89, x_90, x_91 := foo_m_0(0x4000000000000000000000000000000000000000000001, 0x400000000000000000000000000000000000000000001, 0x40000000000000000000000000000000000000000001)
}
}

			}
		}
	}
		