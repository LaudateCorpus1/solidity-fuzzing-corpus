
	object "main" {
		code {
			codecopy(0, dataoffset("deployed"), datasize("deployed"))
			return(0, datasize("deployed"))
		}
		object "deployed" {
			code {
				{
{
let x_2, x_3, x_4, x_5 := foo_m_0(0x400000000000000000000000000000000000000000000000000000001, 0x40000000000000000000000000000000000000000000000000000001, 0x4000000000000000000000000000000000000000000000000000001, 0x400000000000000000000000000000000000000000000000000001)
let x_12, x_13, x_14, x_15 := foo_m_0(0x40000000000000000000000000000000000000000000001, 0x4000000000000000000000000000000000000000000001, 0x400000000000000000000000000000000000000000001, 0x40000000000000000000000000000000000000000001)
{
}
let x_22, x_23, x_24, x_25 := foo_m_0(0x4000000000000000000000000000000000001, 0x400000000000000000000000000000000001, 0x40000000000000000000000000000000001, 0x4000000000000000000000000000000001)
let x_32, x_33, x_34, x_35 := foo_m_0(0x400000000000000000000000001, 0x40000000000000000000000001, 0x4000000000000000000000001, add(x_12,0x400000000000000000000001))
let x_42, x_43, x_44, x_45 := foo_m_0(0x40000000000000001, 0x4000000000000001, 0x400000000000001, 0x40000000000001)
let x_52, x_53, x_54, x_55 := foo_m_0(0x4000001, 0x400001, 0x40001, 0x4001)
function foo_m_0(x_61, x_62, x_63, x_64) -> x_65, x_66, x_67, x_68
{
let x_70 := 0x7fffffff
switch mload(0x7ffffffff)
case 0x7fffffffff {}
case 0x7ffffffffff {
x_62 := 0x7fffffffffff
}
case 0x7ffffffffffff {
invalid()
}
case 0x7fffffffffffff {
let x_78, x_79
}
codecopy(x_61, 0x7ffffffffffffffff, 0x7fffffffffffffffff)
}
let x_83, x_84, x_85, x_86 := foo_m_0(0x7ffffffffffffffffffffffff, 0x7fffffffffffffffffffffffff, 0x7ffffffffffffffffffffffffff, 0x7fffffffffffffffffffffffffff)
let x_93, x_94, x_95, x_96 := foo_m_0(0x7ffffffffffffffffffffffffffffffffff, gaslimit(), addmod(call(0x7fffffffffffffffffffffffffffffffffff, 0x7ffffffffffffffffffffffffffffffffffff, 0x7fffffffffffffffffffffffffffffffffffff, 0x7ffffffffffffffffffffffffffffffffffffff, 0x7fffffffffffffffffffffffffffffffffffffff, 0x7ffffffffffffffffffffffffffffffffffffffff, 0x7fffffffffffffffffffffffffffffffffffffffff), 0x7ffffffffffffffffffffffffffffffffffffffffff, 0x7fffffffffffffffffffffffffffffffffffffffffff), 0x7ffffffffffffffffffffffffffffffffffffffffffff)
}
}

			}
		}
	}
		