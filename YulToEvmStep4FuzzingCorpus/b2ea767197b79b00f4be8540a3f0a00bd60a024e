
	object "main" {
		code {
			codecopy(0, dataoffset("deployed"), datasize("deployed"))
			return(0, datasize("deployed"))
		}
		object "deployed" {
			code {
				{
{
let x_2, x_3, x_4, x_5 := foo_m_0(0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffff, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffff, add(0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffff,0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff))
{
let x_12, x_13, x_14, x_15 := foo_m_0(0x8, 0x80, not(0x800))
}
let x_21, x_22, x_23, x_24 := foo_m_0(0x8000000000, 0x80000000000, 0x800000000000)
let x_30, x_31, x_32, x_33 := foo_m_0(0x8000000000000000000, 0x80000000000000000000, 0x800000000000000000000)
let x_39, x_40, x_41, x_42 := foo_m_0(0x8000000000000000000000000000, 0x80000000000000000000000000000, 0x800000000000000000000000000000)
mstore(0x8000000000000000000000000000000, 0x80000000000000000000000000000000)
let x_50, x_51, x_52, x_53 := foo_m_0(0x800000000000000000000000000000000000000, 0x8000000000000000000000000000000000000000, 0x80000000000000000000000000000000000000000)
function foo_m_0(x_58, x_59, x_60) -> x_61, x_62, x_63, x_64
{
for {
mstore(0x80000000000000000000000000000000000000000000000000, 0x800000000000000000000000000000000000000000000000000)
}
sload(0x0){
}
{
x_58 := x_58
}
mstore(0x8000000000000000000000000000000000000000000000000000, 0x80000000000000000000000000000000000000000000000000000)
sstore(sdiv(0x800000000000000000000000000000000000000000000000000000,0x8000000000000000000000000000000000000000000000000000000), slt(x_58,x_58))
}
let x_73, x_74, x_75, x_76 := foo_m_0(0x80000000000000000000000000000000000000000000000000000000000000, 0x800000000000000000000000000000000000000000000000000000000000000, not(0x8000000000000000000000000000000000000000000000000000000000000000))
let x_82, x_83, x_84, x_85 := foo_m_0(0x8000000000000000000000000000000000000000000000000000000001, 0x800000000000000000000000000000000000000000000000000000001, 0x80000000000000000000000000000000000000000000000000000001)
}
}

			}
		}
	}
		