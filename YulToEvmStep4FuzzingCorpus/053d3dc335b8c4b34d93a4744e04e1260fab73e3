
	object "main" {
		code {
			codecopy(0, dataoffset("deployed"), datasize("deployed"))
			return(0, datasize("deployed"))
		}
		object "deployed" {
			code {
				{
{
let x_2, x_3, x_4, x_5 := foo_m_0(0x1ffffffffffffffff, 0x1fffffffffffffffff, add(call(0x1ffffffffffffffffff, 0x1fffffffffffffffffff, 0x1ffffffffffffffffffff, 0x1fffffffffffffffffffff, 0x1ffffffffffffffffffffff, 0x1fffffffffffffffffffffff, 0x1ffffffffffffffffffffffff),0x1fffffffffffffffffffffffff))
{
}
let x_18, x_19, x_20, x_21 := foo_m_0(0x1ffffffffffffffffffffffffffffffff, 0x1fffffffffffffffffffffffffffffffff, 0x1ffffffffffffffffffffffffffffffffff)
let x_27, x_28, x_29, x_30 := foo_m_0(0x1fffffffffffffffffffffffffffffffffffffffff, 0x1ffffffffffffffffffffffffffffffffffffffffff, 0x1fffffffffffffffffffffffffffffffffffffffffff)
let x_36, x_37, x_38, x_39 := foo_m_0(0x1ffffffffffffffffffffffffffffffffffffffffffffffffff, 0x1fffffffffffffffffffffffffffffffffffffffffffffffffff, not(0x1ffffffffffffffffffffffffffffffffffffffffffffffffffff))
mstore(0x1fffffffffffffffffffffffffffffffffffffffffffffffffffff, 0x1ffffffffffffffffffffffffffffffffffffffffffffffffffffff)
let x_47, x_48, x_49, x_50 := foo_m_0(0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, 0x1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
function foo_m_0(x_55, x_56, x_57) -> x_58, x_59, x_60, x_61
{
sstore(0x200000000, 0x2000000000)
for { let i_0 := 0 } lt(i_0, 0x60) { i_0 := add(i_0, 0x20) } {
for { let i_1 := 0 } lt(i_1, 0x60) { i_1 := add(i_1, 0x20) } {
extcodecopy(0x20000000000, 0x200000000000, 0x2000000000000, x_55)
}
}
sstore(mod(x_55,x_55), slt(x_55,0x20000000000000))
}
let x_69, x_70, x_71, x_72 := foo_m_0(sload(160),calldataload(224),sload(288))
sstore(32, x_69)
sstore(96, x_70)
sstore(160, x_71)
sstore(224, x_72)
let x_89, x_90, x_91, x_92 := foo_m_0(0x2000000000000000000000000000000000000000, 0x20000000000000000000000000000000000000000, not(0x200000000000000000000000000000000000000000))
}
}

			}
		}
	}
		