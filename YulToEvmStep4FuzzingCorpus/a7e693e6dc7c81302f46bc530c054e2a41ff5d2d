
	object "main" {
		code {
			codecopy(0, dataoffset("deployed"), datasize("deployed"))
			return(0, datasize("deployed"))
		}
		object "deployed" {
			code {
				{
{
let x_2, x_3, x_4, x_5 := foo_m_0(0x10000000, 0x100000000, 0x1000000000)
let x_11, x_12, x_13, x_14 := foo_m_0(0x10000000000000000, 0x100000000000000000, 0x1000000000000000000)
let x_20, x_21, x_22, x_23 := foo_m_0(0x10000000000000000000000000, 0x100000000000000000000000000, 0x1000000000000000000000000000)
mstore8(0x10000000000000000000000000000, 2305843687818526720)
let x_30, x_31, x_32, x_33 := foo_m_0(0x100000000000000000000000000000000000, 0x1000000000000000000000000000000000000, 0x10000000000000000000000000000000000000)
function foo_m_0(x_38, x_39, x_40) -> x_41, x_42, x_43, x_44
{
sstore(exp(exp(0x10000000000000000000000000000000000000000000000,x_38),codesize()), xor(x_38,0x100000000000000000000000000000000000000000000000))
sstore(0x1000000000000000000000000000000000000000000000000, 0x10000000000000000000000000000000000000000000000000)
mstore(0x100000000000000000000000000000000000000000000000000, call(0x1000000000000000000000000000000000000000000000000000, 0x10000000000000000000000000000000000000000000000000000, 0x100000000000000000000000000000000000000000000000000000, 0x1000000000000000000000000000000000000000000000000000000, 0x10000000000000000000000000000000000000000000000000000000, 0x100000000000000000000000000000000000000000000000000000000, 0x1000000000000000000000000000000000000000000000000000000000))
sstore(exp(exp(0x10000000000000000000000000000000000000000000000000000000000,x_38),codesize()), xor(x_38,0x100000000000000000000000000000000000000000000000000000000000))
}
let x_60, x_61, x_62, x_63 := foo_m_0(mload(192),0x10000000000000000000000000000000000000000000000000000000001,sload(32))
sstore(96, x_60)
sstore(160, x_61)
sstore(224, x_62)
sstore(288, x_63)
let x_81, x_82, x_83, x_84 := foo_m_0(0x100000000000000000000000000000000000000001, 0x10000000000000000000000000000000000000001, 0x1000000000000000000000000000000000000001)
}
}

			}
		}
	}
		