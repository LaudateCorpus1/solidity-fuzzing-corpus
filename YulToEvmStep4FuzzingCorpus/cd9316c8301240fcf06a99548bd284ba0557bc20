
	object "main" {
		code {
			codecopy(0, dataoffset("deployed"), datasize("deployed"))
			return(0, datasize("deployed"))
		}
		object "deployed" {
			code {
				{
{
let x_2, x_3, x_4, x_5 := foo_m_0(0x1ffffffffffffff, 0x1fffffffffffffff, 0x1ffffffffffffffff)
{
}
let x_11, x_12, x_13, x_14 := foo_m_0(0x1fffffffffffffffffffffff, slt(0x1ffffffffffffffffffffffff,call(0x1fffffffffffffffffffffffff, 0x1ffffffffffffffffffffffffff, 0x1fffffffffffffffffffffffffff, 0x1ffffffffffffffffffffffffffff, 0x1fffffffffffffffffffffffffffff, 0x1ffffffffffffffffffffffffffffff, 0x1fffffffffffffffffffffffffffffff)), 0x1ffffffffffffffffffffffffffffffff)
let x_27, x_28, x_29, x_30 := foo_m_0(0x1fffffffffffffffffffffffffffffffffffffff, 0x1ffffffffffffffffffffffffffffffffffffffff, not(0x1fffffffffffffffffffffffffffffffffffffffff))
mstore(0x1ffffffffffffffffffffffffffffffffffffffffff, msize())
let x_37, x_38, x_39, x_40 := foo_m_0(0x1fffffffffffffffffffffffffffffffffffffffffffffffff, 0x1ffffffffffffffffffffffffffffffffffffffffffffffffff, 0x1fffffffffffffffffffffffffffffffffffffffffffffffffff)
function foo_m_0(x_45, x_46, x_47) -> x_48, x_49, x_50, x_51
{
sstore(x_45, 0x1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
for { let i_0 := 0 } lt(i_0, 0x60) { i_0 := add(i_0, 0x20) } {
x_45 := 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
}
mstore8(slt(x_45,0x1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff), slt(x_45,0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff))
}
let x_57, x_58, x_59, x_60 := foo_m_0(sload(96),calldataload(160),sload(224))
sstore(288, x_57)
sstore(32, x_58)
sstore(96, x_59)
sstore(160, x_60)
let x_77, x_78, x_79, x_80 := foo_m_0(0x20000000000000000000000000, create(0x200000000000000000000000000, 0x2000000000000000000000000000, 0x20000000000000000000000000000), 0x200000000000000000000000000000)
let x_88, x_89, x_90, x_91 := foo_m_0(0x2000000000000000000000000000000000000, 0x20000000000000000000000000000000000000, 0x200000000000000000000000000000000000000)
}
}

			}
		}
	}
		