
	object "main" {
		code {
			codecopy(0, dataoffset("deployed"), datasize("deployed"))
			return(0, datasize("deployed"))
		}
		object "deployed" {
			code {
				{
{
let x_2, x_3, x_4, x_5 := foo_m_0(0x400000000000000000000000000000000000, 0x4000000000000000000000000000000000000, smod(0x40000000000000000000000000000000000000,0x400000000000000000000000000000000000000))
{
let x_12, x_13, x_14, x_15 := foo_m_0(0x4000000000000000000000000000000000000000000000, 0x40000000000000000000000000000000000000000000000, 0x400000000000000000000000000000000000000000000000)
}
let x_21, x_22, x_23, x_24 := foo_m_0(0x4000000000000000000000000000000000000000000000000000000, 0x40000000000000000000000000000000000000000000000000000000, 0x400000000000000000000000000000000000000000000000000000000)
let x_30, x_31, x_32, x_33 := foo_m_0(0x4000000000000000000000000000000000000000000000000000000000000000, 0x4000000000000000000000000000000000000000000000000000000000000001, 0x400000000000000000000000000000000000000000000000000000000000001)
let x_39, x_40, x_41, x_42 := foo_m_0(0x40000000000000000000000000000000000000000000000000000001, 0x4000000000000000000000000000000000000000000000000000001, 0x400000000000000000000000000000000000000000000000000001)
let x_48, x_49, x_50, x_51 := foo_m_0(0x40000000000000000000000000000000000000000000001, 0x4000000000000000000000000000000000000000000001, 0x400000000000000000000000000000000000000000001)
mstore(0x40000000000000000000000000000000000000000001, 0x4000000000000000000000000000000000000000001)
let x_59, x_60, x_61, x_62 := foo_m_0(0x400000000000000000000000000000000001, 0x40000000000000000000000000000000001, 0x4000000000000000000000000000000001)
function foo_m_0(x_67, x_68, x_69) -> x_70, x_71, x_72, x_73
{
sstore(0x4000000000000000000000001, 0x400000000000000000000001)
sstore(0x40000000000000000000001, slt(x_67,0x4000000000000000000001))
}
let x_80, x_81, x_82, x_83 := foo_m_0(0x400000000000001, 0x40000000000001, not(0x4000000000001))
let x_89, x_90, x_91, x_92 := foo_m_0(0x400001, 0x40001, 0x4001)
}
}

			}
		}
	}
		