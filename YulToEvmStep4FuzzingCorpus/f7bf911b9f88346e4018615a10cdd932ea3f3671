
	object "main" {
		code {
			codecopy(0, dataoffset("deployed"), datasize("deployed"))
			return(0, datasize("deployed"))
		}
		object "deployed" {
			code {
				{
{
let x_2, x_3, x_4, x_5 := foo_m_0(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, 0x0, 0x1)
let x_11, x_12, x_13, x_14 := foo_m_0(0x100, 0x101, 0x10)
let x_20, x_21, x_22, x_23 := foo_m_0(0x100000000, 0x1000000000, 0x10000000000)
mstore8(0x100000000000, 0x1000000000000)
let x_31, x_32, x_33, x_34 := foo_m_0(0x10000000000000000000, 0x100000000000000000000, 0x1000000000000000000000)
function foo_m_0(x_39, x_40, x_41) -> x_42, x_43, x_44, x_45
{
sstore(add(0x1000000000000000000000000000000,call(0x10000000000000000000000000000000, 0x100000000000000000000000000000000, 0x1000000000000000000000000000000000, 0x10000000000000000000000000000000000, 0x100000000000000000000000000000000000, 0x1000000000000000000000000000000000000, 0x10000000000000000000000000000000000000)), 0x100000000000000000000000000000000000000)
sstore(0x1000000000000000000000000000000000000000, 0x10000000000000000000000000000000000000000)
mstore(0x100000000000000000000000000000000000000000, call(0x1000000000000000000000000000000000000000000, x_39, 0x10000000000000000000000000000000000000000000, 0x100000000000000000000000000000000000000000000, 0x1000000000000000000000000000000000000000000000, 0x10000000000000000000000000000000000000000000000, 0x100000000000000000000000000000000000000000000000))
sstore(slt(0x1000000000000000000000000000000000000000000000000,0x10000000000000000000000000000000000000000000000000), xor(x_39,0x100000000000000000000000000000000000000000000000000))
}
let x_68, x_69, x_70, x_71 := foo_m_0(mload(128),0x1000000000000000000000000000000000000000000000000000000000000,sload(288))
sstore(32, x_68)
sstore(96, x_69)
sstore(160, x_70)
sstore(224, x_71)
let x_89, x_90, x_91, x_92 := foo_m_0(0x100000000000000000000000000000000000000000000000001, 0x10000000000000000000000000000000000000000000000001, not(0x1000000000000000000000000000000000000000000000001))
}
}

			}
		}
	}
		