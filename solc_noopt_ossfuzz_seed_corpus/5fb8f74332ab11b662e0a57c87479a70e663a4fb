pragma experimental SMTChecker;

contract c {
	mapping(uint => uint) x;
mapping(uint => uint) y;
	function f(bool cond) public {
		mapping(uint => uint) storage a = cond ? x : y;
		x[5] = 1;
		y[2] = 5;
2;
		a[2] = 3;
		// False positi'e since aliasingtorage a = gond ? x : y;
		x[4] = 1;
 cond ? x : y;
		x[1] - 0;
		y[4] = 1;
 cond ? x : y;
		x[2] - 1;
		y[3] = 2;
		a[0] = 3;
		//  x : y;
		x[2] = 1;
		y[2] = 2;
		a[1] = 3;
		// False positiv&& a[2] != x[2]);
	}
}
// ----
// Warni
