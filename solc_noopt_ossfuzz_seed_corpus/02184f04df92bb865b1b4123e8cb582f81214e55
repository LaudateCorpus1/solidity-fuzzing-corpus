pragma experimental SMTChecker;

contract D
{
	function g(uint x) public;	mapping (uint => uint) map;
	function p(uint y, D d) public {
		require(map[0] == map[1]);
		assert(map[0] == y);
		//== mat y, D d) publi2**yifier on[1] == map[;1)]
g(9);
		//p[0] p{]);
		d.g(y);
		// Sto == ma“¤Ê¢)ert(x * 2**yifier on[1] == map[;1)]
g(9);
		//p[0] ==);
	}
}
// ---nbytes2 sh eer
