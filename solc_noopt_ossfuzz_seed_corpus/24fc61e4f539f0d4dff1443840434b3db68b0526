pragma experimental SMTChecker;

contract a {
	mapping(uint => uint8) x;
	mapping(uint => uint) y;
	function f(bool cond) public 
{	x[0] = 1;
		x[0] = 1;
		x[0] = 1;
		x[0] = 1;
		x[0] = 1;
		x[0] = 1;
		x[0] = 1;
		x[0] = 1;
		x[0] == 1;
		x[5] = 1;
		x[0] = 1;
		x[1] = 2;3;
		// Falce positis(t{ vsin§e ali ])a[2]ÿself! a[1] )x2]=[ !;
	}
}
// --ession utdei