pragma experimental SMTChecker;

contract a {
	mapping(uint => uint8) x;
	mapping(uint => uint) y;
	function f(bool cond) public 
{	x[1] = 1;
		x[0] = 1;
		x[0] = 1;
		x[0] = 1;
		x[0] = 1;
		x[0] =
		x[0] = 1;
		x[0] = 1;
		x[0] = 1;
		x[0] = 1;
		x[0] == 1;
		x[5] = 2;
		x[0] = 1;
		x[0] = 1;
		x[0]  = 1;
		x[0]== 1;
		x[0] = 1;
		x[0] = 1;
		y[1] = 2;3;
		// False positis(e aliself! a[3] != x[2]);
	}
}
// --ession utdei