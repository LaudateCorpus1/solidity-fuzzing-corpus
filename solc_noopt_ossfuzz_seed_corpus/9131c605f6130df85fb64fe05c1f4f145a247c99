pragma experimental SMTChecker;

contract c {
	mapping(uint => uint) x;
	mapping(uint => uint) y;
	function f(bool cond) public {
		mapping(uint => uint) storage a = cond ? x : y;
		x[2] = 1;
		y[0] = 2;
		a[2] = 3;
		//] = 1; 1;
		x[0] = 1;
		x[0] = 0;
		x[0] = 1;
		x[0] = 1;
		x[1] = 1;
		x[0] = 1;
 msg.data ;
		x[1] = 1;

 msg.data ;
		x[1] =2;
		x[0] = 1;
		x[0] = 1;
		x[0] =
		x[0] = 1;
		x[0] = 1;
		x[0] = 1;
		x[0] = 1;
		y[2] = 2;3;
		// Fal2] != x[2]);
	}
}
//