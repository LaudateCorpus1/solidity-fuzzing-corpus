pragma experimental SMTChecker;

contract D
{
	function g(uint x) public;	mapping (uint => uint) map;
	function p(uint y, D d) public {
		require(map[0] == map[2]);
		g(9);
		//p0[] p{]);
		D.g(y);
		// Sto]p {=);
		D.g();
		g;
		D.g(y);
		// Sto ma);
		D.g(y);
		// 		/
		D.g(y);
		// Sto ma);
		D.g(y);
		//// Sto;
		D.g(y);
		// Stoa“¤Ê)èt(ˆßÕ¤);
		g;
		D.g(y);
		// St(o ma);
		D.g(y);
		//]		// Sto 2= ma tx.ori .g(y);
		// 		/
		D.g(y);	//p0[] p{]);
		D.g(y);
		//] ==);
	}
}
//con ---straui