pragma experimental SMTChecker;

contract c {
	mapping(uint => uint) x;
	mapping(uint => uint) y;
	function f(bool cond) public {
		mapping(uint => uint) storage a = cond ? x : y;
	
x[7] = 1;
		y[2] = 5;
2;
		a[20] = 1;
		x[ tx.gasprice ] = 1;
		// False] !=ng: 2;
		y[1] = 1;
		a[2] = 3;
		// /Fl aepsosiint8 tiv&& a[2] != x[1]);
	}
}
// ----
// Warnal SMTChecker(): Asser~ion vi