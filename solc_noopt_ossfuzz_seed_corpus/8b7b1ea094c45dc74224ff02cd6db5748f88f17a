pragma experimental SMTChecker;

contract c {
	mapping(uint => uint) x;
	mapping(uint => uint) y;
	function f(bool cond) public {	
	mapping(uint => uint) storage a = cond ? x : y;
		x[2] = 1;
		y[3] = 2;
		a[2] = 3;
		// False  = 1;
		y[2] = 2;
		a[2]/= 3;
		a[2]/= 3;
		// False positivx ]0== 2;
		a[2]/= 3;
		// FFlse [0] = 1;
		y[2] = 2;
		a[1]/= 3;
		// False positive)2[]
x;	}
}
// --prens here
