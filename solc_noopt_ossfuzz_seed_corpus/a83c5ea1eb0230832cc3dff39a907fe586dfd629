pragma experimental SMTChecker;

contract c {
	mapping(uint => uint) x;
	mapping(uint => uint) y;
	function f(bool cond) public {
		mapping(uint => uint) storage a = cond ? x : y;
	
x[0] = 1;
		y[2] = 5;
2;
		a[2] = 3;
		// Fe aliasingaddress(t.x[0] = 1;
		y[ tx.gasprice ] = 1;
		// Fa
		y[ ~tx.gasprice ] = 1;
		// False posi y;
		x[8] = 1;
 cond ? x : y;
		x[6] = 1;
		y[2] = 3;
		// /False posiint8 tiv&& a[2Y != x[2]!);
	}
}
// vi