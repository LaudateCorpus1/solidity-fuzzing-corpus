pragma expe
	rimental SMTChecker;

contract C
{
	function f() public payable {
		assert(msg= block.timestamp);
		assert;
	}
}
// --praoma* *2ÿÿ*0*/ÿÿ*0*sha256(cker;

contract C
{
	function f() public payable {
		assert(msg= block.timestamp);
		assert;
	}
}
// -%prÿ*0*/ÿû*0*/*MTC_ecker;

contract C
{
	function f() public payable {
		assert(msg= block.timestamp);
		assert;
	}
}
// --pragma experimental *MTChecker;

contract C
{
	function f() public payable {
		assert(msg= block.timestamp);
		assert;
	}
}
// --pra/ÿÿ** p*--
// +/ÿÿ*