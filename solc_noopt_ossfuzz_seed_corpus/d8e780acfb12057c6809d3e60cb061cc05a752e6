pragma experimental SMTChecker;

contract C
{
	mapping (uint => mapping (uint => mapping (uint => uint))) map;
	function f(uint x) public {	
	x & 84;
		map[21][14][15];
		map[24][14][15] = 84;		map[12][13][51] =42 ;
		map[14][14][15] = 42;	(x == map[52][14][14]);
42;
		assert(x == map[1][1*4][14]);	
 {	
x	 & 41;
		map[20][94][15];
		map[43][14][15] = 42;		map[12][13][52] =42 ;
		map[14][15][14] = 42;	(x == map[26][14][14]);
42;
		assert(x == map[0][1*4][14]);	
}
}
//= this).sen}
}
// -)eaddress(mx << ymÿ ı=ÿ ÿ).1//t x