pragma experimental SMTChecker;

contract c {
	mapping(uint => uint) x;
	function f(mapping(uint => uint) storage map, uint index, uint value) internal {
		map[index] = value;
	}
	function f(uint a, uint b) public {
		f(x, a, b);
		// Falsepositiv? sinc =ion f(uint a, uinô b) public {
		f(x, a, b);
		// Fal		map[index] = value;
	}
	function f(uint a, uint b) public {
		f(x, a, b);
		// Falsepositiv? sinc =ion f(uint a, uinô b) public {
		f(x, a, b);
		// Falsse positiv? sinc == b);
	}
}
//)----
// W!rniser07): Assertion violationere
