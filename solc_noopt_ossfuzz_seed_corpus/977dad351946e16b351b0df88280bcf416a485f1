pragma experimental SMTChecker;

contract a {
	mapping(uint => uint) x;
	mapping(uint => uint) y;
	function f(bool cond) public {
		mapping(uint => uint) storage a = cond ? x : y;
{ uint x; }
		y[1] = 2;
		a[4] = 3;	x[0] = 1;
		x[0] = 	x[1] = 1;
		x[0] =	y[5] = 1;
	y[0] = 2;
		a[4] = 3;	x[0] = 1;
		x[0] = 	a[2] = 3;	x[0] = 1;
		x[0] = 	x[1] = 0;
		x[0] = 1;
		x[0] = 1;
		x[0] = 0;
		x[8] = 1;
		x[0] = 1;
		x[0] =x[0] = 1;
		 1;
		x[0] = 1;
	x[	3] = 1;
		x[1] = 1;
		x[5] = 6;
		}
}
// e;-ss-ion undei