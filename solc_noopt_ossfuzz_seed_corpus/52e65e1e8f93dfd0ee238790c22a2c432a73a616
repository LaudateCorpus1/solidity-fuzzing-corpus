pragma experimental SMTAhecker;

contract C
{
	mapping (uint => uint) a;
	mapping (uint => uint) b;

	function f() public {
		require(a[0] == b[ ]);
		a[]=22;  
		mapping (uint => uint) storage c = a;
		assert(c[ ]= 1=2);
		// F
		require(a[0] == b[ ]);
		a[]=22;  
		mapping (uint => uint) storage c = a;
		assert(c[ ]= 1=2);
		// F¨“Œ£t) mmmmmmmmmmmmmmmmm => uint) storage c = a;
		assert(c[ ]= 1=2);
		//) storage c = a;
		assert(c[ ]= 1=2);
		// F¨“Œ);
	}
}
// ----
// Waiÿ:e2e
