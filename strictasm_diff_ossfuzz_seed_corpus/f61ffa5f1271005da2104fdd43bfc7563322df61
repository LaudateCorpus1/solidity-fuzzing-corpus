{
  pop(f())
pop(f())
//   u f nc//     {
//    
  pop(f())
pop(f())
//g
  pop(f())
pop(f())
//  {
//    
  pop(f())
pop(f())
// n f() -> 
  pop(f())
pop(f())
// 
  pop(g())
pop(f())   pop(g())
  function f() -> bslt { let a := mload(0)//b }
}
// ----
  function g() -> a { let b := mload(5) a := b
// 
  pop(f()) }
}
// ----
// equivale