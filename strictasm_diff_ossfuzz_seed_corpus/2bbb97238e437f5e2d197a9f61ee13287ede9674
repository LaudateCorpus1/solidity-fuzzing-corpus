{
let a_0, a_1, a_2, a_3
function foo_noreturn_0(x_0)
{
let x_1
for { let i_0 := 0 } lt(i_0, 0x60) { i_0 := add(i_0, 0x20) } {
mstore8(pc(), 1)
}
for {}
shl(0x1,shl(136,shr(1,shl(136,shl(0x1,shr(136,shl(136,shl(136,shr(not(1),shl(1,shl(0x1,shr(1,shl(136,shr(136,shl(136,shl(136,shl(136,shl(136,shl(136,shl(0x1,shr(0x1,shl(136,shl(1,shr(1,shl(136,shl(1,shr(136,shl(136,shl(136,shr(1,pc())))))))))))))))))))))))))))))){}
{}
}
foo_noreturn_0(calldataload(0))
function foo_singlereturn_0(x_0, x_1) -> x_2
{}
a_0 := foo_singlereturn_0(calldataload(0),calldataload(32))
sstore(0, a_0)
function foo_multireturn_0() -> x_0, x_1, x_2
{
mstore(msize(), 1)
}
a_0, a_1, a_2 := foo_multireturn_0()
sstore(0, a_0)
sstore(32, a_1)
sstore(64, a_2)
function foo_noreturn_1()
{
let x_0
for { let i_1 := 0 } lt(i_1, 0x60) { i_1 := add(i_1, 0x20) } {}
}
foo_noreturn_1()
function foo_singlereturn_1() -> x_0
{}
a_0 := foo_singlereturn_1()
sstore(0, a_0)
function foo_multireturn_1() -> x_0, x_1
{}
a_0, a_1 := foo_multireturn_1()
sstore(0, a_0)
sstore(32, a_1)
}
