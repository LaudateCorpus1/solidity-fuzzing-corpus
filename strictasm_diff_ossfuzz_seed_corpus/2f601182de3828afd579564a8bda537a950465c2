{
let a_0, a_1, a_2, a_3
function foo_noreturn_0()
{
let x_0
for { let i_0 := 0 } lt(i_0, 0x60) { i_0 := add(i_0, 0x20) } {
let x_1, x_2, x_3, x_4 := foo_multireturn_0()
switch x_0
default {}
}
sstore(1, xor(xor(xor(xor(xor(xor(pc(),1),xor(xor(xor(xor(xor(xor(pc(),1),add(add(xor(xor(xor(xor(pc(),1),xor(xor(xor(xor(xor(xor(xor(xor(pc(),xor(1,1)),not(mulmod(1, 1, 1))),xor(pc(),1)),pc()),xor(xor(xor("",xor(pc(),1)),pc()),pc())),pc()),1),1)),pc()),xor(xor(1,pc()),pc())),pc()),1)),pc()),xor(xor(1,pc()),pc())),pc()),1)),1),pc()),returndatasize()),pc()))
for { let i_1 := 0 } lt(i_1, 0x60) { i_1 := add(i_1, 0x20) } {
if 1 {
if 1 {
break
}
break
}
x_0 := 1
break
}
log4(1, foo_singlereturn_0(0, 1, 1, 1), addmod("IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII", codesize(), 1), 1, 1, 1)
}
foo_noreturn_0()
function foo_singlereturn_0(x_0, x_1, x_2, x_3) -> x_4
{
sstore(x_4, x_4)
}
a_0 := foo_singlereturn_0(calldataload(0),calldataload(32),calldataload(64),calldataload(96))
sstore(0, a_0)
function foo_multireturn_0() -> x_0, x_1, x_2, x_3
{
}
a_0, a_1, a_2, a_3 := foo_multireturn_0()
sstore(0, a_0)
sstore(32, a_1)
sstore(64, a_2)
sstore(96, a_3)
}
