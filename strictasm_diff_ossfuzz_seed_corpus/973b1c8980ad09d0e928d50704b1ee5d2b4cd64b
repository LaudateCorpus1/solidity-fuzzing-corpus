{
let a_0, a_1, a_2, a_3
function foo_noreturn_0(x_0, x_1, x_2)
{
let x_3
}
foo_noreturn_0(calldataload(0),calldataload(32),calldataload(64))
function foo_singlereturn_0(x_0) -> x_1
{
switch x_0
case 1 {
switch codesize()
case 1 {
x_1 := 1
}
default {
switch 1
default {}
}
}
default {
stop()
}
}
a_0 := foo_singlereturn_0(calldataload(0))
sstore(0, a_0)
function foo_multireturn_0(x_0, x_1, x_2) -> x_3, x_4
{}
a_0, a_1 := foo_multireturn_0(calldataload(0),calldataload(32),calldataload(64))
sstore(0, a_0)
sstore(32, a_1)
function foo_noreturn_1(x_0)
{
let x_1
if foo_singlereturn_0(1) {}
sstore(mul(pc(),1), mod(pc(),mul(foo_singlereturn_0(1),shl(1,1))))
sstore(mul(pc(),msize()), mul(pc(),mul(foo_singlereturn_0(1),shl(add(mul(foo_singlereturn_0(1),shl(add(1,mul(foo_singlereturn_0(1),shl(add(mul(foo_singlereturn_0(1),gt(add(1,1),1)),1),foo_singlereturn_0(1)))),1)),1),1))))
}
foo_noreturn_1(calldataload(0))
function foo_singlereturn_1() -> x_0
{}
a_0 := foo_singlereturn_1()
sstore(0, a_0)
function foo_multireturn_1() -> x_0, x_1
{}
a_0, a_1 := foo_multireturn_1()
sstore(0, a_0)
sstore(32, a_1)
}
