{
let a_0, a_1, a_2, a_3
function foo_noreturn_0(x_0)
{
let x_1
for {}
shl(136,shl(136,shr(1,shl(136,shl(0x1,shr(136,shl(136,shl(136,shr(1,shl(1,shl(0x1,shr(1,shl(0x1,shr(136,shl(136,shl(136,shr(1,shl(1,shl(0x1,shr(1,shl(136,shl(136,shl(136,shl(1,shr(0x1,shl(136,shl(136,shr(1,shl(136,shl(0x1,shr(1,shl(136,shl(136,shl(136,shl(0x1,shr(0x1,shl(136,shl(136,shr(1,shl(136,shl(0x1,shr(136,shl(136,shl(136,shr(1,pc()))))))))))))))))))))))))))))))))))))))))))))){}
{}
if 1 {
let x_2 := 1
}
for { let i_0 := 0 } lt(i_0, 0x60) { i_0 := add(i_0, 0x20) } {
mstore(pc(), 1)
}
mstore(1, foo_singlereturn_0(1))
}
foo_noreturn_0(calldataload(0))
function foo_singlereturn_0(x_0) -> x_1
{
mstore(1, pc())
returndatacopy(1, 1, 1)
}
a_0 := foo_singlereturn_0(calldataload(0))
sstore(0, a_0)
function foo_multireturn_0(x_0, x_1, x_2, x_3) -> x_4, x_5, x_6
{}
a_0, a_1, a_2 := foo_multireturn_0(calldataload(0),calldataload(32),calldataload(64),calldataload(96))
sstore(0, a_0)
sstore(32, a_1)
sstore(64, a_2)
}
