{
let a_0, a_1, a_2, a_3
function foo_noreturn_0(x_0)
{
let x_1
if foo_singlereturn_0(foo_singlereturn_0(foo_singlereturn_0(foo_singlereturn_0(1, not(msize()), foo_singlereturn_0(1, 1, 1, add(foo_singlereturn_0(addmod(1, 1, addmod(foo_singlereturn_0(1, 1, add(1,foo_singlereturn_0(1, 1, 1, addmod(1, 0x1, 1))), 1), 1, 1)), 1, 1, 1),1)), 1), x_0, 1, 1), 1, 1, 1), x_0, foo_singlereturn_0(foo_singlereturn_0(1, not(msize()), foo_singlereturn_0(1, 1, 1, 1), 1), x_0, 1, 1), 1) {}
}
foo_noreturn_0(calldataload(0))
function foo_singlereturn_0(x_0, x_1, x_2, x_3) -> x_4
{
let x_5, x_6, x_7, x_8 := foo_multireturn_0()
let x_9, x_10, x_11, x_12 := foo_multireturn_0()
let x_13, x_14, x_15, x_16 := foo_multireturn_0()
}
a_0 := foo_singlereturn_0(calldataload(0),calldataload(32),calldataload(64),calldataload(96))
sstore(0, a_0)
function foo_multireturn_0() -> x_0, x_1, x_2, x_3
{
for { let i_0 := 0 } lt(i_0, 0x60) { i_0 := add(i_0, 0x20) } {}
selfdestruct(1)
}
a_0, a_1, a_2, a_3 := foo_multireturn_0()
sstore(0, a_0)
sstore(32, a_1)
sstore(64, a_2)
sstore(96, a_3)
}
